{"version":3,"names":["_webexCore","require","_common","_peopleBatcher","_interopRequireDefault","_obj","People","WebexPlugin","extend","namespace","children","batcher","PeopleBatcher","get","person","_promise","default","reject","Error","_getMe","id","personId","request","list","options","_this","_isArray","peopleIds","all","map","service","resource","qs","then","res","Page","webex","inferPersonIdFromUuid","base64","decode","includes","err","encode","concat","body","version","_applyDecoratedDescriptor2","oneFlight","_getOwnPropertyDescriptor","_default","exports"],"sources":["people.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {base64, oneFlight} from '@webex/common';\n\nimport PeopleBatcher from './people-batcher';\n\n/**\n * @typedef {Object} PersonObject\n * @property {string} id - (server generated) Unique identifier for the person\n * @property {Array<email>} emails - Email addresses of the person\n * @property {string} displayName - Display name of the person\n * @property {isoDate} created - (server generated) The date and time that the person was created\n */\n\n/**\n * @class\n */\nconst People = WebexPlugin.extend({\n  namespace: 'People',\n\n  children: {\n    batcher: PeopleBatcher,\n  },\n  /**\n   * Returns a single person by ID\n   * @instance\n   * @memberof People\n   * @param {PersonObject|uuid|string} person\n   * @returns {Promise<PersonObject>}\n   * @example\n   * webex.rooms.create({title: 'Get Person Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     return webex.people.get(membership.personId);\n   *   })\n   *   .then(function(alice) {\n   *     var assert = require('assert');\n   *     assert(alice.id);\n   *     assert(Array.isArray(alice.emails));\n   *     assert.equal(alice.emails.filter(function(email) {\n   *       return email === 'alice@example.com';\n   *     }).length, 1);\n   *     assert(alice.displayName);\n   *     assert(alice.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(person) {\n    if (!person) {\n      return Promise.reject(new Error('A person with an id is required'));\n    }\n    if (person === 'me') {\n      return this._getMe();\n    }\n    const id = person.personId || person.id || person;\n\n    return this.batcher.request(id);\n  },\n\n  /**\n   * Returns a list of people\n   * @instance\n   * @memberof People\n   * @param {Object | uuid[]} options or array of uuids\n   * @param {email} options.email - Returns people with an email that contains this string\n   * @param {string} options.displayName - Returns people with a name that contains this string\n   * @param {bool} showAllTypes optional flag that requires Hydra to send every type field,\n   * even if the type is not \"person\" (e.g.: SX10, webhook_integration, etc.)\n   * @returns {Promise<Page<PersonObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List People Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.people.list({email: 'alice@example.com'});\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 1);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   *  @example <caption>Example usage of array method</caption>\n   * var room;\n   * var aliceId;\n   * var bobId;\n   * webex.rooms.create({title: 'List People Array Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     aliceId = membership.personId;\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     bobId = membership.personId;\n   *   })\n   *   .then(function() {\n   *     return webex.people.list([aliceId, bobId]);\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 2);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    if (Array.isArray(options)) {\n      const peopleIds = options;\n\n      return Promise.all(peopleIds.map((personId) => this.batcher.request(personId)));\n    }\n\n    return this.request({\n      service: 'hydra',\n      resource: 'people',\n      qs: options,\n    }).then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Converts a uuid to a hydra id without a network dip.\n   * @param {string} id\n   * @private\n   * @returns {string}\n   */\n  inferPersonIdFromUuid(id) {\n    // base64.validate seems to return true for uuids, so we need a different\n    // check\n    try {\n      if (base64.decode(id).includes('ciscospark://')) {\n        return id;\n      }\n    } catch (err) {\n      // ignore\n    }\n\n    return base64.encode(`ciscospark://us/PEOPLE/${id}`);\n  },\n\n  /**\n   * Fetches the current user from the /people/me endpoint\n   * @instance\n   * @memberof People\n   * @private\n   * @returns {Promise<PersonObject>}\n   */\n  @oneFlight\n  _getMe() {\n    return this.webex\n      .request({\n        service: 'hydra',\n        resource: 'people/me',\n      })\n      .then((res) => res.body);\n  },\n});\n\nexport default People;\n"],"mappings":";;;;;;;;;;;;AAIA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAEA,IAAAE,cAAA,GAAAC,sBAAA,CAAAH,OAAA;AAA6C,IAAAI,IAAA;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAMC,MAAM,GAAGC,sBAAW,CAACC,MAAM,EAAAH,IAAA,GAAC;EAChCI,SAAS,EAAE,QAAQ;EAEnBC,QAAQ,EAAE;IACRC,OAAO,EAAEC;EACX,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,GAAG,WAAAA,IAACC,MAAM,EAAE;IACV,IAAI,CAACA,MAAM,EAAE;MACX,OAAOC,QAAA,CAAAC,OAAA,CAAQC,MAAM,CAAC,IAAIC,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrE;IACA,IAAIJ,MAAM,KAAK,IAAI,EAAE;MACnB,OAAO,IAAI,CAACK,MAAM,EAAE;IACtB;IACA,IAAMC,EAAE,GAAGN,MAAM,CAACO,QAAQ,IAAIP,MAAM,CAACM,EAAE,IAAIN,MAAM;IAEjD,OAAO,IAAI,CAACH,OAAO,CAACW,OAAO,CAACF,EAAE,CAAC;EACjC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,IAAI,WAAAA,KAACC,OAAO,EAAE;IAAA,IAAAC,KAAA;IACZ,IAAI,IAAAC,QAAA,CAAAV,OAAA,EAAcQ,OAAO,CAAC,EAAE;MAC1B,IAAMG,SAAS,GAAGH,OAAO;MAEzB,OAAOT,QAAA,CAAAC,OAAA,CAAQY,GAAG,CAACD,SAAS,CAACE,GAAG,CAAC,UAACR,QAAQ;QAAA,OAAKI,KAAI,CAACd,OAAO,CAACW,OAAO,CAACD,QAAQ,CAAC;MAAA,EAAC,CAAC;IACjF;IAEA,OAAO,IAAI,CAACC,OAAO,CAAC;MAClBQ,OAAO,EAAE,OAAO;MAChBC,QAAQ,EAAE,QAAQ;MAClBC,EAAE,EAAER;IACN,CAAC,CAAC,CAACS,IAAI,CAAC,UAACC,GAAG;MAAA,OAAK,IAAIC,eAAI,CAACD,GAAG,EAAET,KAAI,CAACW,KAAK,CAAC;IAAA,EAAC;EAC7C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqB,WAAAA,sBAACjB,EAAE,EAAE;IACxB;IACA;IACA,IAAI;MACF,IAAIkB,cAAM,CAACC,MAAM,CAACnB,EAAE,CAAC,CAACoB,QAAQ,CAAC,eAAe,CAAC,EAAE;QAC/C,OAAOpB,EAAE;MACX;IACF,CAAC,CAAC,OAAOqB,GAAG,EAAE;MACZ;IAAA;IAGF,OAAOH,cAAM,CAACI,MAAM,2BAAAC,MAAA,CAA2BvB,EAAE,EAAG;EACtD,CAAC;EAUDD,MAAM,WAAAA,OAAA,EAAG;IACP,OAAO,IAAI,CAACiB,KAAK,CACdd,OAAO,CAAC;MACPQ,OAAO,EAAE,OAAO;MAChBC,QAAQ,EAAE;IACZ,CAAC,CAAC,CACDE,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACU,IAAI;IAAA,EAAC;EAC5B,CAAC;EAAAC,OAAA;AACH,CAAC,OAAAC,0BAAA,CAAA9B,OAAA,EAAAX,IAAA,aATE0C,iBAAS,OAAAC,yBAAA,CAAAhC,OAAA,EAAAX,IAAA,aAAAA,IAAA,IAAAA,IAAA,EASV;AAAC,IAAA4C,QAAA,GAEY3C,MAAM;AAAA4C,OAAA,CAAAlC,OAAA,GAAAiC,QAAA"}