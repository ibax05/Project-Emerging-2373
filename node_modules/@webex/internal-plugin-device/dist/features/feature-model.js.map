{"version":3,"names":["_ampersandState","_interopRequireDefault","require","_constants","ownKeys","object","enumerableOnly","keys","_Object$keys","_Object$getOwnPropertySymbols","symbols","filter","sym","_Object$getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","Object","forEach","key","_defineProperty2","default","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","FeatureModel","AmpState","extend","idAttribute","props","lastModified","mutable","type","val","value","constructor","attrs","options","undefined","_defaults2","parse","_apply","prototype","model","_typeof2","parsedModel","_isNan","Number","FEATURE_TYPES","NUMBER","toLowerCase","BOOLEAN","STRING","serialize","_len","args","Array","_key","Date","toISOString","set","optns","_isObject2","_default","exports"],"sources":["feature-model.js"],"sourcesContent":["// External dependencies.\nimport AmpState from 'ampersand-state';\nimport {defaults, isObject} from 'lodash';\n\nimport {FEATURE_TYPES} from '../constants';\n\n/**\n * The model returned from the {@link FeatureModel#parse} method.\n *\n * @typedef {Object} ParsedFeatureModel\n * @property {boolean|number|string} ParsedFeatureModel.value - The parsed val.\n * @property {string} ParsedFeatureModel.type - The type of the parsed val.\n */\n\n/**\n * Feature model.\n *\n * @description\n * This model contains details on a single feature and is received from the\n * **WDM** service upon registration.\n */\nconst FeatureModel = AmpState.extend({\n  idAttribute: 'key', // needed by Ampersand to determine unique item\n\n  // Ampersand property members.\n\n  props: {\n    /**\n     * Contains the unique identifier for this feature to be addressed by.\n     *\n     * @type {string}\n     */\n    key: 'string',\n\n    /**\n     * This property contains the date in which this feature was last modified.\n     *\n     * @type {date}\n     */\n    lastModified: 'date',\n\n    /**\n     * This property defines whether or not the feature is mutable.\n     *\n     * @type {boolean}\n     */\n    mutable: 'boolean',\n\n    /**\n     * This property contains the data type the string value should be\n     * interpreted as.\n     *\n     * @type {FEATURE_TYPES}\n     */\n    type: 'string',\n\n    /**\n     * This property contains the string value of this feature.\n     *\n     * @type {string}\n     */\n    val: 'string',\n\n    /**\n     * This property contains the interpreted value of this feature.\n     *\n     * @type {any}\n     */\n    value: 'any',\n  },\n\n  /**\n   * Class object constructor. This method safely initializes the class object\n   * prior to it fully loading to allow data to be accessed and modified\n   * immediately after construction instead of initialization.\n   *\n   * @override\n   * @param {Object} attrs - An object to map against the feature's properties.\n   * @param {Object} [options={}] - Ampersand options for `parse` and `parent`.\n   */\n  constructor(attrs, options = {}) {\n    defaults(options, {parse: true});\n\n    return Reflect.apply(AmpState.prototype.constructor, this, [attrs, options]);\n  },\n\n  // Ampsersand method members.\n\n  /**\n   * Parse {@link FeatureModel} properties recieved as strings from **WDM**\n   * and cast them as their appropriate types.\n   *\n   * @private\n   * @memberof FeatureModel\n   * @param {Object} model - The model to parse.\n   * @property {string} model.val - The value to be parsed.\n   * @returns {ParsedFeatureModel} - The parsed model.\n   */\n  parse(model) {\n    // Validate that a model was provided and that it is an object.\n    if (!model || typeof model !== 'object') {\n      // Return an empty object to satisfy the requirements of `Ampersand`.\n      return {};\n    }\n\n    const parsedModel = {...model};\n    const {val} = parsedModel;\n\n    // Validate that the value is a number.\n    if (!Number.isNaN(Number(val))) {\n      parsedModel.type = FEATURE_TYPES.NUMBER;\n      parsedModel.value = Number(val);\n    }\n    // Validate if the value should be a true boolean.\n    else if (typeof val === 'string' && val.toLowerCase() === 'true') {\n      parsedModel.type = FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = true;\n    }\n    // Validate if the value should be a false boolean.\n    else if (typeof val === 'string' && val.toLowerCase() === 'false') {\n      parsedModel.type = FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = false;\n    }\n    // In all other cases, the value is string, even if it is undefined.\n    else {\n      parsedModel.type = FEATURE_TYPES.STRING;\n      parsedModel.value = val;\n    }\n\n    return parsedModel;\n  },\n\n  /**\n   * Serialize the feature using the parent ampersand method with its date as an\n   * ISO string. This converts the feature into a request-transportable object.\n   *\n   * @override\n   * @param  {Record<string,boolean>} [args] - List of properties to serialize.\n   * @returns {Object} - The request-ready transport object.\n   */\n  serialize(...args) {\n    // Call the overloaded class member.\n    const attrs = Reflect.apply(AmpState.prototype.serialize, this, args);\n\n    // Validate that the overloaded class member returned an object with the\n    // `lastModified` key-value pair and instance it as an ISO string.\n    if (attrs.lastModified) {\n      attrs.lastModified = new Date(attrs.lastModified).toISOString();\n    }\n\n    return attrs;\n  },\n\n  /**\n   * Set a property of this object to a specific value. This method utilizes\n   * code that exists within the `ampersand-state` dependency to handle\n   * scenarios in which `key = {\"key\": \"value\"}` or\n   * `key = \"key\", value = \"value\"`. Since the snippet is pulled directly from\n   * `ampersand-state`, there is no need to test both scenarios.\n   *\n   * @override\n   * @param {object | string} key - The key value, or object to be set.\n   * @param {any} value - The key value or object to set the keyed pair to.\n   * @param {any} options - The object to set the keyed pair to.\n   * @returns {any} - The changed property.\n   */\n  set(key, value, options) {\n    // Declare formatted output variables for properly setting the targetted\n    // property for this method.\n    let attrs;\n    let optns;\n\n    // Validate if the key is an instance of any object or not.\n    if (isObject(key) || key === null) {\n      attrs = key;\n      optns = value;\n    } else {\n      attrs = {};\n      attrs[key] = value;\n      optns = options;\n    }\n\n    attrs = this.parse(attrs, optns);\n\n    return Reflect.apply(AmpState.prototype.set, this, [attrs, optns]);\n  },\n});\n\nexport default FeatureModel;\n"],"mappings":"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"}