{"version":3,"names":["require","_webexCore","_calendar","_interopRequireDefault","_config","registerInternalPlugin","Calendar","config","payloadTransformer","predicates","name","direction","test","ctx","response","_promise","default","resolve","_has2","options","service","method","resource","extract","body","items","calendarMeetingExternal","transforms","fn","array","all","map","item","transform","object","encryptionKeyUrl","decryptedParticipants","encryptedParticipants","participant","decryptedMeetingJoinInfo","meetingJoinInfo","decryptedOrganizer","encryptedOrganizer","concat"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport '@webex/internal-plugin-device';\nimport '@webex/internal-plugin-encryption';\nimport '@webex/internal-plugin-conversation';\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has} from 'lodash';\n\nimport Calendar from './calendar';\nimport config from './config';\n\nregisterInternalPlugin('calendar', Calendar, {\n  config,\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'transformMeetingNotes',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(\n            has(response, 'body.encryptedNotes') &&\n              !(\n                response.options &&\n                response.options.service === 'calendar' &&\n                response.options.method === 'GET' &&\n                response.options.resource === 'schedulerData'\n              )\n          );\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        },\n      },\n      {\n        name: 'transformMeetingParticipants',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(\n            has(response, 'body.encryptedParticipants') &&\n              !(\n                response.options &&\n                response.options.service === 'calendar' &&\n                response.options.method === 'GET' &&\n                response.options.resource === 'schedulerData'\n              )\n          );\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        },\n      },\n      {\n        name: 'transformMeetingArray',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.items[0].seriesId'));\n        },\n        extract(response) {\n          return Promise.resolve(response.body.items);\n        },\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(\n            has(response, 'body.seriesId') &&\n              !(\n                response.options &&\n                response.options.service === 'calendar' &&\n                response.options.method === 'GET' &&\n                response.options.resource === 'schedulerData'\n              )\n          );\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        },\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'calendarMeetingExternal'));\n        },\n        extract(response) {\n          return Promise.resolve(response.calendarMeetingExternal);\n        },\n      },\n    ],\n    transforms: [\n      {\n        name: 'transformMeetingArray',\n        fn(ctx, array) {\n          return Promise.all(array.map((item) => ctx.transform('transformMeeting', item)));\n        },\n      },\n      {\n        name: 'transformMeeting',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl) {\n            return Promise.resolve();\n          }\n\n          // Decrypt participant properties if meeting object contains participants\n          const decryptedParticipants = object.encryptedParticipants\n            ? object.encryptedParticipants.map((participant) =>\n                Promise.all([\n                  ctx.transform(\n                    'decryptTextProp',\n                    'encryptedEmailAddress',\n                    object.encryptionKeyUrl,\n                    participant\n                  ),\n                  ctx.transform(\n                    'decryptTextProp',\n                    'encryptedName',\n                    object.encryptionKeyUrl,\n                    participant\n                  ),\n                ])\n              )\n            : [];\n\n          // Decrypt meetingJoinInfo properties if meeting object contains meetingJoinInfo\n          const decryptedMeetingJoinInfo = object.meetingJoinInfo\n            ? Promise.all([\n                ctx.transform(\n                  'decryptTextProp',\n                  'meetingJoinURI',\n                  object.encryptionKeyUrl,\n                  object.meetingJoinInfo\n                ),\n                ctx.transform(\n                  'decryptTextProp',\n                  'meetingJoinURL',\n                  object.encryptionKeyUrl,\n                  object.meetingJoinInfo\n                ),\n              ])\n            : [];\n\n          const decryptedOrganizer = object.encryptedOrganizer\n            ? Promise.all([\n                ctx.transform(\n                  'decryptTextProp',\n                  'encryptedEmailAddress',\n                  object.encryptionKeyUrl,\n                  object.encryptedOrganizer\n                ),\n                ctx.transform(\n                  'decryptTextProp',\n                  'encryptedName',\n                  object.encryptionKeyUrl,\n                  object.encryptedOrganizer\n                ),\n              ])\n            : [];\n\n          return Promise.all(\n            [\n              ctx.transform('decryptTextProp', 'encryptedSubject', object.encryptionKeyUrl, object),\n              ctx.transform(\n                'decryptTextProp',\n                'encryptedLocation',\n                object.encryptionKeyUrl,\n                object\n              ),\n              ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object),\n              ctx.transform('decryptTextProp', 'webexURI', object.encryptionKeyUrl, object),\n              ctx.transform('decryptTextProp', 'webexURL', object.encryptionKeyUrl, object),\n              ctx.transform('decryptTextProp', 'spaceMeetURL', object.encryptionKeyUrl, object),\n              ctx.transform('decryptTextProp', 'spaceURI', object.encryptionKeyUrl, object),\n              ctx.transform('decryptTextProp', 'spaceURL', object.encryptionKeyUrl, object),\n            ].concat(decryptedOrganizer, decryptedParticipants, decryptedMeetingJoinInfo)\n          );\n        },\n      },\n      {\n        name: 'transformMeetingNotes',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl) {\n            return Promise.resolve();\n          }\n\n          return Promise.all([\n            ctx.transform('decryptTextProp', 'encryptedNotes', object.encryptionKeyUrl, object),\n          ]);\n        },\n      },\n      {\n        name: 'transformMeetingParticipants',\n        direction: 'inbound',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.encryptionKeyUrl || !object.encryptedParticipants) {\n            return Promise.resolve();\n          }\n\n          // Decrypt participant properties\n          const decryptedParticipants = object.encryptedParticipants.map((participant) =>\n            Promise.all([\n              ctx.transform(\n                'decryptTextProp',\n                'encryptedEmailAddress',\n                object.encryptionKeyUrl,\n                participant\n              ),\n              ctx.transform(\n                'decryptTextProp',\n                'encryptedName',\n                object.encryptionKeyUrl,\n                participant\n              ),\n            ])\n          );\n\n          return Promise.all(decryptedParticipants);\n        },\n      },\n    ],\n  },\n});\n\nexport {default} from './calendar';\n"],"mappings":"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"}