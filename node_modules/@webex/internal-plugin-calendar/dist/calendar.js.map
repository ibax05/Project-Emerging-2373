{"version":3,"names":["_common","require","_webexCore","_collection","_interopRequireDefault","_constants","_calendarEncrypt","_calendarDecrypt","Calendar","WebexPlugin","extend","namespace","registered","rpcEventRequests","encryptionKeyUrl","initialize","_this","listenToOnce","webex","internal","encryption","kms","createUnboundKeys","count","then","keys","key","_isArray2","default","uri","logger","info","getKey","onBehalfOf","retrievedKey","register","_this2","canAuthorize","error","_promise","reject","Error","resolve","device","mercury","connect","listenForEvents","trigger","CALENDAR_REGISTERED","catch","concat","message","unregister","_this3","stopListeningForEvents","disconnect","CALENDAR_UNREGISTERED","_this4","on","envelope","_handleCreate","data","_handleUpdate","_handleDelete","_handleFreeBusy","off","id","CalendarCollection","set","calendarMeetingExternal","CALENDAR_UPDATED","get","CALENDAR_CREATE","item","remove","CALENDAR_DELETE","_this5","DecryptHelper","decryptFreeBusyResponse","response","calendarFreeBusyScheduleResponse","requestId","log","syncCalendar","options","arguments","length","undefined","fromDate","config","toDate","list","res","setAll","getAll","getByType","value","includes","getBy","processMeetingEvent","event","transform","getParticipants","request","method","service","resource","base64","encode","getNotes","_this6","qs","meetingObjects","body","items","promises","forEach","meeting","encryptedParticipants","push","notesResponse","all","createCalendarEvent","query","_this7","EncryptHelper","encryptCalendarEventRequest","updateCalendarEvent","_this8","deleteCalendarEvent","getSchedulerData","_this9","decryptSchedulerDataResponse","getFreeBusy","_this10","encryptFreeBusyRequest","version","_default","exports"],"sources":["calendar.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Calendar Item Create Event\n * Emitted when a calendar item has been added\n * @event calendar:meeting:create\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Item Update Event\n * Emitted when a calendar item has been updated\n * @event calendar:meeting:update\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Item Update Event\n * Emitted when a calendar item has been deleted\n * @event calendar:meeting:delete\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:registered\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:unregistered\n * @instance\n * @memberof Calendar\n */\nimport {isArray} from 'lodash';\nimport {base64} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport CalendarCollection from './collection';\nimport {\n  CALENDAR_REGISTERED,\n  CALENDAR_UNREGISTERED,\n  CALENDAR_DELETE,\n  CALENDAR_CREATE,\n  CALENDAR_UPDATED,\n} from './constants';\n\nimport EncryptHelper from './calendar.encrypt.helper';\nimport DecryptHelper from './calendar.decrypt.helper';\n\nconst Calendar = WebexPlugin.extend({\n  namespace: 'Calendar',\n\n  /**\n   * registered value indicating events registration is successful\n   * @instance\n   * @type {Boolean}\n   * @memberof Calendar\n   */\n  registered: false,\n\n  /**\n   * Cache all rpc event request locally\n   * */\n  rpcEventRequests: [],\n\n  /**\n   * Cache KMS encryptionKeyUrl\n   * */\n  encryptionKeyUrl: null,\n\n  /**\n   * WebexPlugin initialize method. This triggers once Webex has completed its\n   * initialization workflow.\n   *\n   * If the plugin is meant to perform startup actions, place them in this\n   * `initialize()` method instead of the `constructor()` method.\n   * @returns {void}\n   */\n  initialize() {\n    // Used to perform actions after webex is fully qualified and ready for\n    // operation.\n    this.listenToOnce(this.webex, 'ready', () => {\n      // Pre-fetch a KMS encryption key url to improve performance\n      this.webex.internal.encryption.kms.createUnboundKeys({count: 1}).then((keys) => {\n        const key = isArray(keys) ? keys[0] : keys;\n        this.encryptionKeyUrl = key ? key.uri : null;\n        this.logger.info('calendar->bind a KMS encryption key url');\n        this.webex.internal.encryption\n          .getKey(this.encryptionKeyUrl, {onBehalfOf: null})\n          .then((retrievedKey) => {\n            this.encryptionKeyUrl = retrievedKey ? retrievedKey.uri : null;\n            this.logger.info('calendar->retrieve the KMS encryption key url and cache it');\n          });\n      });\n    });\n  },\n\n  /**\n   * Explicitly sets up the calendar plugin by registering\n   * the device, connecting to mercury, and listening for calendar events.\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  register() {\n    if (!this.webex.canAuthorize) {\n      this.logger.error('calendar->register#ERROR, Unable to register, SDK cannot authorize');\n\n      return Promise.reject(new Error('SDK cannot authorize'));\n    }\n\n    if (this.registered) {\n      this.logger.info('calendar->register#INFO, Calendar plugin already registered');\n\n      return Promise.resolve();\n    }\n\n    return this.webex.internal.device\n      .register()\n      .then(() => this.webex.internal.mercury.connect())\n      .then(() => {\n        this.listenForEvents();\n        this.trigger(CALENDAR_REGISTERED);\n        this.registered = true;\n      })\n      .catch((error) => {\n        this.logger.error(`calendar->register#ERROR, Unable to register, ${error.message}`);\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * Explicitly tears down the calendar plugin by deregistering\n   * the device, disconnecting from mercury, and stops listening to calendar events\n   *\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  unregister() {\n    if (!this.registered) {\n      this.logger.info('calendar->unregister#INFO, Calendar plugin already unregistered');\n\n      return Promise.resolve();\n    }\n\n    this.stopListeningForEvents();\n\n    return this.webex.internal.mercury\n      .disconnect()\n      .then(() => this.webex.internal.device.unregister())\n      .then(() => {\n        this.trigger(CALENDAR_UNREGISTERED);\n        this.registered = false;\n      });\n  },\n\n  /**\n   * registers for calendar events through mercury\n   * @returns {undefined}\n   * @private\n   */\n  listenForEvents() {\n    // Calendar mercury events listener\n    this.webex.internal.mercury.on('event:calendar.meeting.create', (envelope) => {\n      this._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update', (envelope) => {\n      this._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.create.minimal', (envelope) => {\n      this._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update.minimal', (envelope) => {\n      this._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.delete', (envelope) => {\n      this._handleDelete(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.free_busy', (envelope) => {\n      this._handleFreeBusy(envelope.data);\n    });\n  },\n\n  /**\n   * unregisteres all the calendar events from mercury\n   * @returns {undefined}\n   * @private\n   */\n  stopListeningForEvents() {\n    this.webex.internal.mercury.off('event:calendar.meeting.create');\n    this.webex.internal.mercury.off('event:calendar.meeting.create.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.update');\n    this.webex.internal.mercury.off('event:calendar.meeting.update.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.delete');\n    this.webex.internal.mercury.off('event:calendar.free_busy');\n  },\n\n  /**\n   * handles update events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleUpdate(data) {\n    const id = CalendarCollection.set(data.calendarMeetingExternal);\n\n    this.trigger(CALENDAR_UPDATED, CalendarCollection.get(id));\n  },\n\n  /**\n   * handles create events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleCreate(data) {\n    const id = CalendarCollection.set(data.calendarMeetingExternal);\n\n    this.trigger(CALENDAR_CREATE, CalendarCollection.get(id));\n  },\n\n  /**\n   * handles delete events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleDelete(data) {\n    const item = CalendarCollection.remove(data.calendarMeetingExternal.id);\n\n    this.trigger(CALENDAR_DELETE, item);\n  },\n\n  /**\n   * handles free_busy events\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleFreeBusy(data) {\n    DecryptHelper.decryptFreeBusyResponse(this, data).then(() => {\n      let response = {};\n      if (data && data.calendarFreeBusyScheduleResponse) {\n        response = data.calendarFreeBusyScheduleResponse;\n      }\n      if (response && response.requestId && response.requestId in this.rpcEventRequests) {\n        this.logger.log(\n          `webex.internal.calendar - receive requests, requestId: ${response.requestId}`\n        );\n        delete response.encryptionKeyUrl;\n        const {resolve} = this.rpcEventRequests[response.requestId];\n        resolve(response);\n        delete this.rpcEventRequests[response.requestId];\n      } else {\n        this.logger.log('webex.internal.calendar - receive other requests.');\n      }\n    });\n  },\n\n  /**\n   * Retrieves a collection of calendars based on the request parameters\n   * Defaults to 1 day before and 7 days ahead\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of calendars\n   */\n  syncCalendar(options = {fromDate: this.config.fromDate, toDate: this.config.toDate}) {\n    return this.list({fromDate: options.fromDate, toDate: options.toDate}).then((res) => {\n      CalendarCollection.setAll(res);\n\n      return CalendarCollection.getAll();\n    });\n  },\n  /**\n   * get the calendar item that has a matching value\n   * @param {String} key meeting property\n   * @param {Any} value the meeting property to match\n   * @returns {Object}\n   */\n  getByType(key, value) {\n    if (['spaceURI', 'spaceMeetURL', 'conversationId'].includes(key)) {\n      return CalendarCollection.getBy(key, value);\n    }\n    throw new Error('key must be one of, spaceURI, spaceMeetURL, or conversationId');\n  },\n\n  /**\n   * gets all the calendar items that have been populated\n   * @returns {Object}\n   */\n  getAll() {\n    return CalendarCollection.getAll();\n  },\n\n  /**\n   * Decrypts an encrypted incoming calendar event\n   * @param {Object} event\n   * @returns {Promise} Resolves with a decrypted calendar event\n   */\n  processMeetingEvent(event) {\n    return this.webex.transform('inbound', event).then(() => event);\n  },\n\n  /**\n   * Retrieves an array of meeting participants for the meeting id\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting participants\n   */\n  getParticipants(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: `calendarEvents/${base64.encode(id)}/participants`,\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting notes\n   */\n  getNotes(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: `calendarEvents/${base64.encode(id)}/notes`,\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of meetings\n   */\n  list(options) {\n    options = options || {};\n\n    return this.webex\n      .request({\n        method: 'GET',\n        service: 'calendar',\n        resource: 'calendarEvents',\n        qs: options,\n      })\n      .then((res) => {\n        const meetingObjects = res.body.items;\n        const promises = [];\n\n        meetingObjects.forEach((meeting) => {\n          if (!meeting.encryptedParticipants) {\n            promises.push(\n              this.getParticipants(meeting.id).then((notesResponse) => {\n                meeting.encryptedParticipants = notesResponse.body.encryptedParticipants;\n              })\n            );\n          }\n        });\n\n        return Promise.all(promises).then(() => meetingObjects);\n      });\n  },\n\n  /**\n   * Create calendar event\n   * @param {object} [data] meeting payload data\n   * @param {object} [query] the query parameters for specific usage\n   * @returns {Promise} Resolves with creating calendar event response\n   * */\n  createCalendarEvent(data, query) {\n    return EncryptHelper.encryptCalendarEventRequest(this, data).then(() =>\n      this.request({\n        method: 'POST',\n        service: 'calendar',\n        body: data,\n        resource: 'calendarEvents/sync',\n        qs: query || {},\n      })\n    );\n  },\n\n  /**\n   * Update calendar event\n   * @param {string} [id] calendar event id\n   * @param {object} [data] meeting payload data\n   * @param {object} [query] the query parameters for specific usage\n   * @returns {Promise} Resolves with updating calendar event response\n   * */\n  updateCalendarEvent(id, data, query) {\n    return EncryptHelper.encryptCalendarEventRequest(this, data).then(() =>\n      this.request({\n        method: 'PATCH',\n        service: 'calendar',\n        body: data,\n        resource: `calendarEvents/${base64.encode(id)}/sync`,\n        qs: query || {},\n      })\n    );\n  },\n\n  /**\n   * Delete calendar event\n   * @param {string} [id] calendar event id\n   * @param {object} [query] the query parameters for specific usage\n   * @returns {Promise} Resolves with deleting calendar event response\n   * */\n  deleteCalendarEvent(id, query) {\n    return this.request({\n      method: 'DELETE',\n      service: 'calendar',\n      resource: `calendarEvents/${base64.encode(id)}/sync`,\n      qs: query || {},\n    });\n  },\n\n  /**\n   * @typedef QuerySchedulerDataOptions\n   * @param {string} [siteName] it is site full url, must have. Example: ccctest.dmz.webex.com\n   * @param {string} [id] it is seriesOrOccurrenceId. If present, the series/occurrence meeting ID to fetch data for.\n   *                      Example: 040000008200E00074C5B7101A82E008000000004A99F11A0841D9010000000000000000100000009EE499D4A71C1A46B51494C70EC7BFE5\n   * @param {string} [clientMeetingId] If present, the client meeting UUID to fetch data for.\n   *                      Example: 7f318aa9-887c-6e94-802a-8dc8e6eb1a0a\n   * @param {string} [scheduleTemplateId] it template id.\n   * @param {string} [sessionTypeId] it session type id.\n   * @param {string} [organizerCIUserId] required in schedule-on-behalf case. It is the organizer's CI UUID.\n   * @param {boolean} [usmPreference]\n   * @param {string} [webexMeetingId] webex side meeting UUID\n   * @param {string} [eventId] event ID.\n   * @param {string} [icalUid] icalendar UUID.\n   * @param {string} [thirdPartyType] third part type, such as: Microsoft\n   */\n  /**\n   * Get scheduler data from calendar service\n   * @param {QuerySchedulerDataOptions} [query] the command parameters for fetching scheduler data.\n   * @returns {Promise} Resolves with a decrypted scheduler data\n   * */\n  getSchedulerData(query) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: 'schedulerData',\n      qs: query || {},\n    }).then((response) => {\n      return DecryptHelper.decryptSchedulerDataResponse(this, response.body).then(() => response);\n    });\n  },\n\n  /**\n   * Get free busy status from calendar service\n   * @param {Object} [data] the command parameters for fetching free busy status.\n   * @param {object} [query] the query parameters for specific usage\n   * @returns {Promise} Resolves with a decrypted response\n   * */\n  getFreeBusy(data, query) {\n    return EncryptHelper.encryptFreeBusyRequest(this, data)\n      .then(() => {\n        return this.request({\n          method: 'POST',\n          service: 'calendar',\n          body: data,\n          resource: 'freebusy',\n          qs: query || {},\n        });\n      })\n      .then(() => {\n        return new Promise((resolve, reject) => {\n          this.rpcEventRequests[data.requestId] = {resolve, reject};\n        });\n      })\n      .catch((error) => {\n        throw error;\n      });\n  },\n});\n\nexport default Calendar;\n"],"mappings":";;;;;;;;;;AA4CA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AAEA,IAAAE,WAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,UAAA,GAAAJ,OAAA;AAQA,IAAAK,gBAAA,GAAAF,sBAAA,CAAAH,OAAA;AACA,IAAAM,gBAAA,GAAAH,sBAAA,CAAAH,OAAA;AAEA,IAAMO,QAAQ,GAAGC,sBAAW,CAACC,MAAM,CAAC;EAClCC,SAAS,EAAE,UAAU;EAErB;AACF;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE,KAAK;EAEjB;AACF;AACA;EACEC,gBAAgB,EAAE,EAAE;EAEpB;AACF;AACA;EACEC,gBAAgB,EAAE,IAAI;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,UAAU,WAAAA,WAAA,EAAG;IAAA,IAAAC,KAAA;IACX;IACA;IACA,IAAI,CAACC,YAAY,CAAC,IAAI,CAACC,KAAK,EAAE,OAAO,EAAE,YAAM;MAC3C;MACAF,KAAI,CAACE,KAAK,CAACC,QAAQ,CAACC,UAAU,CAACC,GAAG,CAACC,iBAAiB,CAAC;QAACC,KAAK,EAAE;MAAC,CAAC,CAAC,CAACC,IAAI,CAAC,UAACC,IAAI,EAAK;QAC9E,IAAMC,GAAG,GAAG,IAAAC,SAAA,CAAAC,OAAA,EAAQH,IAAI,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI;QAC1CT,KAAI,CAACF,gBAAgB,GAAGY,GAAG,GAAGA,GAAG,CAACG,GAAG,GAAG,IAAI;QAC5Cb,KAAI,CAACc,MAAM,CAACC,IAAI,CAAC,yCAAyC,CAAC;QAC3Df,KAAI,CAACE,KAAK,CAACC,QAAQ,CAACC,UAAU,CAC3BY,MAAM,CAAChB,KAAI,CAACF,gBAAgB,EAAE;UAACmB,UAAU,EAAE;QAAI,CAAC,CAAC,CACjDT,IAAI,CAAC,UAACU,YAAY,EAAK;UACtBlB,KAAI,CAACF,gBAAgB,GAAGoB,YAAY,GAAGA,YAAY,CAACL,GAAG,GAAG,IAAI;UAC9Db,KAAI,CAACc,MAAM,CAACC,IAAI,CAAC,4DAA4D,CAAC;QAChF,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,QAAQ,WAAAA,SAAA,EAAG;IAAA,IAAAC,MAAA;IACT,IAAI,CAAC,IAAI,CAAClB,KAAK,CAACmB,YAAY,EAAE;MAC5B,IAAI,CAACP,MAAM,CAACQ,KAAK,CAAC,oEAAoE,CAAC;MAEvF,OAAOC,QAAA,CAAAX,OAAA,CAAQY,MAAM,CAAC,IAAIC,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC1D;IAEA,IAAI,IAAI,CAAC7B,UAAU,EAAE;MACnB,IAAI,CAACkB,MAAM,CAACC,IAAI,CAAC,6DAA6D,CAAC;MAE/E,OAAOQ,QAAA,CAAAX,OAAA,CAAQc,OAAO,EAAE;IAC1B;IAEA,OAAO,IAAI,CAACxB,KAAK,CAACC,QAAQ,CAACwB,MAAM,CAC9BR,QAAQ,EAAE,CACVX,IAAI,CAAC;MAAA,OAAMY,MAAI,CAAClB,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACC,OAAO,EAAE;IAAA,EAAC,CACjDrB,IAAI,CAAC,YAAM;MACVY,MAAI,CAACU,eAAe,EAAE;MACtBV,MAAI,CAACW,OAAO,CAACC,8BAAmB,CAAC;MACjCZ,MAAI,CAACxB,UAAU,GAAG,IAAI;IACxB,CAAC,CAAC,CACDqC,KAAK,CAAC,UAACX,KAAK,EAAK;MAChBF,MAAI,CAACN,MAAM,CAACQ,KAAK,kDAAAY,MAAA,CAAkDZ,KAAK,CAACa,OAAO,EAAG;MAEnF,OAAOZ,QAAA,CAAAX,OAAA,CAAQY,MAAM,CAACF,KAAK,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,UAAU,WAAAA,WAAA,EAAG;IAAA,IAAAC,MAAA;IACX,IAAI,CAAC,IAAI,CAACzC,UAAU,EAAE;MACpB,IAAI,CAACkB,MAAM,CAACC,IAAI,CAAC,iEAAiE,CAAC;MAEnF,OAAOQ,QAAA,CAAAX,OAAA,CAAQc,OAAO,EAAE;IAC1B;IAEA,IAAI,CAACY,sBAAsB,EAAE;IAE7B,OAAO,IAAI,CAACpC,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAC/BW,UAAU,EAAE,CACZ/B,IAAI,CAAC;MAAA,OAAM6B,MAAI,CAACnC,KAAK,CAACC,QAAQ,CAACwB,MAAM,CAACS,UAAU,EAAE;IAAA,EAAC,CACnD5B,IAAI,CAAC,YAAM;MACV6B,MAAI,CAACN,OAAO,CAACS,gCAAqB,CAAC;MACnCH,MAAI,CAACzC,UAAU,GAAG,KAAK;IACzB,CAAC,CAAC;EACN,CAAC;EAED;AACF;AACA;AACA;AACA;EACEkC,eAAe,WAAAA,gBAAA,EAAG;IAAA,IAAAW,MAAA;IAChB;IACA,IAAI,CAACvC,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACc,EAAE,CAAC,+BAA+B,EAAE,UAACC,QAAQ,EAAK;MAC5EF,MAAI,CAACG,aAAa,CAACD,QAAQ,CAACE,IAAI,CAAC;IACnC,CAAC,CAAC;IACF,IAAI,CAAC3C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACc,EAAE,CAAC,+BAA+B,EAAE,UAACC,QAAQ,EAAK;MAC5EF,MAAI,CAACK,aAAa,CAACH,QAAQ,CAACE,IAAI,CAAC;IACnC,CAAC,CAAC;IACF,IAAI,CAAC3C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACc,EAAE,CAAC,uCAAuC,EAAE,UAACC,QAAQ,EAAK;MACpFF,MAAI,CAACG,aAAa,CAACD,QAAQ,CAACE,IAAI,CAAC;IACnC,CAAC,CAAC;IACF,IAAI,CAAC3C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACc,EAAE,CAAC,uCAAuC,EAAE,UAACC,QAAQ,EAAK;MACpFF,MAAI,CAACK,aAAa,CAACH,QAAQ,CAACE,IAAI,CAAC;IACnC,CAAC,CAAC;IACF,IAAI,CAAC3C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACc,EAAE,CAAC,+BAA+B,EAAE,UAACC,QAAQ,EAAK;MAC5EF,MAAI,CAACM,aAAa,CAACJ,QAAQ,CAACE,IAAI,CAAC;IACnC,CAAC,CAAC;IACF,IAAI,CAAC3C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACc,EAAE,CAAC,0BAA0B,EAAE,UAACC,QAAQ,EAAK;MACvEF,MAAI,CAACO,eAAe,CAACL,QAAQ,CAACE,IAAI,CAAC;IACrC,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;EACEP,sBAAsB,WAAAA,uBAAA,EAAG;IACvB,IAAI,CAACpC,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACqB,GAAG,CAAC,+BAA+B,CAAC;IAChE,IAAI,CAAC/C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACqB,GAAG,CAAC,uCAAuC,CAAC;IACxE,IAAI,CAAC/C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACqB,GAAG,CAAC,+BAA+B,CAAC;IAChE,IAAI,CAAC/C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACqB,GAAG,CAAC,uCAAuC,CAAC;IACxE,IAAI,CAAC/C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACqB,GAAG,CAAC,+BAA+B,CAAC;IAChE,IAAI,CAAC/C,KAAK,CAACC,QAAQ,CAACyB,OAAO,CAACqB,GAAG,CAAC,0BAA0B,CAAC;EAC7D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEH,aAAa,WAAAA,cAACD,IAAI,EAAE;IAClB,IAAMK,EAAE,GAAGC,mBAAkB,CAACC,GAAG,CAACP,IAAI,CAACQ,uBAAuB,CAAC;IAE/D,IAAI,CAACtB,OAAO,CAACuB,2BAAgB,EAAEH,mBAAkB,CAACI,GAAG,CAACL,EAAE,CAAC,CAAC;EAC5D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEN,aAAa,WAAAA,cAACC,IAAI,EAAE;IAClB,IAAMK,EAAE,GAAGC,mBAAkB,CAACC,GAAG,CAACP,IAAI,CAACQ,uBAAuB,CAAC;IAE/D,IAAI,CAACtB,OAAO,CAACyB,0BAAe,EAAEL,mBAAkB,CAACI,GAAG,CAACL,EAAE,CAAC,CAAC;EAC3D,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEH,aAAa,WAAAA,cAACF,IAAI,EAAE;IAClB,IAAMY,IAAI,GAAGN,mBAAkB,CAACO,MAAM,CAACb,IAAI,CAACQ,uBAAuB,CAACH,EAAE,CAAC;IAEvE,IAAI,CAACnB,OAAO,CAAC4B,0BAAe,EAAEF,IAAI,CAAC;EACrC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACET,eAAe,WAAAA,gBAACH,IAAI,EAAE;IAAA,IAAAe,MAAA;IACpBC,wBAAa,CAACC,uBAAuB,CAAC,IAAI,EAAEjB,IAAI,CAAC,CAACrC,IAAI,CAAC,YAAM;MAC3D,IAAIuD,QAAQ,GAAG,CAAC,CAAC;MACjB,IAAIlB,IAAI,IAAIA,IAAI,CAACmB,gCAAgC,EAAE;QACjDD,QAAQ,GAAGlB,IAAI,CAACmB,gCAAgC;MAClD;MACA,IAAID,QAAQ,IAAIA,QAAQ,CAACE,SAAS,IAAIF,QAAQ,CAACE,SAAS,IAAIL,MAAI,CAAC/D,gBAAgB,EAAE;QACjF+D,MAAI,CAAC9C,MAAM,CAACoD,GAAG,2DAAAhC,MAAA,CAC6C6B,QAAQ,CAACE,SAAS,EAC7E;QACD,OAAOF,QAAQ,CAACjE,gBAAgB;QAChC,IAAO4B,OAAO,GAAIkC,MAAI,CAAC/D,gBAAgB,CAACkE,QAAQ,CAACE,SAAS,CAAC,CAApDvC,OAAO;QACdA,OAAO,CAACqC,QAAQ,CAAC;QACjB,OAAOH,MAAI,CAAC/D,gBAAgB,CAACkE,QAAQ,CAACE,SAAS,CAAC;MAClD,CAAC,MAAM;QACLL,MAAI,CAAC9C,MAAM,CAACoD,GAAG,CAAC,mDAAmD,CAAC;MACtE;IACF,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAY,WAAAA,aAAA,EAAyE;IAAA,IAAxEC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;MAACG,QAAQ,EAAE,IAAI,CAACC,MAAM,CAACD,QAAQ;MAAEE,MAAM,EAAE,IAAI,CAACD,MAAM,CAACC;IAAM,CAAC;IACjF,OAAO,IAAI,CAACC,IAAI,CAAC;MAACH,QAAQ,EAAEJ,OAAO,CAACI,QAAQ;MAAEE,MAAM,EAAEN,OAAO,CAACM;IAAM,CAAC,CAAC,CAAClE,IAAI,CAAC,UAACoE,GAAG,EAAK;MACnFzB,mBAAkB,CAAC0B,MAAM,CAACD,GAAG,CAAC;MAE9B,OAAOzB,mBAAkB,CAAC2B,MAAM,EAAE;IACpC,CAAC,CAAC;EACJ,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,WAAAA,UAACrE,GAAG,EAAEsE,KAAK,EAAE;IACpB,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAACC,QAAQ,CAACvE,GAAG,CAAC,EAAE;MAChE,OAAOyC,mBAAkB,CAAC+B,KAAK,CAACxE,GAAG,EAAEsE,KAAK,CAAC;IAC7C;IACA,MAAM,IAAIvD,KAAK,CAAC,+DAA+D,CAAC;EAClF,CAAC;EAED;AACF;AACA;AACA;EACEqD,MAAM,WAAAA,OAAA,EAAG;IACP,OAAO3B,mBAAkB,CAAC2B,MAAM,EAAE;EACpC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEK,mBAAmB,WAAAA,oBAACC,KAAK,EAAE;IACzB,OAAO,IAAI,CAAClF,KAAK,CAACmF,SAAS,CAAC,SAAS,EAAED,KAAK,CAAC,CAAC5E,IAAI,CAAC;MAAA,OAAM4E,KAAK;IAAA,EAAC;EACjE,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,eAAe,WAAAA,gBAACpC,EAAE,EAAE;IAClB,OAAO,IAAI,CAACqC,OAAO,CAAC;MAClBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,UAAU;MACnBC,QAAQ,oBAAAxD,MAAA,CAAoByD,cAAM,CAACC,MAAM,CAAC1C,EAAE,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;EACE2C,QAAQ,WAAAA,SAAC3C,EAAE,EAAE;IACX,OAAO,IAAI,CAACqC,OAAO,CAAC;MAClBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,UAAU;MACnBC,QAAQ,oBAAAxD,MAAA,CAAoByD,cAAM,CAACC,MAAM,CAAC1C,EAAE,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEyB,IAAI,WAAAA,KAACP,OAAO,EAAE;IAAA,IAAA0B,MAAA;IACZ1B,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,OAAO,IAAI,CAAClE,KAAK,CACdqF,OAAO,CAAC;MACPC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,UAAU;MACnBC,QAAQ,EAAE,gBAAgB;MAC1BK,EAAE,EAAE3B;IACN,CAAC,CAAC,CACD5D,IAAI,CAAC,UAACoE,GAAG,EAAK;MACb,IAAMoB,cAAc,GAAGpB,GAAG,CAACqB,IAAI,CAACC,KAAK;MACrC,IAAMC,QAAQ,GAAG,EAAE;MAEnBH,cAAc,CAACI,OAAO,CAAC,UAACC,OAAO,EAAK;QAClC,IAAI,CAACA,OAAO,CAACC,qBAAqB,EAAE;UAClCH,QAAQ,CAACI,IAAI,CACXT,MAAI,CAACR,eAAe,CAACe,OAAO,CAACnD,EAAE,CAAC,CAAC1C,IAAI,CAAC,UAACgG,aAAa,EAAK;YACvDH,OAAO,CAACC,qBAAqB,GAAGE,aAAa,CAACP,IAAI,CAACK,qBAAqB;UAC1E,CAAC,CAAC,CACH;QACH;MACF,CAAC,CAAC;MAEF,OAAO/E,QAAA,CAAAX,OAAA,CAAQ6F,GAAG,CAACN,QAAQ,CAAC,CAAC3F,IAAI,CAAC;QAAA,OAAMwF,cAAc;MAAA,EAAC;IACzD,CAAC,CAAC;EACN,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEU,mBAAmB,WAAAA,oBAAC7D,IAAI,EAAE8D,KAAK,EAAE;IAAA,IAAAC,MAAA;IAC/B,OAAOC,wBAAa,CAACC,2BAA2B,CAAC,IAAI,EAAEjE,IAAI,CAAC,CAACrC,IAAI,CAAC;MAAA,OAChEoG,MAAI,CAACrB,OAAO,CAAC;QACXC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE,UAAU;QACnBQ,IAAI,EAAEpD,IAAI;QACV6C,QAAQ,EAAE,qBAAqB;QAC/BK,EAAE,EAAEY,KAAK,IAAI,CAAC;MAChB,CAAC,CAAC;IAAA,EACH;EACH,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,mBAAmB,WAAAA,oBAAC7D,EAAE,EAAEL,IAAI,EAAE8D,KAAK,EAAE;IAAA,IAAAK,MAAA;IACnC,OAAOH,wBAAa,CAACC,2BAA2B,CAAC,IAAI,EAAEjE,IAAI,CAAC,CAACrC,IAAI,CAAC;MAAA,OAChEwG,MAAI,CAACzB,OAAO,CAAC;QACXC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE,UAAU;QACnBQ,IAAI,EAAEpD,IAAI;QACV6C,QAAQ,oBAAAxD,MAAA,CAAoByD,cAAM,CAACC,MAAM,CAAC1C,EAAE,CAAC,UAAO;QACpD6C,EAAE,EAAEY,KAAK,IAAI,CAAC;MAChB,CAAC,CAAC;IAAA,EACH;EACH,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEM,mBAAmB,WAAAA,oBAAC/D,EAAE,EAAEyD,KAAK,EAAE;IAC7B,OAAO,IAAI,CAACpB,OAAO,CAAC;MAClBC,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE,UAAU;MACnBC,QAAQ,oBAAAxD,MAAA,CAAoByD,cAAM,CAACC,MAAM,CAAC1C,EAAE,CAAC,UAAO;MACpD6C,EAAE,EAAEY,KAAK,IAAI,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;AACF;AACA;AACA;AACA;EACEO,gBAAgB,WAAAA,iBAACP,KAAK,EAAE;IAAA,IAAAQ,MAAA;IACtB,OAAO,IAAI,CAAC5B,OAAO,CAAC;MAClBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,UAAU;MACnBC,QAAQ,EAAE,eAAe;MACzBK,EAAE,EAAEY,KAAK,IAAI,CAAC;IAChB,CAAC,CAAC,CAACnG,IAAI,CAAC,UAACuD,QAAQ,EAAK;MACpB,OAAOF,wBAAa,CAACuD,4BAA4B,CAACD,MAAI,EAAEpD,QAAQ,CAACkC,IAAI,CAAC,CAACzF,IAAI,CAAC;QAAA,OAAMuD,QAAQ;MAAA,EAAC;IAC7F,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEsD,WAAW,WAAAA,YAACxE,IAAI,EAAE8D,KAAK,EAAE;IAAA,IAAAW,OAAA;IACvB,OAAOT,wBAAa,CAACU,sBAAsB,CAAC,IAAI,EAAE1E,IAAI,CAAC,CACpDrC,IAAI,CAAC,YAAM;MACV,OAAO8G,OAAI,CAAC/B,OAAO,CAAC;QAClBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE,UAAU;QACnBQ,IAAI,EAAEpD,IAAI;QACV6C,QAAQ,EAAE,UAAU;QACpBK,EAAE,EAAEY,KAAK,IAAI,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC,CACDnG,IAAI,CAAC,YAAM;MACV,OAAO,IAAAe,QAAA,CAAAX,OAAA,CAAY,UAACc,OAAO,EAAEF,MAAM,EAAK;QACtC8F,OAAI,CAACzH,gBAAgB,CAACgD,IAAI,CAACoB,SAAS,CAAC,GAAG;UAACvC,OAAO,EAAPA,OAAO;UAAEF,MAAM,EAANA;QAAM,CAAC;MAC3D,CAAC,CAAC;IACJ,CAAC,CAAC,CACDS,KAAK,CAAC,UAACX,KAAK,EAAK;MAChB,MAAMA,KAAK;IACb,CAAC,CAAC;EACN,CAAC;EAAAkG,OAAA;AACH,CAAC,CAAC;AAAC,IAAAC,QAAA,GAEYjI,QAAQ;AAAAkI,OAAA,CAAA9G,OAAA,GAAA6G,QAAA"}