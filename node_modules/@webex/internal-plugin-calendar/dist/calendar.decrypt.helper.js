"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _values = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values"));
var _decryptTextProp = function _decryptTextProp(ctx, name, key, object) {
  if (!object[name]) {
    return _promise.default.resolve();
  }
  return ctx.webex.internal.encryption.decryptText(key.uri || key, object[name]).then(function (plaintext) {
    object[name] = plaintext;
  });
};
var DecryptHelper = {
  /**
   * Decrypt scheduler data response
   * @param {object} [ctx] context
   * @param {object} [data] scheduler data response
   * @returns {Promise} Resolves with decrypted response
   * */
  decryptSchedulerDataResponse: function decryptSchedulerDataResponse(ctx, data) {
    if (!data) {
      return _promise.default.resolve();
    }
    if (!data.encryptionKeyUrl) {
      return _promise.default.resolve();
    }

    // Decrypt participant properties if meeting object contains participants
    var decryptedParticipants = data.encryptedParticipants ? data.encryptedParticipants.map(function (participant) {
      return _promise.default.all([_decryptTextProp(ctx, 'encryptedEmailAddress', data.encryptionKeyUrl, participant), _decryptTextProp(ctx, 'encryptedName', data.encryptionKeyUrl, participant)]);
    }) : [];

    // Decrypt encryptedScheduleFor properties if meeting object contains SOB
    var decryptedScheduleFor = _promise.default.all((0, _values.default)(data.encryptedScheduleFor || {}).flatMap(function (item) {
      return [_decryptTextProp(ctx, 'encryptedEmail', data.encryptionKeyUrl, item), _decryptTextProp(ctx, 'encryptedDisplayName', data.encryptionKeyUrl, item)];
    }));

    // Decrypt meetingJoinInfo properties if meeting object contains meetingJoinInfo
    var decryptedMeetingJoinInfo = data.meetingJoinInfo ? _promise.default.all([_decryptTextProp(ctx, 'meetingJoinURI', data.encryptionKeyUrl, data.meetingJoinInfo), _decryptTextProp(ctx, 'meetingJoinURL', data.encryptionKeyUrl, data.meetingJoinInfo)]) : [];
    var decryptedOrganizer = data.encryptedOrganizer ? _promise.default.all([_decryptTextProp(ctx, 'encryptedEmailAddress', data.encryptionKeyUrl, data.encryptedOrganizer), _decryptTextProp(ctx, 'encryptedName', data.encryptionKeyUrl, data.encryptedOrganizer)]) : [];
    return _promise.default.all([_decryptTextProp(ctx, 'encryptedSubject', data.encryptionKeyUrl, data), _decryptTextProp(ctx, 'encryptedLocation', data.encryptionKeyUrl, data), _decryptTextProp(ctx, 'encryptedNotes', data.encryptionKeyUrl, data), _decryptTextProp(ctx, 'webexURI', data.encryptionKeyUrl, data), _decryptTextProp(ctx, 'webexURL', data.encryptionKeyUrl, data), _decryptTextProp(ctx, 'spaceMeetURL', data.encryptionKeyUrl, data), _decryptTextProp(ctx, 'spaceURI', data.encryptionKeyUrl, data), _decryptTextProp(ctx, 'spaceURL', data.encryptionKeyUrl, data)].concat(decryptedOrganizer, decryptedParticipants, decryptedScheduleFor, decryptedMeetingJoinInfo));
  },
  /**
   * Decrypt free-busy response
   * @param {object} [ctx] context
   * @param {object} [data] free-busy response
   * @returns {Promise} Resolves with decrypted response
   * */
  decryptFreeBusyResponse: function decryptFreeBusyResponse(ctx, data) {
    if (!data) {
      return _promise.default.resolve();
    }
    if (!data.calendarFreeBusyScheduleResponse) {
      return _promise.default.resolve();
    }
    if (!data.calendarFreeBusyScheduleResponse.encryptionKeyUrl) {
      return _promise.default.resolve();
    }
    var calendarFreeBusyItems = data.calendarFreeBusyScheduleResponse.calendarFreeBusyItems ? data.calendarFreeBusyScheduleResponse.calendarFreeBusyItems.map(function (calendarFreeBusyItem) {
      return _promise.default.all([_decryptTextProp(ctx, 'email', data.calendarFreeBusyScheduleResponse.encryptionKeyUrl, calendarFreeBusyItem)]);
    }) : [];
    return _promise.default.all([].concat(calendarFreeBusyItems));
  }
};
var _default = DecryptHelper;
exports.default = _default;
//# sourceMappingURL=calendar.decrypt.helper.js.map
