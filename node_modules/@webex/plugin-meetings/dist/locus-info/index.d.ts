import EventsScope from '../common/events/events-scope';
/**
 * @description LocusInfo extends ChildEmitter to convert locusInfo info a private emitter to parent object
 * @export
 * @private
 * @class LocusInfo
 */
export default class LocusInfo extends EventsScope {
    compareAndUpdateFlags: any;
    emitChange: any;
    locusParser: any;
    meetingId: any;
    parsedLocus: any;
    updateMeeting: any;
    webex: any;
    aclUrl: any;
    baseSequence: any;
    created: any;
    deltaParticipants: any;
    identities: any;
    membership: any;
    participants: any;
    participantsUrl: any;
    replaces: any;
    scheduledMeeting: any;
    sequence: any;
    controls: any;
    conversationUrl: any;
    embeddedApps: any;
    fullState: any;
    host: any;
    info: any;
    mediaShares: any;
    replace: any;
    url: any;
    services: any;
    constructor(updateMeeting: any, webex: any, meetingId: any);
    /**
     * Apply locus delta data to meeting
     * @param {string} action Locus delta action
     * @param {Locus} locus
     * @param {Meeting} meeting
     * @returns {undefined}
     */
    applyLocusDeltaData(action: string, locus: any, meeting: any): void;
    /**
     * Adds locus delta to parser's queue
     * and registers a function handler
     * to recieve parsed actions from queue.
     * @param {Locus} locus
     * @param {Meeting} meeting
     * @returns {undefined}
     */
    handleLocusDelta(locus: any, meeting: any): void;
    /**
     * @param {Locus} locus
     * @returns {undefined}
     * @memberof LocusInfo
     */
    init(locus?: any): void;
    /**
     * @param {Object} locus
     * @returns {undefined}
     * @memberof LocusInfo
     */
    initialSetup(locus: object): void;
    /**
     * @param {Meeting} meeting
     * @param {Object} data
     * @returns {undefined}
     * @memberof LocusInfo
     */
    parse(meeting: any, data: any): void;
    /**
     * @param {String} scope
     * @param {String} eventName
     * @param {Array} args
     * @returns {undefined}
     * @memberof LocusInfo
     */
    emitScoped(scope?: any, eventName?: string, args?: any): boolean;
    /**
     * updates the locus with full locus object
     * @param {object} locus locus object
     * @param {string} eventType particulat locus event
     * @returns {object} null
     * @memberof LocusInfo
     */
    onFullLocus(locus: any, eventType?: string): void;
    /**
     * @param {String} eventType
     * @returns {undefined}
     * @memberof LocusInfo
     */
    handleOneOnOneEvent(eventType: string): void;
    /**
     * @param {Object} locus
     * @returns {undefined}
     * @memberof LocusInfo
     */
    onDeltaLocus(locus: any): void;
    /**
     * @param {Object} locus
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateLocusInfo(locus: any): void;
    /**
     * @param {Array} participants
     * @param {Object} self
     * @returns {Array}
     * @memberof LocusInfo
     */
    getLocusPartner(participants: Array<any>, self: any): any;
    /**
     * @returns {undefined}
     * @memberof LocusInfo
     */
    isMeetingActive(): void;
    /**
     * checks if the host permissions have changed while in the meeting
     * This would be the case if your role as host or moderator has been updated
     * @returns {undefined}
     * @memberof LocusInfo
     */
    compareAndUpdate(): void;
    /**
     * compared the self object to check if the user has host permissions
     * @returns {undefined}
     * @memberof LocusInfo
     */
    compareSelfAndHost(): void;
    /**
     * Update the deltaParticipants property of this object based on a list of
     * provided participants.
     *
     * @param {Array} [participants] - The participants to update against.
     * @returns {void}
     */
    updateParticipantDeltas(participants?: Array<any>): void;
    /**
     *
     * @param {Object} participants new participants object
     * @param {boolen} deltaParticpantFlag  delta event
     * @returns {Array} updatedParticipants
     * @memberof LocusInfo
     */
    updateParticipants(participants: object): void;
    /**
     * @param {Object} controls
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateControls(controls: object): void;
    /**
     * @param {String} conversationUrl
     * @param {Object} info
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateConversationUrl(conversationUrl: string, info: any): void;
    /**
     * @param {Object} created
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateCreated(created: object): void;
    /**
     * @param {Object} services
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateServices(services: Record<'breakout' | 'record', {
        url: string;
    }>): void;
    /**
     * @param {Object} fullState
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateFullState(fullState: object): void;
    /**
     * handles when the locus.host is updated
     * @param {Object} host the locus.host property
     * @returns {undefined}
     * @memberof LocusInfo
     * emits internal event locus_info_update_host
     */
    updateHostInfo(host: object): void;
    /**
     * @param {Object} info
     * @param {Object} self
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateMeetingInfo(info: object, self?: object): void;
    /**
     * @param {Object} embeddedApps
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateEmbeddedApps(embeddedApps: object): void;
    /**
     * handles when the locus.mediaShares is updated
     * @param {Object} mediaShares the locus.mediaShares property
     * @returns {undefined}
     * @memberof LocusInfo
     * emits internal event locus_info_update_media_shares
     */
    updateMediaShares(mediaShares: object): void;
    /**
     * @param {String} participantsUrl
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateParticipantsUrl(participantsUrl: string): void;
    /**
     * @param {Object} replace
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateReplace(replace: object): void;
    /**
     * handles when the locus.self is updated
     * @param {Object} self the locus.mediaShares property
     * @param {Array} participants the locus.participants property
     * @returns {undefined}
     * @memberof LocusInfo
     * emits internal events self_admitted_guest, self_unadmitted_guest, locus_info_update_self
     */
    updateSelf(self: any, participants: Array<any>): void;
    /**
     * handles when the locus.url is updated
     * @param {String} url
     * @returns {undefined}
     * emits internal event locus_info_update_url
     */
    updateLocusUrl(url: string): void;
    /**
     * @param {String} aclUrl
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateAclUrl(aclUrl: string): void;
    /**
     * @param {Number} baseSequence
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateBasequence(baseSequence: number): void;
    /**
     * @param {Number} sequence
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateSequence(sequence: number): void;
    /**
     * @param {Object} membership
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateMemberShip(membership: object): void;
    /**
     * @param {Array} identities
     * @returns {undefined}
     * @memberof LocusInfo
     */
    updateIdentifiers(identities: Array<any>): void;
}
