{"version":3,"names":["HostUtils","parse","host","hostId","getId","getHosts","oldHost","newHost","previous","current","updates","isNewHost","isDifferentHosts","previousId","currentId","id","_default","exports","default"],"sources":["hostUtils.ts"],"sourcesContent":["const HostUtils: any = {};\n\n/**\n * parse the relevant host values that we care about: id\n * @param {Object} host\n * @returns {Object} parsed host or null if host was undefined\n */\nHostUtils.parse = (host: object) => {\n  if (host) {\n    return {\n      hostId: HostUtils.getId(host),\n    };\n  }\n\n  return null;\n};\n\n/**\n * get the previous and current host values parsed, as well as the boolean updates\n * @param {Object} oldHost\n * @param {Object} newHost\n * @returns {Object}\n * previous: {Object} old host, current: {Object} new host, updates: {isNewHost: {boolean}} boolean update values\n */\nHostUtils.getHosts = (oldHost: object, newHost: object) => {\n  const previous = oldHost && HostUtils.parse(oldHost);\n  const current = newHost && HostUtils.parse(newHost);\n\n  return {\n    previous,\n    current,\n    updates: {\n      isNewHost:\n        previous && current ? HostUtils.isDifferentHosts(previous.hostId, current.hostId) : true,\n    },\n  };\n};\n\n/**\n * determine by id if 2 hosts are different\n * @param {String} previousId\n * @param {String} currentId\n * @returns {Boolean}\n */\nHostUtils.isDifferentHosts = (previousId: string, currentId: string) => previousId !== currentId;\n\n/**\n * Extract the id from the host object\n * @param {Object} host\n * @returns {String}\n */\nHostUtils.getId = (host: any) => {\n  if (!host) {\n    return null;\n  }\n\n  return host.id;\n};\n\nexport default HostUtils;\n"],"mappings":";;;;;;;AAAA,IAAMA,SAAc,GAAG,CAAC,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACAA,SAAS,CAACC,KAAK,GAAG,UAACC,IAAY,EAAK;EAClC,IAAIA,IAAI,EAAE;IACR,OAAO;MACLC,MAAM,EAAEH,SAAS,CAACI,KAAK,CAACF,IAAI;IAC9B,CAAC;EACH;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,SAAS,CAACK,QAAQ,GAAG,UAACC,OAAe,EAAEC,OAAe,EAAK;EACzD,IAAMC,QAAQ,GAAGF,OAAO,IAAIN,SAAS,CAACC,KAAK,CAACK,OAAO,CAAC;EACpD,IAAMG,OAAO,GAAGF,OAAO,IAAIP,SAAS,CAACC,KAAK,CAACM,OAAO,CAAC;EAEnD,OAAO;IACLC,QAAQ,EAARA,QAAQ;IACRC,OAAO,EAAPA,OAAO;IACPC,OAAO,EAAE;MACPC,SAAS,EACPH,QAAQ,IAAIC,OAAO,GAAGT,SAAS,CAACY,gBAAgB,CAACJ,QAAQ,CAACL,MAAM,EAAEM,OAAO,CAACN,MAAM,CAAC,GAAG;IACxF;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAH,SAAS,CAACY,gBAAgB,GAAG,UAACC,UAAkB,EAAEC,SAAiB;EAAA,OAAKD,UAAU,KAAKC,SAAS;AAAA;;AAEhG;AACA;AACA;AACA;AACA;AACAd,SAAS,CAACI,KAAK,GAAG,UAACF,IAAS,EAAK;EAC/B,IAAI,CAACA,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EAEA,OAAOA,IAAI,CAACa,EAAE;AAChB,CAAC;AAAC,IAAAC,QAAA,GAEahB,SAAS;AAAAiB,OAAA,CAAAC,OAAA,GAAAF,QAAA"}