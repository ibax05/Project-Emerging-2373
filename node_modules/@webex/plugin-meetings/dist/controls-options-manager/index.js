"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _camelCase3 = _interopRequireDefault(require("lodash/camelCase"));
var _permission = _interopRequireDefault(require("../common/errors/permission"));
var _constants = require("../constants");
var _loggerProxy = _interopRequireDefault(require("../common/logs/logger-proxy"));
var _enums = _interopRequireDefault(require("./enums"));
var _util = _interopRequireDefault(require("./util"));
var _constants2 = require("./constants");
/**
 * docs
 * https://sqbu-github.cisco.com/pages/WebExSquared/locus/guides/mute.html
 * https://confluence-eng-gpk2.cisco.com/conf/display/LOCUS/Hard+Mute+and+Audio+Privacy#HardMuteandAudioPrivacy-SelfMuteonEntry
 * https://confluence-eng-gpk2.cisco.com/conf/pages/viewpage.action?spaceKey=UC&title=WEBEX-124454%3A+UCF%3A+Hard+mute+support+for+Teams+joining+Webex+meeting
 * https://jira-eng-gpk2.cisco.com/jira/browse/SPARK-180867
 * https://jira-eng-gpk2.cisco.com/jira/browse/SPARK-393351
 */
/**
 * @description ControlsOptionsManager is responsible for handling the behavior of participant controls when somebody joins a meeting
 * @export
 * @private
 * @class Recording
 */
var ControlsOptionsManager = /*#__PURE__*/function () {
  /**
   * @instance
   * @type {MeetingRequest}
   * @private
   * @memberof ControlsOptionsManager
   */

  /**
   * @instance
   * @type {Array}
   * @private
   * @memberof ControlsOptionsManager
   */

  /**
   * @instance
   * @type {string}
   * @private
   * @memberof ControlsOptionsManager
   */

  /**
   * @param {MeetingRequest} request
   * @param {Object} options
   * @constructor
   * @memberof ControlsOptionsManager
   */
  function ControlsOptionsManager(request, options) {
    (0, _classCallCheck2.default)(this, ControlsOptionsManager);
    (0, _defineProperty2.default)(this, "request", void 0);
    (0, _defineProperty2.default)(this, "displayHints", []);
    (0, _defineProperty2.default)(this, "locusUrl", void 0);
    this.initialize(request);
    this.set(options);
  }

  /**
   * @param {MeetingRequest} request
   * @returns {void}
   * @private
   * @memberof ControlsOptionsManager
   */
  (0, _createClass2.default)(ControlsOptionsManager, [{
    key: "initialize",
    value: function initialize(request) {
      this.request = request;
    }

    /**
     * @param {Object} options
     * @returns {void}
     * @public
     * @memberof ControlsOptionsManager
     */
  }, {
    key: "set",
    value: function set(options) {
      this.extract(options);
    }

    /**
     * @param {string} url
     * @returns {void}
     * @public
     * @memberof ControlsOptionsManager
     */
  }, {
    key: "setLocusUrl",
    value: function setLocusUrl(url) {
      this.locusUrl = url;
    }

    /**
     * @param {Array} hints
     * @returns {void}
     * @public
     * @memberof ControlsOptionsManager
     */
  }, {
    key: "setDisplayHints",
    value: function setDisplayHints(hints) {
      this.displayHints = hints;
    }

    /**
     * @returns {string}
     * @public
     * @memberof ControlsOptionsManager
     */
  }, {
    key: "getLocusUrl",
    value: function getLocusUrl() {
      return this.locusUrl;
    }

    /**
     * @returns {Array}
     * @public
     * @memberof ControlsOptionsManager
     */
  }, {
    key: "getDisplayHints",
    value: function getDisplayHints() {
      return this.displayHints;
    }

    /**
     * @param {Object} options
     * @returns {void}
     * @private
     * @memberof ControlsOptionsManager
     */
  }, {
    key: "extract",
    value: function extract(options) {
      this.setDisplayHints(options === null || options === void 0 ? void 0 : options.displayHints);
      this.setLocusUrl(options === null || options === void 0 ? void 0 : options.locusUrl);
    }

    /**
     * @param {Setting} setting
     * @param {boolean} enabled
     * @private
     * @memberof ControlsOptionsManager
     * @returns {Promise}
     */
  }, {
    key: "setControls",
    value: function setControls(setting, enabled) {
      _loggerProxy.default.logger.log("ControlsOptionsManager:index#setControls --> ".concat(setting, " [").concat(enabled, "]"));
      if (_util.default !== null && _util.default !== void 0 && _util.default["".concat(enabled ? _constants2.CAN_SET : _constants2.CAN_UNSET).concat(setting)](this.displayHints)) {
        // @ts-ignore
        return this.request.request({
          uri: "".concat(this.locusUrl, "/").concat(_constants.CONTROLS),
          body: (0, _defineProperty2.default)({}, (0, _camelCase3.default)(setting), (0, _defineProperty2.default)({}, _constants2.ENABLED, enabled)),
          method: _constants.HTTP_VERBS.PATCH
        });
      }
      return _promise.default.reject(new _permission.default("".concat(setting, " [").concat(enabled, "] not allowed, due to moderator property.")));
    }

    /**
     * @public
     * @param {boolean} enabled
     * @memberof ControlsOptionsManager
     * @returns {Promise}
     */
  }, {
    key: "setMuteOnEntry",
    value: function setMuteOnEntry(enabled) {
      return this.setControls(_enums.default.muteOnEntry, enabled);
    }

    /**
     * @public
     * @param {boolean} enabled
     * @memberof ControlsOptionsManager
     * @returns {Promise}
     */
  }, {
    key: "setDisallowUnmute",
    value: function setDisallowUnmute(enabled) {
      return this.setControls(_enums.default.disallowUnmute, enabled);
    }
  }]);
  return ControlsOptionsManager;
}();
exports.default = ControlsOptionsManager;
//# sourceMappingURL=index.js.map
