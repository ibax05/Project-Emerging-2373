declare const createEffectsState: (type: any) => EffectsState;
declare class EffectsState {
    effectType: any;
    pendingPromiseReject: any;
    pendingPromiseResolve: any;
    state: any;
    constructor(type: any);
    /**
     * @memberof EffectsState
     * @param {Boolean} [isEnable] true for enableBNR, false for disableBNR request
     * @param {Object} [meeting] the meeting object
     * @returns {Promise}
     */
    handleClientRequest(isEnable?: boolean, meeting?: object): Promise<unknown>;
    /**
     * Internal API to return status of BNR
     * @memberof EffectsState
     * @returns {Boolean}
     * @public
     * @memberof Meeting
     */
    isBnrEnabled(): boolean;
    resolvePromise(): void;
    rejectPromise(e: any): void;
    /**
     * enableBNR API
     * @param {Object} meeting the meeting object
     * @returns {Promise<Boolean>}
     * @public
     * @memberof EffectsState
     */
    enableBNR(meeting: any): Promise<void>;
    /**
     * disableBNR API
     * @param {Object} meeting the meeting object
     * @returns {Promise<Boolean>}
     * @public
     * @memberof EffectsState
     */
    disableBNR(meeting: any): Promise<void>;
}
export default createEffectsState;
