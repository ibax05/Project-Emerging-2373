{"version":3,"names":["_javascriptStateMachine","_interopRequireDefault","require","_history","_loggerProxy","_triggerProxy","_constants","_parameter","MeetingStateMachine","create","meetingRef","ParameterError","StateMachine","init","MEETING_STATE_MACHINE","STATES","IDLE","transitions","name","TRANSITIONS","RING","from","ERROR","JOINED","to","RINGING","JOIN","REMOTE","remote","remoteAnswered","ANSWERED","remoteDeclined","DECLINED","LEAVE","ENDED","END","DECLINE","FAIL","RESET","data","meeting","methods","onRemote","transition","stop","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_RINGING_STOP","id","type","onRing","MEETING_RINGING","onEnterError","error","LoggerProxy","logger","concat","history","onAfterTransition","log","plugins","StateMachineHistory","max","_default","exports","default"],"sources":["state.ts"],"sourcesContent":["import StateMachine from 'javascript-state-machine';\nimport StateMachineHistory from 'javascript-state-machine/lib/history';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {MEETING_STATE_MACHINE, EVENT_TRIGGERS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\n// TODO: ensure that meeting can be destroyed when in an error state\nconst MeetingStateMachine = {\n  /**\n   * Initializes the StateMachine for the meeting\n   * @param {Meeting} meetingRef A reference to a meeting instance\n   * @returns {StateMachine}\n   */\n  create(meetingRef: any) {\n    if (!meetingRef) {\n      throw new ParameterError(\n        'You must initialize the meeting state machine with a meeting reference.'\n      );\n    }\n\n    return new StateMachine({\n      init: MEETING_STATE_MACHINE.STATES.IDLE,\n      transitions: [\n        // when ringing a meeting, it must be first IDLE, because all other states are invalid, it transitions to the RINGING state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.RING,\n          from: [\n            MEETING_STATE_MACHINE.STATES.IDLE,\n            MEETING_STATE_MACHINE.STATES.ERROR,\n            MEETING_STATE_MACHINE.STATES.JOINED,\n          ],\n          to: MEETING_STATE_MACHINE.STATES.RINGING,\n        },\n        // when joining a meeting, it must be from the RINGING or IDLE state, transitions to JOINED state, 1:1 will go to RINGING,\n        // others will go straight to JOINED with this transition\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.JOIN,\n          from: [\n            MEETING_STATE_MACHINE.STATES.JOINED,\n            MEETING_STATE_MACHINE.STATES.IDLE,\n            MEETING_STATE_MACHINE.STATES.RINGING,\n            MEETING_STATE_MACHINE.STATES.ERROR,\n          ],\n          to: MEETING_STATE_MACHINE.STATES.JOINED,\n        },\n        // signify that ringing has stopped and somebody else answered, move state to DECLINED, ANSWERED\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.REMOTE,\n          from: [MEETING_STATE_MACHINE.STATES.JOINED, MEETING_STATE_MACHINE.STATES.ERROR],\n          /**\n           * @param {Object} remote\n           * @param {Boolean} remote.remoteAnswered\n           * @param {Boolean} remote.remoteDeclined\n           * @returns {String}\n           */\n          to(remote: {remoteAnswered: boolean; remoteDeclined: boolean}) {\n            // other user answered the call\n            if (remote.remoteAnswered) {\n              return MEETING_STATE_MACHINE.STATES.ANSWERED;\n            }\n            // other user declined the call\n            if (remote.remoteDeclined) {\n              return MEETING_STATE_MACHINE.STATES.DECLINED;\n            }\n\n            // default\n            return MEETING_STATE_MACHINE.STATES.ERROR;\n          },\n        },\n        // when leaving a meeting it must be from either the RINGING, JOINED, or ERROR states, and transitions it to the ENDED state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.LEAVE,\n          from: [\n            MEETING_STATE_MACHINE.STATES.IDLE,\n            MEETING_STATE_MACHINE.STATES.RINGING,\n            MEETING_STATE_MACHINE.STATES.JOINED,\n            MEETING_STATE_MACHINE.STATES.ANSWERED,\n            MEETING_STATE_MACHINE.STATES.DECLINED,\n            MEETING_STATE_MACHINE.STATES.ERROR,\n          ],\n          to: MEETING_STATE_MACHINE.STATES.ENDED,\n        },\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.END,\n          from: [\n            MEETING_STATE_MACHINE.STATES.IDLE,\n            MEETING_STATE_MACHINE.STATES.RINGING,\n            MEETING_STATE_MACHINE.STATES.JOINED,\n            MEETING_STATE_MACHINE.STATES.ANSWERED,\n            MEETING_STATE_MACHINE.STATES.DECLINED,\n            MEETING_STATE_MACHINE.STATES.ERROR,\n          ],\n          to: MEETING_STATE_MACHINE.STATES.ENDED,\n        },\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.DECLINE,\n          from: [MEETING_STATE_MACHINE.STATES.RINGING, MEETING_STATE_MACHINE.STATES.ERROR],\n          to: MEETING_STATE_MACHINE.STATES.ENDED,\n        },\n        // transition from ANY state to ERROR state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.FAIL,\n          from: '*',\n          to: MEETING_STATE_MACHINE.STATES.ERROR,\n        },\n        // fail safe, transition from ANY state to IDLE state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.RESET,\n          from: '*',\n          to: MEETING_STATE_MACHINE.STATES.IDLE,\n        },\n      ],\n      data: {\n        /**\n         * The meeting instance to execute all state changes on\n         */\n        meeting: meetingRef,\n      },\n      methods: {\n        /**\n         * Ring stop transition, to end the ring event for the meeting, and transition the state to ANSWERED OR DECLINED, only for outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {Object} stop -- {remoteAnswered: {Boolean}, remoteDeclined: {Boolean}}\n         * @returns {Boolean}\n         */\n        onRemote(transition: object, stop: object) {\n          if (this.meeting) {\n            Trigger.trigger(\n              this.meeting,\n              {\n                file: 'meeting/state',\n                function: 'onRemote',\n              },\n              EVENT_TRIGGERS.MEETING_RINGING_STOP,\n              {\n                id: this.meeting.id,\n                type: stop,\n              }\n            );\n          }\n        },\n        /**\n         * Ring transition, to cause the ring event for the meeting, and transition the state to RINGING, for both incoming, and outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {String} type -- incoming call === INCOMING / or other meetings have a ring type of JOIN\n         * @returns {Boolean}\n         */\n        onRing(transition: object, type: string) {\n          if (this.meeting) {\n            Trigger.trigger(\n              this.meeting,\n              {\n                file: 'meeting/state',\n                function: 'onRing',\n              },\n              EVENT_TRIGGERS.MEETING_RINGING,\n              {\n                type,\n                id: this.meeting.id,\n              }\n            );\n          }\n        },\n        /**\n         * handle the entry to error state\n         * @param {Object} transition\n         * @param {Error} error\n         * @returns {Boolean}\n         */\n        onEnterError(transition: any, error: Error) {\n          LoggerProxy.logger.error(\n            `Meeting:state#onEnterError --> state->onEnterError#meeting.id: ${this.meeting.id} | Transition '${transition?.transition}' : ${transition?.from} -> ${transition?.to}, with error ${error}. Last states: ${this.history}`\n          );\n        },\n        /**\n         * After ANY transition occurs, we want to know what state the meeting moved to for debugging\n         * @param {Object} transition\n         * @returns {Boolean}\n         */\n        onAfterTransition(transition: any) {\n          LoggerProxy.logger.log(\n            `Meeting:state#onAfterTransition --> state->onAfterTransition#meeting.id: ${this.meeting.id} | Transition '${transition.transition}' : ${transition.from} -> ${transition.to} executed. Last states: ${this.history}`\n          );\n        },\n      },\n      // track the last 25 states entered\n      plugins: [new StateMachineHistory({max: 25})],\n    });\n  },\n};\n\nexport default MeetingStateMachine;\n"],"mappings":"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"}