import { StatelessWebexPlugin } from '@webex/webex-core';
import { Reaction } from '../reactions/reactions.type';
/**
 * @class MeetingRequest
 */
export default class MeetingRequest extends StatelessWebexPlugin {
    changeVideoLayoutDebounced: any;
    constructor(attrs: any, options: any);
    /**
     * Make a network request to join a meeting
     * @param {Object} options
     * @param {String} options.sipUri
     * @param {String} options.deviceUrl
     * @param {String} options.locusUrl
     * @param {String} options.resourceId,
     * @param {String} options.correlationId
     * @param {boolean} options.ensureConversation
     * @param {boolean} options.moderator
     * @param {boolean} options.pin
     * @param {boolean} options.moveToResource
     * @param {Object} options.roapMessage
     * @returns {Promise}
     */
    joinMeeting(options: {
        sipUri: string;
        deviceUrl: string;
        locusUrl: string;
        resourceId: string;
        correlationId: string;
        ensureConversation: boolean;
        moderator: boolean;
        pin: boolean;
        moveToResource: boolean;
        roapMessage: any;
        asResourceOccupant: any;
        inviteeAddress: any;
        meetingNumber: any;
        permissionToken: any;
        preferTranscoding: any;
    }): Promise<any>;
    /**
     * Send a request to refresh the captcha
     * @param {Object} options
     * @param {String} options.captchaRefreshUrl
     * @param {String} options.captchaId
     * @returns {Promise}
     * @private
     */
    private refreshCaptcha;
    /**
     * Make a network request to add a dial in device
     * @param {Object} options
     * @param {String} options.correlationId
     * @param {String} options.locusUrl url for the meeting
     * @param {String} options.dialInUrl identifier for the to-be provisioned device
     * @param {String} options.clientUrl identifier for the web device
     * @returns {Promise}
     * @private
     */
    private dialIn;
    /**
     * Make a network request to add a dial out device
     * @param {Object} options
     * @param {String} options.correlationId
     * @param {String} options.locusUrl url for the meeting
     * @param {String} options.dialOutUrl identifier for the to-be provisioned device
     * @param {String} options.phoneNumber phone number to dial out to
     * @param {String} options.clientUrl identifier for the web device
     * @returns {Promise}
     * @private
     */
    private dialOut;
    /**
     * Syns the missed delta event
     * @param {Object} options
     * @param {boolean} options.desync flag to get partial or whole locus object
     * @param {String} options.syncUrl sync url to get ht elatest locus delta
     * @returns {Promise}
     */
    syncMeeting(options: {
        desync: boolean;
        syncUrl: string;
    }): any;
    /**
     * Request to get the complete locus object
     * @param {Object} options
     * @param {boolean} options.desync flag to get partial or whole locus object
     * @param {String} options.locusUrl sync url to get ht elatest locus delta
     * @returns {Promise}
     */
    getFullLocus(options: {
        desync: boolean;
        locusUrl: string;
    }): any;
    /**
     * Make a network request to make a provisioned phone leave the meeting
     * @param {Object} options
     * @param {String} options.locusUrl
     * @param {String} options.phoneUrl
     * @param {String} options.correlationId
     * @param {String} options.selfId
     * @returns {Promise}
     * @private
     */
    private disconnectPhoneAudio;
    /**
     * Make a network request to leave a meeting
     * @param {Object} options
     * @param {Url} options.locusUrl
     * @param {String} options.selfId
     * @param {Url} options.deviceUrl
     * @param {String} options.resourceId,
     * @param {String} options.correlationId
     * @returns {Promise}
     */
    leaveMeeting({ locusUrl, selfId, deviceUrl: url, resourceId, correlationId, }: {
        locusUrl: string;
        selfId: string;
        deviceUrl: string;
        resourceId: string;
        correlationId: string;
    }): any;
    /**
     * Make a network request to acknowledge a meeting
     * @param {Object} options
     * @param {String} options.locusUrl
     * @param {String} options.deviceUrl
     * @param {String} options.correlationId
     * @returns {Promise}
     */
    acknowledgeMeeting(options: {
        locusUrl: string;
        deviceUrl: string;
        correlationId: string;
    }): any;
    lockMeeting(options: any): any;
    /**
     * Make a network request to decline a meeting
     * @param {Object} options
     * @param {String} options.locusUrl
     * @param {String} options.deviceUrl
     * @param {String} options.reason
     * @returns {Promise}
     */
    declineMeeting(options: {
        locusUrl: string;
        deviceUrl: string;
        reason: string;
    }): any;
    /**
     * Toggle remote audio and/or video
     * @param {Object} options options for toggling
     * @param {String} options.selfId Locus self id??
     * @param {String} options.locusUrl Locus url
     * @param {String} options.deviceUrl Url of a device
     * @param {String} options.resourceId Populated if you are paired to a device
     * @param {String} options.localMedias local sdps
     * @returns {Promise}
     */
    remoteAudioVideoToggle(options: {
        selfId: string;
        locusUrl: string;
        deviceUrl: string;
        resourceId: string;
        localMedias: string;
    } | any): any;
    /**
     * change the content floor grant
     * @param {Object} options options for floor grant
     * @param {String} options.disposition floor action (granted/released)
     * @param {String} options.personUrl personUrl who is requesting floor
     * @param {String} options.deviceUrl Url of a device
     * @param {String} options.resourceId Populated if you are paired to a device
     * @param {String} options.uri floor grant uri
     * @returns {Promise}
     */
    changeMeetingFloor(options: {
        disposition: string;
        personUrl: string;
        deviceUrl: string;
        resourceId: string;
        uri: string;
    } | any): any;
    /**
     * Sends a request to the DTMF endpoint to send tones
     * @param {Object} options
     * @param {String} options.locusUrl
     * @param {String} options.deviceUrl
     * @param {String} options.tones a string of one or more DTMF tones to send
     * @returns {Promise}
     */
    sendDTMF({ locusUrl, deviceUrl, tones }: {
        locusUrl: string;
        deviceUrl: string;
        tones: string;
    }): any;
    /**
     * Sends a request to the controls endpoint to set the video layout
     * @param {Object} options
     * @param {String} options.locusUrl
     * @param {String} options.deviceUrl
     * @param {String} options.layoutType a layout type that should be available in meeting constants {@link #layout_types}
     * @param {Object} options.main preferred dimensions for the remote main video stream
     * @param {Number} options.main.width preferred width of main video stream
     * @param {Number} options.main.height preferred height of main video stream
     * @param {Object} options.content preferred dimensions for the remote content share stream
     * @param {Number} options.content.width preferred width of content share stream
     * @param {Number} options.content.height preferred height of content share stream
     * @returns {Promise}
     */
    changeVideoLayout({ locusUrl, deviceUrl, layoutType, main, content, }: {
        locusUrl: string;
        deviceUrl: string;
        layoutType: string;
        main: {
            width: number;
            height: number;
        };
        content: {
            width: number;
            height: number;
        };
    }): any;
    /**
     * Make a network request to end meeting for all
     * @param {Object} options
     * @param {Url} options.locusUrl
     * @returns {Promise}
     */
    endMeetingForAll({ locusUrl }: {
        locusUrl: string;
    }): any;
    /**
     * Send a locus keepAlive (used in lobby)
     * @param {Object} options
     * @param {Url} options.keepAliveUrl
     * @returns {Promise}
     */
    keepAlive({ keepAliveUrl }: {
        keepAliveUrl: string;
    }): any;
    /**
     * Make a network request to send a reaction.
     * @param {Object} options
     * @param {Url} options.reactionChannelUrl
     * @param {Reaction} options.reaction
     * @param {string} options.senderID
     * @returns {Promise}
     */
    sendReaction({ reactionChannelUrl, reaction, participantId, }: {
        reactionChannelUrl: string;
        reaction: Reaction;
        participantId: string;
    }): any;
}
