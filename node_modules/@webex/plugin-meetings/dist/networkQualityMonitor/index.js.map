{"version":3,"names":["_eventsScope","_interopRequireDefault","require","_constants","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","_Reflect$construct","arguments","apply","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","NetworkQualityMonitor","_EventsScope","_inherits2","_super","config","_this$frequencyTypes$","_this","_classCallCheck2","_defineProperty2","_assertThisInitialized2","indicatorTypes","_freeze","PACKETLOSS","LATENCY","JITTER","frequencyTypes","UPLINK","DOWNLINK","networkQualityScore","networkQualityStatus","STATS","VIDEO_CORRELATE","AUDIO_CORRELATE","SHARE_CORRELATE","mediaType","_createClass2","key","value","emitNetworkQuality","emit","file","function","EVENT_TRIGGERS","NETWORK_QUALITY","updateNetworkQualityStatus","determineUplinkNetworkQuality","_ref","_this2","remoteRtpResults","statsAnalyzerCurrentStats","roundTripTimeInMilliseconds","roundTripTime","jitterInMilliseconds","jitter","currentPacketLossRatio","send","_this$indicatorTypes","determinePacketLoss","videoPacketLossRatioThreshold","determineLatency","rttThreshold","deterMineJitter","jitterThreshold","determineIfUndefined","acceptable","get","EventsScope","exports"],"sources":["index.ts"],"sourcesContent":["import EventsScope from '../common/events/events-scope';\nimport {EVENT_TRIGGERS, STATS} from '../constants';\n\n/**\n * Meeting - network quality event\n * Emitted on each interval of retrieving stats Analyzer data\n * @event network:quality\n * @type {Object}\n * @property {string} mediaType {video|audio}\n * @property {number} networkQualityScore - value determined in determineUplinkNetworkQuality\n * @memberof NetworkQualityMonitor\n */\n/**\n * NetworkQualityMonitor class that will emit events based on detected quality\n *\n * @class NetworkQualityMonitor\n * @extends {EventsScope}\n */\nexport default class NetworkQualityMonitor extends EventsScope {\n  config: any;\n  frequencyTypes: any;\n  indicatorTypes: any;\n  mediaType: any;\n  networkQualityScore: any;\n  networkQualityStatus: any;\n\n  /**\n   * Creates a new instance of NetworkQualityMonitor\n   * @constructor\n   * @public\n   * @param {Object} config\n   * @property {Object} indicatorTypes - network properties used to evaluate network quality used as constants\n   * @property {Object} frequencyTypes - frequency properties used as constants {uplink|send} {downlink|receive}\n   * @property {number} networkQualityScore  - 0|1 1 is acceptable 0 is bad/unknown\n   * @property {Object} networkQualityStatus - hash object based on indicatorTypes and frequencyTypes\n   * @property {string} mediaType - audio|video\n   */\n  constructor(config: any) {\n    super();\n    this.config = config;\n    this.indicatorTypes = Object.freeze({\n      PACKETLOSS: 'packetLoss',\n      LATENCY: 'latency',\n      JITTER: 'jitter',\n    });\n    this.frequencyTypes = Object.freeze({\n      UPLINK: 'uplink',\n      DOWNLINK: 'downlink',\n    });\n    this.networkQualityScore = 1;\n    this.networkQualityStatus = {\n      [this.frequencyTypes.UPLINK]: {\n        [STATS.VIDEO_CORRELATE]: {},\n        [STATS.AUDIO_CORRELATE]: {},\n        [STATS.SHARE_CORRELATE]: {},\n      },\n    };\n    this.mediaType = null;\n  }\n\n  /**\n   * emits NETWORK_QUALITY event on meeting with payload of media type and uplinkNetworkQuality score\n   *\n   * @memberof NetworkQualityMonitor\n   * @returns {void}\n   */\n  emitNetworkQuality() {\n    this.emit(\n      {\n        file: 'networkQualityMonitor',\n        function: 'emitNetworkQuality',\n      },\n      EVENT_TRIGGERS.NETWORK_QUALITY,\n      {\n        mediaType: this.mediaType,\n        networkQualityScore: this.networkQualityScore,\n      }\n    );\n  }\n\n  /**\n   * invokes emitNetworkQuality method resets values back to default\n   * @returns {void}\n   * @memberof NetworkQualityMonitor\n   */\n  updateNetworkQualityStatus() {\n    this.emitNetworkQuality();\n\n    // reset values\n    this.networkQualityScore = 1;\n    this.mediaType = null;\n  }\n\n  /**\n   * filter data to determine uplink network quality, invoked on same interval as stats analyzer remote-inbout-rtp\n   * @param {Object} configObj\n   * @param {string} configObj.mediaType {audio|video}\n   * @param {RTCStats} configObj.remoteRtpResults RTC stats remote obj\n   * @param {Object} configObj.statsAnalyzerCurrentStats statsResults\n   * @returns {void}\n   * @public\n   * @memberof NetworkQualityMonitor\n   */\n  public determineUplinkNetworkQuality({\n    mediaType,\n    remoteRtpResults,\n    statsAnalyzerCurrentStats,\n  }: {\n    mediaType: string;\n    remoteRtpResults: any;\n    statsAnalyzerCurrentStats: object;\n  }) {\n    const roundTripTimeInMilliseconds = remoteRtpResults.roundTripTime * 1000;\n    const jitterInMilliseconds = remoteRtpResults.jitter * 1000;\n    const {currentPacketLossRatio} = statsAnalyzerCurrentStats[mediaType].send;\n\n    this.mediaType = mediaType;\n\n    const {JITTER, PACKETLOSS, LATENCY} = this.indicatorTypes;\n    const {UPLINK} = this.frequencyTypes;\n\n    /**\n     * determines if packetLoss ratio is over threshold set in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const determinePacketLoss = () => {\n      if (currentPacketLossRatio > this.config.videoPacketLossRatioThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * determines if round trip time value is over threshold set in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const determineLatency = () => {\n      if (roundTripTimeInMilliseconds > this.config.rttThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * determines if jitter value is over threshold in config\n     * sets networkQualityScore to 0 if over threshold\n     * @returns {boolean}\n     */\n    const deterMineJitter = () => {\n      if (jitterInMilliseconds > this.config.jitterThreshold) {\n        this.networkQualityScore = 0;\n\n        return false;\n      }\n\n      return true;\n    };\n\n    /**\n     * returns null if val is specifically undefined\n     * @param {(number|undefined)} value\n     * @returns {(number|null)}\n     */\n    const determineIfUndefined = (value: number | undefined) =>\n      typeof value === 'undefined' ? null : value;\n\n    /**\n     * Values for some browsers specifically Safari will be undefined we explicitly set to null\n     * https://bugs.webkit.org/show_bug.cgi?id=206645\n     * https://bugs.webkit.org/show_bug.cgi?id=212668\n     */\n    // PACKET LOSS\n    this.networkQualityStatus[UPLINK][mediaType][PACKETLOSS] = {\n      acceptable: determinePacketLoss(),\n      value: determineIfUndefined(currentPacketLossRatio),\n    };\n\n    // LATENCY measured in Round trip time\n    this.networkQualityStatus[UPLINK][mediaType][LATENCY] = {\n      acceptable: determineLatency(),\n      value: determineIfUndefined(remoteRtpResults.roundTripTime),\n    };\n\n    // JITTER\n    this.networkQualityStatus[UPLINK][mediaType][JITTER] = {\n      acceptable: deterMineJitter(),\n      value: determineIfUndefined(remoteRtpResults.jitter),\n    };\n\n    this.updateNetworkQualityStatus();\n  }\n\n  /**\n   * Get the current status of network quaility object - networkQualityStatus\n   * @returns {Object}\n   * @public\n   */\n  get networkQualityStats() {\n    const {UPLINK} = this.frequencyTypes;\n\n    return this.networkQualityStatus[UPLINK];\n  }\n}\n"],"mappings":"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"}