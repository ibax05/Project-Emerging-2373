import EventsScope from '../common/events/events-scope';
/**
 * Meeting - network quality event
 * Emitted on each interval of retrieving stats Analyzer data
 * @event network:quality
 * @type {Object}
 * @property {string} mediaType {video|audio}
 * @property {number} networkQualityScore - value determined in determineUplinkNetworkQuality
 * @memberof NetworkQualityMonitor
 */
/**
 * NetworkQualityMonitor class that will emit events based on detected quality
 *
 * @class NetworkQualityMonitor
 * @extends {EventsScope}
 */
export default class NetworkQualityMonitor extends EventsScope {
    config: any;
    frequencyTypes: any;
    indicatorTypes: any;
    mediaType: any;
    networkQualityScore: any;
    networkQualityStatus: any;
    /**
     * Creates a new instance of NetworkQualityMonitor
     * @constructor
     * @public
     * @param {Object} config
     * @property {Object} indicatorTypes - network properties used to evaluate network quality used as constants
     * @property {Object} frequencyTypes - frequency properties used as constants {uplink|send} {downlink|receive}
     * @property {number} networkQualityScore  - 0|1 1 is acceptable 0 is bad/unknown
     * @property {Object} networkQualityStatus - hash object based on indicatorTypes and frequencyTypes
     * @property {string} mediaType - audio|video
     */
    constructor(config: any);
    /**
     * emits NETWORK_QUALITY event on meeting with payload of media type and uplinkNetworkQuality score
     *
     * @memberof NetworkQualityMonitor
     * @returns {void}
     */
    emitNetworkQuality(): void;
    /**
     * invokes emitNetworkQuality method resets values back to default
     * @returns {void}
     * @memberof NetworkQualityMonitor
     */
    updateNetworkQualityStatus(): void;
    /**
     * filter data to determine uplink network quality, invoked on same interval as stats analyzer remote-inbout-rtp
     * @param {Object} configObj
     * @param {string} configObj.mediaType {audio|video}
     * @param {RTCStats} configObj.remoteRtpResults RTC stats remote obj
     * @param {Object} configObj.statsAnalyzerCurrentStats statsResults
     * @returns {void}
     * @public
     * @memberof NetworkQualityMonitor
     */
    determineUplinkNetworkQuality({ mediaType, remoteRtpResults, statsAnalyzerCurrentStats, }: {
        mediaType: string;
        remoteRtpResults: any;
        statsAnalyzerCurrentStats: object;
    }): void;
    /**
     * Get the current status of network quaility object - networkQualityStatus
     * @returns {Object}
     * @public
     */
    get networkQualityStats(): any;
}
