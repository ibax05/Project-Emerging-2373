{"version":3,"names":["_loggerProxy","_interopRequireDefault","require","_triggerProxy","_constants","_constants2","_reconnection","_reconnectionInProgress","_peerConnectionManager","_config","_media","_metrics","_collection","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","_Reflect$construct","arguments","apply","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","NeedsRetryError","_Error","_inherits2","_super","_classCallCheck2","_createClass2","_wrapNativeSuper2","Error","NeedsRejoinError","_Error2","_super2","_ref","_this","wasSharing","_ref$error","error","_defineProperty2","_assertThisInitialized2","ReconnectionManager","meeting","iceState","disconnected","resolve","timer","undefined","timeoutDuration","config","reconnection","iceReconnectionTimeout","status","RECONNECTION","STATE","DEFAULT_STATUS","tryCount","DEFAULT_TRY_COUNT","webex","maxRejoinAttempts","rejoinAttempts","autoRejoinEnabled","autoRejoin","reset","key","value","iceReconnected","LoggerProxy","logger","log","clearTimeout","waitForIceReconnect","_this2","_promise","reject","setTimeout","concat","cleanUp","validate","enabled","COMPLETE","info","ReconnectInProgress","ReconnectionError","_reconnect","_asyncToGenerator2","_regenerator","mark","_callee","_this3","_ref2","_ref2$networkDisconne","networkDisconnect","_ref2$networkRetry","networkRetry","_args","wrap","_callee$","_context","prev","next","length","id","t0","Metrics","postEvent","event","eventType","MEDIA_RECONNECTING","abrupt","executeReconnection","then","MEDIA_RECOVERED","data","recoveredBy","RECOVERED_BY_NEW","catch","reconnectError","reconnect","message","reconnectMetric","CALL_ABORTED","errors","category","errorObjects","expected","errorCode","fatal","name","mediaEngine","shownToUser","rejoinMeeting","stop","_executeReconnection","_callee2","_ref3","_ref3$networkDisconne","media","_callee2$","_context2","IN_PROGRESS","reconnectMercuryWebSocket","internal","device","url","FAILURE","shareStatus","SHARE_STATUS","LOCAL_SHARE_ACTIVE","meetings","syncMeetings","t1","getMeetingByType","_ID_","state","_LEFT_","type","_CALL_","reconnectMedia","sent","t2","_x","_rejoinMeeting","_callee3","previousCorrelationId","_args3","_callee3$","_context3","correlationId","join","rejoin","RoapCollection","deleteSession","Media","stopTracks","mediaProperties","shareTrack","isSharing","NO_SHARE","mediaDirection","sendShare","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_STOPPED_SHARING_LOCAL","reason","SHARE_STOPPED_REASON","MEETING_REJOIN","sendBehavioralMetric","BEHAVIORAL_METRICS","MEETING_MAX_REJOIN_FAILURE","locus_id","locusUrl","split","pop","stack","_this4","setupPeerConnection","attachMedia","meetingId","remoteQualityLevel","enableRtx","enableExtmap","peerConnection","setRemoteStream","roap","sendRoapMediaRequest","sdp","roapSeq","_reconnectMercuryWebSocket","_callee4","_callee4$","_context4","mercury","connected","disconnect","connect","_setupPeerConnection","_callee5","turnServerResult","_callee5$","_context5","PeerConnectionManager","close","unsetPeerConnection","doTurnDiscovery","reInitiatePeerconnection","turnServerInfo","setPeerConnectionEvents","statsAnalyzer","updatePeerconnection","_x2","exports"],"sources":["index.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-disable no-warning-comments */\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {\n  EVENT_TRIGGERS,\n  RECONNECTION,\n  SHARE_STATUS,\n  SHARE_STOPPED_REASON,\n  _CALL_,\n  _LEFT_,\n  _ID_,\n} from '../constants';\nimport BEHAVIORAL_METRICS from '../metrics/constants';\nimport ReconnectionError from '../common/errors/reconnection';\nimport ReconnectInProgress from '../common/errors/reconnection-in-progress';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport {eventType, reconnection, errorObjects} from '../metrics/config';\nimport Media from '../media';\nimport Metrics from '../metrics';\nimport RoapCollection from '../roap/collection';\nimport Meeting from '../meeting';\n\n/**\n * Used to indicate that the reconnect logic needs to be retried.\n *\n * @class NeedsRetryError\n * @extends {Error}\n */\nclass NeedsRetryError extends Error {}\n\n/**\n * Used to indicate that the meeting needs to be rejoined, not just media reconnected\n *\n * @class NeedsRejoinError\n * @extends {Error}\n */\nclass NeedsRejoinError extends Error {\n  wasSharing: any;\n\n  /**\n   * Creates an instance of NeedsRejoinError.\n   * @param {Object} params\n   * @param {boolean} params.wasSharing\n   * @param {Error} params.error\n   * @memberof NeedsRejoinError\n   */\n  constructor({\n    wasSharing,\n    error = new Error('Meeting needs to be rejoined'),\n  }: {\n    wasSharing?: boolean;\n    error?: Error;\n  }) {\n    // @ts-ignore\n    super(error);\n\n    this.wasSharing = wasSharing;\n  }\n}\n\n/**\n * @export\n * @class ReconnectionManager\n */\nexport default class ReconnectionManager {\n  autoRejoinEnabled: any;\n  iceState: any;\n  maxRejoinAttempts: any;\n  meeting: any;\n  rejoinAttempts: any;\n  shareStatus: any;\n  status: any;\n  tryCount: any;\n  webex: any;\n  /**\n   * @param {Meeting} meeting\n   */\n  constructor(meeting: Meeting) {\n    /**\n     * Stores ICE reconnection state data.\n     *\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    this.iceState = {\n      disconnected: false,\n      resolve: () => {},\n      timer: undefined,\n      // @ts-ignore\n      timeoutDuration: meeting.config.reconnection.iceReconnectionTimeout,\n    };\n\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    /**\n     * @instance\n     * @type {Number}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    // TODO : change this logic to not save the meeting instance\n    // It gets complicated when meeting ends on remote side , We have a old meeting instance which is not up to date\n    // @ts-ignore\n    this.webex = meeting.webex;\n    /**\n     * @instance\n     * @type {Meeting}\n     * @private\n     * @memberof ReconnectionManager\n     */\n    // TODO: try removing the circular dependency for meeting and reconnection manager\n    // try moving this to meetings collection\n    this.meeting = meeting;\n\n    // @ts-ignore\n    this.maxRejoinAttempts = meeting.config.reconnection.maxRejoinAttempts;\n    this.rejoinAttempts = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    // @ts-ignore\n    this.autoRejoinEnabled = meeting.config.reconnection.autoRejoin;\n\n    // Make sure reconnection state is in default\n    this.reset();\n  }\n\n  /**\n   * Sets the iceState to connected and clears any disconnect timeouts and\n   * related timeout data within the iceState.\n   *\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  public iceReconnected() {\n    if (this.iceState.disconnected) {\n      LoggerProxy.logger.log('ReconnectionManager:index#iceReconnected --> ice has reconnected');\n\n      this.iceState.resolve();\n      this.iceState.resolve = () => {};\n\n      if (this.iceState.timer) {\n        clearTimeout(this.iceState.timer);\n        delete this.iceState.timer;\n      }\n\n      this.iceState.disconnected = false;\n    }\n  }\n\n  /**\n   * Set the iceState to disconnected and generates a timeout that waits for the\n   * iceState to reconnect and then resolves. If the ice state is already\n   * processing a reconnect, it immediately resolves. Rejects if the timeout\n   * duration is reached.\n   *\n   * @returns {Promise<undefined>}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  public waitForIceReconnect() {\n    if (!this.iceState.disconnected) {\n      LoggerProxy.logger.log(\n        'ReconnectionManager:index#waitForIceReconnect --> waiting for ice reconnect'\n      );\n\n      this.iceState.disconnected = true;\n\n      return new Promise<void>((resolve, reject) => {\n        this.iceState.timer = setTimeout(() => {\n          if (this.iceState.disconnected === false) {\n            resolve();\n          } else {\n            this.iceState.disconnected = false;\n            reject(\n              new Error(`ice reconnection did not occur in ${this.iceState.timeoutDuration}ms`)\n            );\n          }\n        }, this.iceState.timeoutDuration);\n\n        this.iceState.resolve = resolve;\n      });\n    }\n\n    // return a resolved promise to prevent multiple catch executions of reconnect\n    return Promise.resolve();\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  public reset() {\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    this.rejoinAttempts = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  public cleanUp() {\n    this.reset();\n    this.meeting = null;\n  }\n\n  /**\n   * @returns {Boolean}\n   * @throws {ReconnectionError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  private validate() {\n    if (this.meeting.config.reconnection.enabled) {\n      if (\n        this.status === RECONNECTION.STATE.DEFAULT_STATUS ||\n        this.status === RECONNECTION.STATE.COMPLETE\n      ) {\n        return true;\n      }\n\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#validate --> Reconnection already in progress.'\n      );\n\n      throw new ReconnectInProgress('Reconnection already in progress.');\n    }\n\n    LoggerProxy.logger.info('ReconnectionManager:index#validate --> Reconnection is not enabled.');\n\n    throw new ReconnectionError('Reconnection is not enabled.');\n  }\n\n  /**\n   * Initiates a media reconnect for the active meeting\n   * @param {Object} reconnectOptions\n   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened\n   * @param {boolean} [reconnectOptions.networkRetry=false] indicates if we are retrying the reconnect\n   * @returns {Promise}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  public async reconnect({\n    networkDisconnect = false,\n    networkRetry = false,\n  }: {\n    networkDisconnect?: boolean;\n    networkRetry?: boolean;\n  } = {}) {\n    LoggerProxy.logger.info(\n      `ReconnectionManager:index#reconnect --> Reconnection start for meeting ${this.meeting.id}.`\n    );\n    // First, validate that we can reconnect, if not, it will throw an error\n    try {\n      this.validate();\n    } catch (error) {\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#reconnect --> Reconnection unable to begin.',\n        error\n      );\n      throw error;\n    }\n\n    if (!networkRetry) {\n      // Only log START metrics on the initial reconnect\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#reconnect --> Sending reconnect start metric.'\n      );\n      Metrics.postEvent({\n        event: eventType.MEDIA_RECONNECTING,\n        meeting: this.meeting,\n      });\n    }\n\n    return this.executeReconnection({networkDisconnect})\n      .then(() => {\n        LoggerProxy.logger.info('ReconnectionManager:index#reconnect --> Reconnection successful.');\n        LoggerProxy.logger.info(\n          'ReconnectionManager:index#reconnect --> Sending reconnect success metric.'\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECOVERED,\n          meeting: this.meeting,\n          data: {recoveredBy: reconnection.RECOVERED_BY_NEW},\n        });\n      })\n      .catch((reconnectError) => {\n        if (reconnectError instanceof NeedsRetryError) {\n          LoggerProxy.logger.info(\n            'ReconnectionManager:index#reconnect --> Reconnection not successful, retrying.'\n          );\n          // Reset our reconnect status since we are looping back to the beginning\n          this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n\n          // This is a network retry, so we should not log START metrics again\n          return this.reconnect({networkDisconnect: true, networkRetry: true});\n        }\n\n        // Reconnect has failed\n        LoggerProxy.logger.error(\n          'ReconnectionManager:index#reconnect --> Reconnection failed.',\n          reconnectError.message\n        );\n        LoggerProxy.logger.info(\n          'ReconnectionManager:index#reconnect --> Sending reconnect abort metric.'\n        );\n\n        const reconnectMetric = {\n          event: eventType.CALL_ABORTED,\n          meeting: this.meeting,\n          data: {\n            errors: [\n              {\n                category: errorObjects.category.expected,\n                errorCode: 2008,\n                fatal: true,\n                name: errorObjects.name.mediaEngine,\n                shownToUser: false,\n              },\n            ],\n          },\n        };\n\n        Metrics.postEvent(reconnectMetric);\n        if (reconnectError instanceof NeedsRejoinError) {\n          // send call aborded event with catogery as expected as we are trying to rejoin\n\n          if (this.autoRejoinEnabled) {\n            return this.rejoinMeeting(reconnectError.wasSharing);\n          }\n        }\n\n        throw reconnectError;\n      });\n  }\n\n  /**\n   * @param {Object} reconnectOptions\n   * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened\n   * @returns {Promise}\n   * @throws {NeedsRetryError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  private async executeReconnection({networkDisconnect = false}: {networkDisconnect?: boolean}) {\n    this.status = RECONNECTION.STATE.IN_PROGRESS;\n\n    LoggerProxy.logger.info(\n      'ReconnectionManager:index#executeReconnection --> Attempting to reconnect to meeting.'\n    );\n\n    if (networkDisconnect) {\n      try {\n        await this.reconnectMercuryWebSocket();\n        LoggerProxy.logger.error(\n          'ReconnectionManager:index#executeReconnection --> Websocket reconnected.',\n          this.webex.internal.device.url\n        );\n      } catch (error) {\n        LoggerProxy.logger.error(\n          'ReconnectionManager:index#executeReconnection --> Unable to reconnect to websocket, giving up.'\n        );\n        this.status = RECONNECTION.STATE.FAILURE;\n        throw error;\n      }\n    }\n\n    const wasSharing = this.meeting.shareStatus === SHARE_STATUS.LOCAL_SHARE_ACTIVE;\n\n    try {\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#executeReconnection --> Updating meeting data from server.'\n      );\n      await this.webex.meetings.syncMeetings();\n    } catch (syncError) {\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#executeReconnection --> Unable to sync meetings, reconnecting.',\n        syncError\n      );\n      throw new NeedsRetryError(syncError);\n    }\n\n    // TODO: try to improve this logic as the reconnection manager saves the instance of deleted meeting object\n    // So that on rejoin it known what parametrs it was using\n    if (!this.meeting || !this.webex.meetings.getMeetingByType(_ID_, this.meeting.id)) {\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#executeReconnection --> Meeting got deleted due to inactivity or ended remotely '\n      );\n\n      throw new Error('Unable to rejoin a meeting already ended or inactive .');\n    }\n\n    LoggerProxy.logger.info(\n      `ReconnectionManager:index#executeReconnection --> Current state of meeting is ${this.meeting.state}`\n    );\n\n    // If the meeting state was left, no longer reconnect media\n    if (this.meeting.state === _LEFT_) {\n      if (this.meeting.type === _CALL_) {\n        throw new Error('Unable to rejoin a call in LEFT state.');\n      }\n\n      throw new NeedsRejoinError({wasSharing});\n    }\n\n    try {\n      const media = await this.reconnectMedia();\n\n      LoggerProxy.logger.log(\n        'ReconnectionManager:index#executeReconnection --> Media reestablished'\n      );\n      this.status = RECONNECTION.STATE.COMPLETE;\n\n      return media;\n    } catch (error) {\n      LoggerProxy.logger.error(\n        'ReconnectionManager:index#executeReconnection --> Media reestablishment failed'\n      );\n      this.status = RECONNECTION.STATE.FAILURE;\n\n      throw error;\n    }\n  }\n\n  /**\n   * Rejoins a meeting after detecting the member was in a LEFT state\n   *\n   * @async\n   * @param {boolean} wasSharing\n   * @returns {Promise}\n   */\n  async rejoinMeeting(wasSharing = false) {\n    try {\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#rejoinMeeting --> attemping meeting rejoin'\n      );\n      const previousCorrelationId = this.meeting.correlationId;\n\n      await this.meeting.join({rejoin: true});\n      LoggerProxy.logger.info('ReconnectionManager:index#rejoinMeeting --> meeting rejoined');\n\n      RoapCollection.deleteSession(previousCorrelationId);\n\n      if (wasSharing) {\n        // Stop the share streams if user tried to rejoin\n        Media.stopTracks(this.meeting.mediaProperties.shareTrack);\n        this.meeting.isSharing = false;\n        if (this.shareStatus === SHARE_STATUS.LOCAL_SHARE_ACTIVE) {\n          this.meeting.shareStatus = SHARE_STATUS.NO_SHARE;\n        }\n        this.meeting.mediaProperties.mediaDirection.sendShare = false;\n        Trigger.trigger(\n          this.meeting,\n          {\n            file: 'reconnection-manager/index',\n            function: 'rejoinMeeting',\n          },\n          EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n          {\n            reason: SHARE_STOPPED_REASON.MEETING_REJOIN,\n          }\n        );\n      }\n    } catch (joinError) {\n      this.rejoinAttempts += 1;\n      if (this.rejoinAttempts <= this.maxRejoinAttempts) {\n        LoggerProxy.logger.info(\n          `ReconnectionManager:index#rejoinMeeting --> Unable to rejoin meeting, attempt #${this.rejoinAttempts}, retrying.`,\n          joinError\n        );\n        this.rejoinMeeting();\n      } else {\n        LoggerProxy.logger.error(\n          'ReconnectionManager:index#rejoinMeeting --> Unable to rejoin meeting after max attempts.',\n          joinError\n        );\n        Metrics.sendBehavioralMetric(BEHAVIORAL_METRICS.MEETING_MAX_REJOIN_FAILURE, {\n          locus_id: this.meeting.locusUrl.split('/').pop(),\n          reason: joinError.message,\n          stack: joinError.stack,\n        });\n        this.status = RECONNECTION.STATE.FAILURE;\n        throw joinError;\n      }\n    }\n\n    try {\n      await this.reconnectMedia();\n    } catch (mediaError) {\n      LoggerProxy.logger.error(\n        'ReconnectionManager:index#rejoinMeeting --> Unable to reestablish media after rejoining.',\n        mediaError\n      );\n      throw mediaError;\n    }\n  }\n\n  /**\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  reconnectMedia() {\n    LoggerProxy.logger.log(\n      'ReconnectionManager:index#reconnectMedia --> Begin reestablishment of media'\n    );\n\n    return ReconnectionManager.setupPeerConnection(this.meeting)\n      .then(() =>\n        Media.attachMedia(this.meeting.mediaProperties, {\n          meetingId: this.meeting.id,\n          remoteQualityLevel: this.meeting.mediaProperties.remoteQualityLevel,\n          enableRtx: this.meeting.config.enableRtx,\n          enableExtmap: this.meeting.config.enableExtmap,\n        })\n      )\n      .then((peerConnection) => this.meeting.setRemoteStream(peerConnection))\n      .then(() => {\n        LoggerProxy.logger.log(\n          'ReconnectionManager:index#reconnectMedia --> Sending ROAP media request'\n        );\n\n        return this.meeting.roap.sendRoapMediaRequest({\n          sdp: this.meeting.mediaProperties.peerConnection.sdp,\n          roapSeq: this.meeting.roapSeq,\n          meeting: this.meeting,\n          reconnect: true,\n        });\n      });\n  }\n\n  /**\n   * Attempt to Reconnect Mercury Websocket\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  private async reconnectMercuryWebSocket() {\n    LoggerProxy.logger.info(\n      'ReconnectionManager:index#reconnectMercuryWebSocket --> Reconnecting websocket.'\n    );\n    // First, attempt to disconnect if we think we are already connected.\n    if (this.webex.internal.mercury.connected) {\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#reconnectMercuryWebSocket --> Disconnecting existing websocket.'\n      );\n      try {\n        await this.webex.internal.mercury.disconnect();\n        LoggerProxy.logger.info(\n          'ReconnectionManager:index#reconnectMercuryWebSocket --> Websocket disconnected successfully.'\n        );\n      } catch (disconnectError) {\n        // If we can't disconnect, the sdk is in such a bad state that reconnecting is not going to happen.\n        LoggerProxy.logger.error(\n          'ReconnectionManager:index#reconnectMercuryWebSocket --> Unable to disconnect from websocket, giving up.',\n          disconnectError\n        );\n        throw disconnectError;\n      }\n    }\n\n    try {\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#reconnectMercuryWebSocket --> Connecting websocket.'\n      );\n      await this.webex.internal.mercury.connect();\n      LoggerProxy.logger.info(\n        'ReconnectionManager:index#reconnectMercuryWebSocket --> Websocket connected successfully.'\n      );\n    } catch (connectError) {\n      LoggerProxy.logger.error(\n        'ReconnectionManager:index#reconnectMercuryWebSocket --> Unable to connect to websocket, giving up.',\n        connectError\n      );\n\n      throw connectError;\n    }\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  private static async setupPeerConnection(meeting: Meeting) {\n    LoggerProxy.logger.log(\n      'ReconnectionManager:index#setupPeerConnection --> Begin resetting peer connection'\n    );\n    // close pcs, unset to null and create a new one with out closing any streams\n    PeerConnectionManager.close(meeting.mediaProperties.peerConnection);\n    meeting.mediaProperties.unsetPeerConnection();\n\n    const turnServerResult = await meeting.roap.doTurnDiscovery(meeting, true);\n\n    meeting.mediaProperties.reInitiatePeerconnection(turnServerResult.turnServerInfo);\n    PeerConnectionManager.setPeerConnectionEvents(meeting);\n\n    // update the peerconnection in the stats manager when ever we reconnect\n    meeting.statsAnalyzer.updatePeerconnection(meeting.mediaProperties.peerConnection);\n  }\n}\n"],"mappings":"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"}