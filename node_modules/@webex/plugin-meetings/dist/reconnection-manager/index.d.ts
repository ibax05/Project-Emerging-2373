/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */
import Meeting from '../meeting';
/**
 * @export
 * @class ReconnectionManager
 */
export default class ReconnectionManager {
    autoRejoinEnabled: any;
    iceState: any;
    maxRejoinAttempts: any;
    meeting: any;
    rejoinAttempts: any;
    shareStatus: any;
    status: any;
    tryCount: any;
    webex: any;
    /**
     * @param {Meeting} meeting
     */
    constructor(meeting: Meeting);
    /**
     * Sets the iceState to connected and clears any disconnect timeouts and
     * related timeout data within the iceState.
     *
     * @returns {undefined}
     * @public
     * @memberof ReconnectionManager
     */
    iceReconnected(): void;
    /**
     * Set the iceState to disconnected and generates a timeout that waits for the
     * iceState to reconnect and then resolves. If the ice state is already
     * processing a reconnect, it immediately resolves. Rejects if the timeout
     * duration is reached.
     *
     * @returns {Promise<undefined>}
     * @public
     * @memberof ReconnectionManager
     */
    waitForIceReconnect(): Promise<void>;
    /**
     * @returns {undefined}
     * @public
     * @memberof ReconnectionManager
     */
    reset(): void;
    /**
     * @returns {undefined}
     * @public
     * @memberof ReconnectionManager
     */
    cleanUp(): void;
    /**
     * @returns {Boolean}
     * @throws {ReconnectionError}
     * @private
     * @memberof ReconnectionManager
     */
    private validate;
    /**
     * Initiates a media reconnect for the active meeting
     * @param {Object} reconnectOptions
     * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened
     * @param {boolean} [reconnectOptions.networkRetry=false] indicates if we are retrying the reconnect
     * @returns {Promise}
     * @public
     * @memberof ReconnectionManager
     */
    reconnect({ networkDisconnect, networkRetry, }?: {
        networkDisconnect?: boolean;
        networkRetry?: boolean;
    }): any;
    /**
     * @param {Object} reconnectOptions
     * @param {boolean} [reconnectOptions.networkDisconnect=false] indicates if a network disconnect event happened
     * @returns {Promise}
     * @throws {NeedsRetryError}
     * @private
     * @memberof ReconnectionManager
     */
    private executeReconnection;
    /**
     * Rejoins a meeting after detecting the member was in a LEFT state
     *
     * @async
     * @param {boolean} wasSharing
     * @returns {Promise}
     */
    rejoinMeeting(wasSharing?: boolean): Promise<void>;
    /**
     * @returns {Promise}
     * @private
     * @memberof ReconnectionManager
     */
    reconnectMedia(): Promise<any>;
    /**
     * Attempt to Reconnect Mercury Websocket
     * @returns {Promise}
     * @private
     * @memberof ReconnectionManager
     */
    private reconnectMercuryWebSocket;
    /**
     * @param {Meeting} meeting
     * @returns {undefined}
     * @private
     * @memberof ReconnectionManager
     */
    private static setupPeerConnection;
}
