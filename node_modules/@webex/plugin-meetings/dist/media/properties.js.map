{"version":3,"names":["_constants","require","_loggerProxy","_interopRequireDefault","_util","MediaProperties","options","arguments","length","undefined","_classCallCheck2","default","_defineProperty2","MEETINGS","peerConnection","MediaUtil","createPeerConnection","mediaDirection","videoTrack","audioTrack","shareTrack","remoteShare","remoteAudioTrack","remoteVideoTrack","localQualityLevel","QUALITY_LEVELS","remoteQualityLevel","HIGH","mediaSettings","videoDeviceId","_createClass2","key","value","getVideoDeviceId","setMediaDirection","setMediaSettings","type","values","setMediaPeerConnection","setLocalVideoTrack","setLocalAudioTrack","setLocalQualityLevel","setLocalShareTrack","setRemoteQualityLevel","setRemoteShare","setRemoteAudioTrack","setRemoteVideoTrack","setVideoDeviceId","deviceId","unsetPeerConnection","reInitiatePeerconnection","turnServerInfo","unsetLocalVideoTrack","unsetLocalShareTrack","unsetLocalAudioTrack","unsetRemoteStream","LoggerProxy","logger","warn","unsetRemoteMedia","unsetRemoteShare","unsetLocalVideoTracks","unsetRemoteStreams","unsetRemoteTracks","unsetShareStreams","unsetMediaStreams","unsetMediaTracks","waitForIceConnectedState","_this","isIceConnected","iceConnectionState","ICE_STATE","CONNECTED","COMPLETED","_promise","resolve","reject","timer","iceListener","log","concat","connectionState","clearTimeout","removeEventListener","setTimeout","PC_BAIL_TIMEOUT","addEventListener","_getCurrentConnectionType","_asyncToGenerator2","_regenerator","mark","_callee","allStatsReports","statsResult","successfulCandidatePairs","foundConnectionType","wrap","_callee$","_context","prev","next","getStats","sent","forEach","report","push","t0","filter","_report$state","state","toLowerCase","some","pair","localCandidate","find","id","localCandidateId","connectionType","relayProtocol","toUpperCase","_localCandidate$proto","protocol","abrupt","stop","getCurrentConnectionType","apply","exports"],"sources":["properties.ts"],"sourcesContent":["import {ICE_STATE, MEETINGS, PC_BAIL_TIMEOUT, QUALITY_LEVELS} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport MediaUtil from './util';\n\n/**\n * @class MediaProperties\n */\nexport default class MediaProperties {\n  audioTrack: any;\n  localQualityLevel: any;\n  mediaDirection: any;\n  mediaSettings: any;\n  peerConnection: any;\n  remoteAudioTrack: any;\n  remoteQualityLevel: any;\n  remoteShare: any;\n  remoteVideoTrack: any;\n  shareTrack: any;\n  videoDeviceId: any;\n  videoTrack: any;\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} [options] -- to auto construct\n   * @returns {MediaProperties}\n   */\n  constructor(options: any = {}) {\n    this.peerConnection = MediaUtil.createPeerConnection();\n    this.mediaDirection = options.mediaDirection;\n    this.videoTrack = options.videoTrack;\n    this.audioTrack = options.audioTrack;\n    this.shareTrack = options.shareTrack;\n    this.remoteShare = options.remoteShare;\n    this.remoteAudioTrack = options.remoteAudioTrack;\n    this.remoteVideoTrack = options.remoteVideoTrack;\n    this.localQualityLevel = options.localQualityLevel || QUALITY_LEVELS['720p'];\n    this.remoteQualityLevel = options.remoteQualityLevel || QUALITY_LEVELS.HIGH;\n    this.mediaSettings = {};\n    this.videoDeviceId = null;\n  }\n\n  /**\n   * Retrieves the preferred video input device\n   * @returns {Object|null}\n   */\n  getVideoDeviceId() {\n    return this.videoDeviceId || null;\n  }\n\n  setMediaDirection(mediaDirection) {\n    this.mediaDirection = mediaDirection;\n  }\n\n  setMediaSettings(type, values) {\n    this.mediaSettings[type] = values;\n  }\n\n  setMediaPeerConnection(peerConnection) {\n    this.peerConnection = peerConnection;\n  }\n\n  setLocalVideoTrack(videoTrack) {\n    this.videoTrack = videoTrack;\n  }\n\n  setLocalAudioTrack(audioTrack) {\n    this.audioTrack = audioTrack;\n  }\n\n  setLocalQualityLevel(localQualityLevel) {\n    this.localQualityLevel = localQualityLevel;\n  }\n\n  setLocalShareTrack(shareTrack) {\n    this.shareTrack = shareTrack;\n  }\n\n  setRemoteQualityLevel(remoteQualityLevel) {\n    this.remoteQualityLevel = remoteQualityLevel;\n  }\n\n  setRemoteShare(remoteShare) {\n    this.remoteShare = remoteShare;\n  }\n\n  /**\n   * Sets the remote audio track\n   * @param {MediaTrack} remoteAudioTrack MediaTrack to save\n   * @returns {void}\n   */\n  setRemoteAudioTrack(remoteAudioTrack: any) {\n    this.remoteAudioTrack = remoteAudioTrack;\n  }\n\n  /**\n   * Sets the remote video track\n   * @param {MediaTrack} remoteVideoTrack MediaTrack to save\n   * @returns {void}\n   */\n  setRemoteVideoTrack(remoteVideoTrack: any) {\n    this.remoteVideoTrack = remoteVideoTrack;\n  }\n\n  /**\n   * Stores the preferred video input device\n   * @param {string} deviceId Preferred video input device\n   * @returns {void}\n   */\n  setVideoDeviceId(deviceId: string) {\n    this.videoDeviceId = deviceId;\n  }\n\n  unsetPeerConnection() {\n    this.peerConnection = null;\n  }\n\n  reInitiatePeerconnection(turnServerInfo) {\n    this.peerConnection = MediaUtil.createPeerConnection(turnServerInfo);\n  }\n\n  unsetLocalVideoTrack() {\n    this.videoTrack = null;\n  }\n\n  unsetLocalShareTrack() {\n    this.shareTrack = null;\n  }\n\n  unsetLocalAudioTrack() {\n    this.audioTrack = null;\n  }\n\n  /**\n   * Removes remote stream from class instance\n   * @deprecated after v1.89.3\n   * @returns {void}\n   */\n  unsetRemoteStream() {\n    LoggerProxy.logger.warn(\n      'Media:properties#unsetRemoteStream --> [DEPRECATION WARNING]: unsetRemoteStream has been deprecated after v1.89.3 (use unsetRemoteTracks instead)'\n    );\n    // unsets audio and video only\n    this.unsetRemoteMedia();\n  }\n\n  /**\n   * Removes both remote audio and video from class instance\n   * @returns {void}\n   */\n  unsetRemoteMedia() {\n    this.remoteAudioTrack = null;\n    this.remoteVideoTrack = null;\n  }\n\n  unsetRemoteShare() {\n    this.remoteShare = null;\n  }\n\n  unsetLocalVideoTracks() {\n    this.unsetLocalVideoTrack();\n    this.unsetLocalShareTrack();\n  }\n\n  /**\n   * Removes remote stream and remote share from class instance\n   * @deprecated after v1.89.3\n   * @returns {void}\n   */\n  unsetRemoteStreams() {\n    LoggerProxy.logger.warn(\n      'Media:properties#unsetRemoteStreams --> [DEPRECATION WARNING]: unsetRemoteStreams has been deprecated after v1.89.3 (use unsetRemoteTracks instead)'\n    );\n    this.unsetRemoteStream();\n    this.unsetRemoteShare();\n  }\n\n  /**\n   * Unsets all remote tracks\n   * @returns {void}\n   */\n  unsetRemoteTracks() {\n    this.unsetRemoteMedia();\n    this.unsetRemoteShare();\n  }\n\n  unsetShareStreams() {\n    this.unsetLocalShareTrack();\n    this.unsetRemoteShare();\n  }\n\n  /**\n   * Removes both local and remote video stream from class instance\n   * @deprecated after v1.89.3\n   * @returns {void}\n   */\n  unsetMediaStreams() {\n    LoggerProxy.logger.warn(\n      'Media:properties#unsetMediaStreams --> [DEPRECATION WARNING]: unsetMediaStreams has been deprecated after v1.89.3 (use unsetMediaTracks instead)'\n    );\n    this.unsetLocalVideoTrack();\n    this.unsetRemoteStream();\n  }\n\n  /**\n   * Removes both local and remote video stream from class instance\n   * @returns {void}\n   */\n  unsetMediaTracks() {\n    this.unsetLocalVideoTrack();\n    this.unsetRemoteMedia();\n  }\n\n  /**\n   * Waits until ice connection is established\n   *\n   * @returns {Promise<void>}\n   */\n  waitForIceConnectedState() {\n    const isIceConnected = () =>\n      this.peerConnection.iceConnectionState === ICE_STATE.CONNECTED ||\n      this.peerConnection.iceConnectionState === ICE_STATE.COMPLETED;\n\n    if (isIceConnected()) {\n      return Promise.resolve();\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      let timer;\n\n      const iceListener = () => {\n        LoggerProxy.logger.log(\n          `Media:properties#waitForIceConnectedState --> ice state: ${this.peerConnection.iceConnectionState}, conn state: ${this.peerConnection.connectionState}`\n        );\n\n        if (isIceConnected()) {\n          clearTimeout(timer);\n          this.peerConnection.removeEventListener('iceconnectionstatechange', iceListener);\n          resolve();\n        }\n      };\n\n      timer = setTimeout(() => {\n        this.peerConnection.removeEventListener('iceconnectionstatechange', iceListener);\n        reject();\n      }, PC_BAIL_TIMEOUT);\n\n      this.peerConnection.addEventListener('iceconnectionstatechange', iceListener);\n    });\n  }\n\n  /**\n   * Returns the type of a connection that has been established\n   *\n   * @returns {Promise<'UDP' | 'TCP' | 'TURN-TLS' | 'TURN-TCP' | 'TURN-UDP' | 'unknown'>}\n   */\n  async getCurrentConnectionType() {\n    // we can only get the connection type after ICE connection has been established\n    await this.waitForIceConnectedState();\n\n    const allStatsReports = [];\n\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      const statsResult = await this.peerConnection.getStats();\n\n      statsResult.forEach((report) => allStatsReports.push(report));\n    } catch (error) {\n      LoggerProxy.logger.warn(\n        `Media:properties#getCurrentConnectionType --> getStats() failed: ${error}`\n      );\n    }\n\n    const successfulCandidatePairs = allStatsReports.filter(\n      (report) => report.type === 'candidate-pair' && report.state?.toLowerCase() === 'succeeded'\n    );\n\n    let foundConnectionType = 'unknown';\n\n    // all of the successful pairs should have the same connection type, so just return the type for the first one\n    successfulCandidatePairs.some((pair) => {\n      const localCandidate = allStatsReports.find(\n        (report) => report.type === 'local-candidate' && report.id === pair.localCandidateId\n      );\n\n      if (localCandidate === undefined) {\n        LoggerProxy.logger.warn(\n          `Media:properties#getCurrentConnectionType --> failed to find local candidate \"${pair.localCandidateId}\" in getStats() results`\n        );\n\n        return false;\n      }\n\n      let connectionType;\n\n      if (localCandidate.relayProtocol) {\n        connectionType = `TURN-${localCandidate.relayProtocol.toUpperCase()}`;\n      } else {\n        connectionType = localCandidate.protocol?.toUpperCase(); // it will be UDP or TCP\n      }\n\n      if (connectionType) {\n        foundConnectionType = connectionType;\n\n        return true;\n      }\n\n      return false;\n    });\n\n    return foundConnectionType;\n  }\n}\n"],"mappings":"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"}