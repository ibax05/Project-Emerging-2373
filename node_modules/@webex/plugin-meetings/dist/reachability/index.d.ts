/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */
/**
 * @class Reachability
 * @export
 */
export default class Reachability {
    webex: object;
    reachabilityRequest: any;
    clusterLatencyResults: any;
    /**
     * Creates an instance of Reachability.
     * @param {object} webex
     * @memberof Reachability
     */
    constructor(webex: object);
    /**
     * fetches reachability data
     * @returns {Object} reachability data
     * @public
     * @async
     * @memberof Reachability
     */
    gatherReachability(): Promise<unknown>;
    /**
     * fetches reachability data and checks for cluster reachability
     * @returns {boolean}
     * @public
     * @memberof Reachability
     */
    isAnyClusterReachable(): boolean;
    /**
     * Generate peerConnection config settings
     * @param {object} cluster
     * @returns {object} peerConnectionConfig
     * @private
     * @memberof Reachability
     */
    private buildPeerConnectionConfig;
    /**
     * Creates an RTCPeerConnection
     * @param {object} cluster
     * @returns {RTCPeerConnection} peerConnection
     * @private
     * @memberof Reachability
     */
    private createPeerConnection;
    /**
     * Gets total elapsed time
     * @param {RTCPeerConnection} peerConnection
     * @returns {Number} Milliseconds
     * @private
     * @memberof Reachability
     */
    private getElapsedTime;
    /**
     * creates offer and generates localSDP
     * @param {object} clusterList cluster List
     * @returns {Promise} Reachability latency results
     * @private
     * @memberof Reachability
     */
    private getLocalSDPForClusters;
    /**
     * Get list of all unreachable clusters
     * @returns {array} Unreachable clusters
     * @private
     * @memberof Reachability
     */
    private getUnreachablClusters;
    /**
     * Attach an event handler for the icegatheringstatechange
     * event and measure latency.
     * @param {RTCPeerConnection} peerConnection
     * @returns {undefined}
     * @private
     * @memberof Reachability
     */
    private handleIceGatheringStateChange;
    /**
     * Attach an event handler for the icecandidate
     * event and measure latency.
     * @param {RTCPeerConnection} peerConnection
     * @returns {undefined}
     * @private
     * @memberof Reachability
     */
    private handleOnIceCandidate;
    /**
     * An event handler on an RTCPeerConnection when the state of the ICE
     * candidate gathering process changes. Used to measure connection
     * speed.
     * @private
     * @param {RTCPeerConnection} peerConnection
     * @param {number} timeout
     * @returns {Promise}
     */
    private iceGatheringState;
    /**
     * Make a log of unreachable clusters.
     * @returns {undefined}
     * @private
     * @memberof Reachability
     */
    private logUnreachableClusters;
    /**
     * Calculates time to establish connection
     * @param {array} iceResults iceResults
     * @returns {object} reachabilityMap
     * @private
     * @memberof Reachability
     */
    private parseIceResultsToReachabilityResults;
    /**
     * fetches reachability data
     * @param {object} clusterList
     * @returns {Promise<localSDPData>} reachability check results
     * @private
     * @memberof Reachability
     */
    private performReachabilityCheck;
    /**
     * Records latency and closes the peerConnection
     * @param {RTCPeerConnection} peerConnection
     * @param {number} elapsed Latency in milliseconds
     * @returns {undefined}
     * @private
     * @memberof Reachability
     */
    private setLatencyAndClose;
    /**
     * utility function
     * @returns {undefined}
     * @private
     * @memberof Reachability
     */
    private setup;
}
