declare const _default: {
    intervals: {
        audioReceive: {
            common: {
                common: {
                    direction: string;
                    isMain: boolean;
                    mariFecEnabled: boolean;
                    mariQosEnabled: boolean;
                    multistreamEnabled: boolean;
                };
                dtlsBitrate: number;
                dtlsPackets: number;
                fecBitrate: number;
                fecPackets: number;
                maxBitrate: number;
                mediaHopByHopLost: number;
                rtcpBitrate: number;
                rtcpPackets: number;
                rtpBitrate: number;
                rtpHopByHopLost: number;
                rtpPackets: number;
                rtpRecovered: number;
                rtxBitrate: number;
                rtxPackets: number;
                srtcpUnprotectErrors: number;
                srtpUnprotectErrors: number;
                stunBitrate: number;
                stunPackets: number;
                transportType: string;
            };
            streams: {
                common: {
                    codec: string;
                    concealedFrames: number;
                    csi: any[];
                    maxConcealRunLength: number;
                    optimalBitrate: number;
                    optimalFrameRate: number;
                    receivedBitrate: number;
                    receivedFrameRate: number;
                    renderedFrameRate: number;
                    requestedBitrate: number;
                    requestedFrameRate: number;
                    rtpEndToEndLost: number;
                    maxRtpJitter: number;
                    meanRtpJitter: number;
                    rtpPackets: number;
                    ssci: number;
                };
            }[];
        }[];
        audioTransmit: {
            common: {
                availableBitrate: number;
                common: {
                    direction: string;
                    isMain: boolean;
                    mariFecEnabled: boolean;
                    mariQosEnabled: boolean;
                    multistreamEnabled: boolean;
                };
                dtlsBitrate: number;
                dtlsPackets: number;
                fecBitrate: number;
                fecPackets: number;
                maxBitrate: number;
                queueDelay: number;
                remoteJitter: number;
                remoteLossRate: number;
                remoteReceiveRate: number;
                roundTripTime: number;
                rtcpBitrate: number;
                rtcpPackets: number;
                rtpBitrate: number;
                rtpPackets: number;
                rtxBitrate: number;
                rtxPackets: number;
                stunBitrate: number;
                stunPackets: number;
                transportType: string;
            };
            streams: {
                common: {
                    codec: string;
                    requestedBitrate: number;
                    requestedFrames: number;
                    rtpPackets: number;
                    ssci: number;
                    transmittedBitrate: number;
                    transmittedFrameRate: number;
                };
            }[];
        }[];
        intervalMetadata: {
            peerReflexiveIP: string;
            peripherals: any[];
            processAverageCPU: number;
            processMaximumCPU: number;
            systemAverageCPU: number;
            systemMaximumCPU: number;
        };
        intervalNumber: number;
        videoReceive: {
            common: {
                common: {
                    direction: string;
                    isMain: boolean;
                    mariFecEnabled: boolean;
                    mariQosEnabled: boolean;
                    multistreamEnabled: boolean;
                };
                dtlsBitrate: number;
                dtlsPackets: number;
                fecBitrate: number;
                fecPackets: number;
                maxBitrate: number;
                mediaHopByHopLost: number;
                rtcpBitrate: number;
                rtcpPackets: number;
                rtpBitrate: number;
                rtpHopByHopLost: number;
                rtpPackets: number;
                rtpRecovered: number;
                rtxBitrate: number;
                rtxPackets: number;
                srtcpUnprotectErrors: number;
                srtpUnprotectErrors: number;
                stunBitrate: number;
                stunPackets: number;
                transportType: string;
            };
            streams: {
                common: {
                    codec: string;
                    concealedFrames: number;
                    csi: any[];
                    maxConcealRunLength: number;
                    optimalBitrate: number;
                    optimalFrameRate: number;
                    receivedBitrate: number;
                    receivedFrameRate: number;
                    renderedFrameRate: number;
                    requestedBitrate: number;
                    requestedFrameRate: number;
                    rtpEndToEndLost: number;
                    rtpJitter: number;
                    rtpPackets: number;
                    ssci: number;
                };
                h264CodecProfile: string;
                isActiveSpeaker: boolean;
                optimalFrameSize: number;
                receivedFrameSize: number;
                receivedHeight: number;
                receivedKeyFrames: number;
                receivedKeyFramesForRequest: number;
                receivedKeyFramesSourceChange: number;
                receivedKeyFramesUnknown: number;
                receivedWidth: number;
                requestedFrameSize: number;
                requestedKeyFrames: number;
            }[];
        }[];
        videoTransmit: {
            common: {
                availableBitrate: number;
                common: {
                    direction: string;
                    isMain: boolean;
                    mariFecEnabled: boolean;
                    mariQosEnabled: boolean;
                    multistreamEnabled: boolean;
                };
                dtlsBitrate: number;
                dtlsPackets: number;
                fecBitrate: number;
                fecPackets: number;
                maxBitrate: number;
                queueDelay: number;
                remoteJitter: number;
                remoteLossRate: number;
                remoteReceiveRate: number;
                roundTripTime: number;
                rtcpBitrate: number;
                rtcpPackets: number;
                rtpBitrate: number;
                rtpPackets: number;
                rtxBitrate: number;
                rtxPackets: number;
                stunBitrate: number;
                stunPackets: number;
                transportType: string;
            };
            streams: {
                common: {
                    codec: string;
                    duplicateSsci: number;
                    requestedBitrate: number;
                    requestedFrames: number;
                    rtpPackets: number;
                    ssci: number;
                    transmittedBitrate: number;
                    transmittedFrameRate: number;
                };
                h264CodecProfile: string;
                isAvatar: boolean;
                isHardwareEncoded: boolean;
                localConfigurationChanges: number;
                maxFrameQp: number;
                maxNoiseLevel: number;
                minRegionQp: number;
                remoteConfigurationChanges: number;
                requestedFrameSize: number;
                requestedKeyFrames: number;
                transmittedFrameSize: number;
                transmittedHeight: number;
                transmittedKeyFrames: number;
                transmittedKeyFramesClient: number;
                transmittedKeyFramesConfigurationChange: number;
                transmittedKeyFramesFeedback: number;
                transmittedKeyFramesLocalDrop: number;
                transmittedKeyFramesOtherLayer: number;
                transmittedKeyFramesPeriodic: number;
                transmittedKeyFramesSceneChange: number;
                transmittedKeyFramesStartup: number;
                transmittedKeyFramesUnknown: number;
                transmittedWidth: number;
            }[];
        }[];
    }[];
};
export default _default;
