{"version":3,"names":["_tsSdp","require","PeerConnectionUtils","maxFsForProfileLevel","framesPerSecond","convertCLineToIpv4","sdp","replaceSdp","replace","adjustH264Profile","maxFsValue","parsedSdp","parse","avMedia","forEach","media","type","codecs","codec","_codec$name","name","toUpperCase","fmtParams","map","fmtp","parsedRegex","match","length","stuffBeforeProfileLevelId","profile","toLowerCase","levelId","_parseInt2","default","stuffAfterProfileLevelId","Error","concat","newLevelId","_keys","reverse","find","key","newLevelIdHex","toString","_default","exports"],"sources":["util.ts"],"sourcesContent":["import {parse} from '@webex/ts-sdp';\n\ninterface IPeerConnectionUtils {\n  convertCLineToIpv4: (sdp: string) => string;\n  adjustH264Profile: (sdp: string, maxFsValue: number) => string;\n}\n\nconst PeerConnectionUtils = {} as IPeerConnectionUtils;\n\n// max-fs values for all H264 profile levels\nconst maxFsForProfileLevel = {\n  10: 99,\n  11: 396,\n  12: 396,\n  13: 396,\n  20: 396,\n  21: 792,\n  22: 1620,\n  30: 1620,\n  31: 3600,\n  32: 5120,\n  40: 8192,\n  41: 8192,\n  42: 8704,\n  50: 22080,\n  51: 36864,\n  52: 36864,\n  60: 139264,\n  61: 139264,\n  62: 139264,\n};\n\nconst framesPerSecond = 30;\n\n/**\n * Convert C line to IPv4\n * @param {string} sdp\n * @returns {string}\n */\nPeerConnectionUtils.convertCLineToIpv4 = (sdp: string) => {\n  let replaceSdp = sdp;\n\n  // TODO: remove this once linus supports Ipv6 c line.currently linus rejects SDP with c line having ipv6 candidates we are\n  // mocking ipv6 to ipv4 candidates\n  // https://jira-eng-gpk2.cisco.com/jira/browse/SPARK-299232\n  replaceSdp = replaceSdp.replace(/c=IN IP6 .*/gi, 'c=IN IP4 0.0.0.0');\n\n  return replaceSdp;\n};\n\n/**\n * estimate profile levels for max-fs & max-mbps values\n * @param {string} sdp\n * @param {number} maxFsValue\n * @returns {string}\n */\nPeerConnectionUtils.adjustH264Profile = (sdp: string, maxFsValue: number) => {\n  // converting with ts-sdp parser, no munging\n  const parsedSdp = parse(sdp);\n\n  parsedSdp.avMedia.forEach((media) => {\n    if (media.type === 'video') {\n      media.codecs.forEach((codec) => {\n        if (codec.name?.toUpperCase() === 'H264') {\n          // there should really be just 1 fmtp line, but just in case, we process all of them\n          codec.fmtParams = codec.fmtParams.map((fmtp) => {\n            const parsedRegex = fmtp.match(/(.*)profile-level-id=(\\w{4})(\\w{2})(.*)/);\n\n            if (parsedRegex && parsedRegex.length === 5) {\n              const stuffBeforeProfileLevelId = parsedRegex[1];\n              const profile = parsedRegex[2].toLowerCase();\n              const levelId = parseInt(parsedRegex[3], 16);\n              const stuffAfterProfileLevelId = parsedRegex[4];\n\n              if (!maxFsForProfileLevel[levelId]) {\n                throw new Error(\n                  `found unsupported h264 profile level id value in the SDP: ${levelId}`\n                );\n              }\n\n              if (maxFsForProfileLevel[levelId] === maxFsValue) {\n                // profile level already matches our desired max-fs value, so we don't need to do anything\n                return fmtp;\n              }\n              if (maxFsForProfileLevel[levelId] < maxFsValue) {\n                // profile level has too low max-fs, so we need to override it (this is upgrading)\n                return `${fmtp};max-fs=${maxFsValue};max-mbps=${maxFsValue * framesPerSecond}`;\n              }\n\n              // profile level has too high max-fs value, so we need to use a lower level\n\n              // find highest level that has the matching maxFs\n              const newLevelId = Object.keys(maxFsForProfileLevel)\n                .reverse()\n                .find((key) => maxFsForProfileLevel[key] === maxFsValue);\n\n              if (newLevelId) {\n                // Object.keys returns keys as strings, so we need to parse it to an int again and then convert to hex\n                const newLevelIdHex = parseInt(newLevelId, 10).toString(16);\n\n                return `${stuffBeforeProfileLevelId}profile-level-id=${profile}${newLevelIdHex};max-mbps=${\n                  maxFsValue * framesPerSecond\n                }${stuffAfterProfileLevelId}`;\n              }\n\n              throw new Error(`unsupported maxFsValue: ${maxFsValue}`);\n            }\n\n            return fmtp;\n          });\n        }\n      });\n    }\n  });\n\n  return parsedSdp.toString();\n};\n\nexport default PeerConnectionUtils;\n"],"mappings":"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"}