/**
 * Error to indicate that wbxappapi requires a password
 */
export declare class MeetingInfoV2PasswordError extends Error {
    meetingInfo: any;
    sdkMessage: any;
    wbxAppApiCode: any;
    body: any;
    /**
     *
     * @constructor
     * @param {Number} [wbxAppApiErrorCode]
     * @param {Object} [meetingInfo]
     * @param {String} [message]
     */
    constructor(wbxAppApiErrorCode?: number, meetingInfo?: object, message?: string);
}
/**
 * Error generating a adhoc space meeting
 */
export declare class MeetingInfoV2AdhocMeetingError extends Error {
    sdkMessage: any;
    wbxAppApiCode: any;
    /**
     *
     * @constructor
     * @param {Number} [wbxAppApiErrorCode]
     * @param {String} [message]
     */
    constructor(wbxAppApiErrorCode?: number, message?: string);
}
/**
 * Error to indicate that preferred webex site not present to start adhoc meeting
 */
export declare class MeetingInfoV2CaptchaError extends Error {
    captchaInfo: any;
    isPasswordRequired: any;
    sdkMessage: any;
    wbxAppApiCode: any;
    body: any;
    /**
     *
     * @constructor
     * @param {Number} [wbxAppApiErrorCode]
     * @param {Object} [captchaInfo]
     * @param {String} [message]
     */
    constructor(wbxAppApiErrorCode?: number, captchaInfo?: object, message?: string);
}
/**
 * @class MeetingInfo
 */
export default class MeetingInfoV2 {
    webex: any;
    /**
     *
     * @param {WebexSDK} webex
     */
    constructor(webex: any);
    /**
     * converts hydra id into conversation url and persons Id
     * @param {String} destination one of many different types of destinations to look up info for
     * @param {String} [type] to match up with the destination value
     * @returns {Promise} destination and type
     * @public
     * @memberof MeetingInfo
     */
    fetchInfoOptions(destination: string, type?: string): any;
    /**
     * Creates adhoc space meetings for a space by fetching the conversation infomation
     * @param {String} conversationUrl conversationUrl to start adhoc meeting on
     * @returns {Promise} returns a meeting info object
     * @public
     * @memberof MeetingInfo
     */
    createAdhocSpaceMeeting(conversationUrl: string): Promise<any>;
    /**
     * Fetches meeting info from the server
     * @param {String} destination one of many different types of destinations to look up info for
     * @param {String} [type] to match up with the destination value
     * @param {String} password
     * @param {Object} captchaInfo
     * @param {String} captchaInfo.code
     * @param {String} captchaInfo.id
     * @returns {Promise} returns a meeting info object
     * @public
     * @memberof MeetingInfo
     */
    fetchMeetingInfo(destination: string, type?: string, password?: string, captchaInfo?: {
        code: string;
        id: string;
    }): Promise<any>;
}
