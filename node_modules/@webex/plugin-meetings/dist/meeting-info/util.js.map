{"version":3,"names":["_url","_interopRequireDefault","require","_btoa","_common","_parameter","_loggerProxy","_constants","MeetingInfoUtil","extractDestination","destination","type","dest","_LOCUS_ID_","url","ParameterError","getParsedUrl","link","parsedUrl","parse","protocol","concat","HTTPS_PROTOCOL","error","LoggerProxy","logger","warn","isMeetingLink","value","hostNameBool","hostname","includes","WEBEX_DOT_COM","pathNameBool","pathname","MEET","MEET_M","JOIN","isConversationUrl","webex","clusterId","internal","services","getClusterId","endsWith","CONVERSATION_SERVICE","convertLinkToSip","user","userIndex","lastIndexOf","substring","company","companyIndex","replace","WWW_DOT","isSipUri","sipString","sipUri","DIALER_REGEX","SIP_ADDRESS","exec","isPhoneNumber","phoneNumber","isValidNumber","PHONE_NUMBER","test","getHydraId","_deconstructHydraId","deconstructHydraId","id","cluster","UUID_REG","_ROOM_","room","_PEOPLE_","people","getSipUriFromHydraPersonId","get","then","res","emails","length","catch","err","generateOptions","_ref","_asyncToGenerator2","default","_regenerator","mark","_callee","from","options","hydraId","serviceUrl","wrap","_callee$","_context","prev","next","abrupt","_MEETING_LINK_","_SIP_URI_","_CONVERSATION_URL_","wasHydraPerson","_promise","resolve","waitForCatalog","getServiceUrlFromClusterId","t0","stop","_x","apply","arguments","getResourceUrl","resource","LOCI","MEETINGINFO","method","HTTP_VERBS","GET","uri","_PERSONAL_ROOM_","_MEETING_ID_","encodeURIComponent","TYPE","USE_URI_LOOKUP_FALSE","PUT","btoa","getRequestParams","resourceOptions","api","requestParams","ALTERNATE_REDIRECT_TRUE","body","lookupType","_default","exports"],"sources":["util.ts"],"sourcesContent":["import url from 'url';\n\nimport btoa from 'btoa';\n// @ts-ignore\nimport {deconstructHydraId} from '@webex/common';\n\nimport ParameterError from '../common/errors/parameter';\nimport LoggerProxy from '../common/logs/logger-proxy';\n\nimport {\n  _SIP_URI_,\n  _PERSONAL_ROOM_,\n  _MEETING_ID_,\n  _CONVERSATION_URL_,\n  _LOCUS_ID_,\n  _MEETING_LINK_,\n  _PEOPLE_,\n  _ROOM_,\n  HTTP_VERBS,\n  USE_URI_LOOKUP_FALSE,\n  TYPE,\n  LOCI,\n  MEETINGINFO,\n  ALTERNATE_REDIRECT_TRUE,\n  DIALER_REGEX,\n  WEBEX_DOT_COM,\n  CONVERSATION_SERVICE,\n  WWW_DOT,\n  JOIN,\n  MEET,\n  MEET_M,\n  HTTPS_PROTOCOL,\n  UUID_REG,\n} from '../constants';\n\nconst MeetingInfoUtil: any = {};\n\nMeetingInfoUtil.extractDestination = (destination, type) => {\n  let dest = destination;\n\n  if (type === _LOCUS_ID_) {\n    if (!(destination && destination.url)) {\n      throw new ParameterError('You cannot create a meeting by locus without a locus.url defined');\n    }\n    dest = destination.url;\n  }\n\n  return dest;\n};\n\nMeetingInfoUtil.getParsedUrl = (link) => {\n  try {\n    let parsedUrl = url.parse(link);\n\n    if (!parsedUrl) {\n      return false;\n    }\n    // hack for links such as <company>.webex.com/meet/<user> without a protocol\n    if (!parsedUrl.protocol) {\n      parsedUrl = url.parse(`${HTTPS_PROTOCOL}${link}`);\n    }\n\n    return parsedUrl;\n  } catch (error) {\n    LoggerProxy.logger.warn(\n      `Meeting-info:util#getParsedUrl --> unable to parse the URL, error: ${error}`\n    );\n\n    return null;\n  }\n};\n\n/**\n * Helper function to check if a string matches a known meeting link pattern\n * @param {String} value  string to parse and see if it matches a meeting link\n * @returns {Boolean}\n */\nMeetingInfoUtil.isMeetingLink = (value: string) => {\n  const parsedUrl = MeetingInfoUtil.getParsedUrl(value);\n  const hostNameBool = parsedUrl.hostname && parsedUrl.hostname.includes(WEBEX_DOT_COM);\n  const pathNameBool =\n    parsedUrl.pathname &&\n    (parsedUrl.pathname.includes(`/${MEET}`) ||\n      parsedUrl.pathname.includes(`/${MEET_M}`) ||\n      parsedUrl.pathname.includes(`/${JOIN}`));\n\n  return hostNameBool && pathNameBool;\n};\n\nMeetingInfoUtil.isConversationUrl = (value, webex) => {\n  const clusterId = webex.internal.services.getClusterId(value);\n\n  if (clusterId) {\n    return clusterId.endsWith(CONVERSATION_SERVICE);\n  }\n\n  return false;\n};\n\nMeetingInfoUtil.convertLinkToSip = (value) => {\n  const parsedUrl = MeetingInfoUtil.getParsedUrl(value);\n\n  if (!parsedUrl) {\n    return null;\n  }\n  let user;\n\n  if (parsedUrl.pathname) {\n    const userIndex = parsedUrl.pathname.lastIndexOf('/');\n\n    user = parsedUrl.pathname.substring(userIndex + 1);\n  }\n  if (!user) {\n    return null;\n  }\n  let company;\n\n  if (parsedUrl.hostname) {\n    const companyIndex = parsedUrl.hostname.lastIndexOf(`.${WEBEX_DOT_COM}`);\n\n    company = parsedUrl.hostname.substring(0, companyIndex).replace(WWW_DOT, '');\n  }\n  if (!company) {\n    return null;\n  }\n\n  return `${user}@${company}.${WEBEX_DOT_COM}`;\n};\n\nMeetingInfoUtil.isSipUri = (sipString) => {\n  // TODO: lets remove regex from this equation and user URI matchers and such\n  // have not found a great sip uri parser library as of now\n  const sipUri = DIALER_REGEX.SIP_ADDRESS.exec(sipString);\n\n  return sipUri;\n};\n\nMeetingInfoUtil.isPhoneNumber = (phoneNumber) => {\n  const isValidNumber = DIALER_REGEX.PHONE_NUMBER.test(phoneNumber);\n\n  return isValidNumber;\n};\n\nMeetingInfoUtil.getHydraId = (destination) => {\n  const {type, id, cluster} = deconstructHydraId(destination);\n\n  if (id && UUID_REG.test(id)) {\n    if (type === _ROOM_) {\n      return {room: true, destination: id, cluster};\n    }\n    if (type === _PEOPLE_) {\n      return {people: true, destination: id, cluster};\n    }\n\n    return {};\n  }\n\n  return {};\n};\n\nMeetingInfoUtil.getSipUriFromHydraPersonId = (destination, webex) =>\n  webex.people\n    .get(destination)\n    .then((res) => {\n      if (res.emails && res.emails.length) {\n        return res.emails[0];\n      }\n      throw new ParameterError('Hydra Id Lookup was an invalid hydra person id.');\n    })\n    .catch((err) => {\n      LoggerProxy.logger.error(\n        `Meeting-info:util#MeetingInfoUtil.getSipUriFromHydraPersonId --> getSipUriFromHydraPersonId ${err} `\n      );\n      throw err;\n    });\n\nMeetingInfoUtil.generateOptions = async (from) => {\n  const {destination, type, webex} = from;\n\n  if (type) {\n    return {\n      destination,\n      type,\n    };\n  }\n  const options: any = {};\n  const hydraId = MeetingInfoUtil.getHydraId(destination);\n\n  if (MeetingInfoUtil.isMeetingLink(destination)) {\n    LoggerProxy.logger.warn(\n      'Meeting-info:util#generateOptions --> WARN, use of Meeting Link is deprecated, please use a SIP URI instead'\n    );\n\n    options.type = _MEETING_LINK_;\n    options.destination = destination;\n  } else if (MeetingInfoUtil.isSipUri(destination)) {\n    options.type = _SIP_URI_;\n    options.destination = destination;\n  } else if (MeetingInfoUtil.isPhoneNumber(destination)) {\n    options.type = _SIP_URI_;\n    options.destination = destination;\n  } else if (MeetingInfoUtil.isConversationUrl(destination, webex)) {\n    options.type = _CONVERSATION_URL_;\n    options.destination = destination;\n  } else if (hydraId.people) {\n    options.type = _SIP_URI_;\n\n    return MeetingInfoUtil.getSipUriFromHydraPersonId(hydraId.destination, webex).then((res) => {\n      options.destination = res;\n\n      // Since hydra person ids require a unique case in which they are\n      // entirely converted to a SIP URI, we need to set a flag for detecting\n      // this type of destination.\n      options.wasHydraPerson = true;\n\n      return Promise.resolve(options);\n    });\n  } else if (hydraId.room) {\n    options.type = _CONVERSATION_URL_;\n    try {\n      await webex.internal.services.waitForCatalog('postauth');\n\n      const serviceUrl = webex.internal.services.getServiceUrlFromClusterId(\n        {\n          cluster: hydraId.cluster,\n        },\n        webex\n      );\n\n      options.destination = hydraId.destination\n        ? `${serviceUrl}/conversations/${hydraId.destination}`\n        : serviceUrl;\n    } catch (e) {\n      LoggerProxy.logger.error(`Meeting-info:util#generateOptions --> ${e}`);\n      throw e;\n    }\n  } else {\n    throw new ParameterError(\n      'MeetingInfo is fetched with meeting link, sip uri, phone number, hydra room id, hydra people id, or a conversation url.'\n    );\n  }\n\n  return Promise.resolve(options);\n};\n\n/**\n * Helper function to build up a correct locus url depending on the value passed\n * @param {String} type One of [SIP_URI, PERSONAL_ROOM, MEETING_ID, CONVERSATION_URL, LOCUS_ID, MEETING_LINK]\n * @param {Object} value ?? value.value\n * @returns {Object} returns an object with {resource, method}\n */\nMeetingInfoUtil.getResourceUrl = (type: string, value: any) => {\n  let resource = `/${LOCI}/${MEETINGINFO}`;\n  let method = HTTP_VERBS.GET;\n  let uri = null;\n\n  switch (type) {\n    case _SIP_URI_:\n    case _PERSONAL_ROOM_:\n    case _MEETING_ID_:\n      resource = `/${LOCI}/${MEETINGINFO}/${encodeURIComponent(\n        value\n      )}?${TYPE}=${type}&${USE_URI_LOOKUP_FALSE}`;\n      break;\n    case _CONVERSATION_URL_:\n      method = HTTP_VERBS.PUT;\n      break;\n    case _LOCUS_ID_:\n      uri = `${value}/${MEETINGINFO}`;\n      method = HTTP_VERBS.PUT;\n      break;\n    case _MEETING_LINK_:\n      resource = `$/${LOCI}/${MEETINGINFO}/${btoa(\n        value\n      )}?${TYPE}=${_MEETING_LINK_}&${USE_URI_LOOKUP_FALSE}`;\n      break;\n    default:\n  }\n\n  return {\n    uri,\n    resource,\n    method,\n  };\n};\n\nMeetingInfoUtil.getRequestParams = (resourceOptions, type, value, api) => {\n  let requestParams: any = {\n    method: resourceOptions.method,\n    api,\n    resource: resourceOptions.resource,\n  };\n\n  if (resourceOptions.method === HTTP_VERBS.GET) {\n    // for handling URL redirections\n    requestParams.resource = requestParams.resource.concat(`&${ALTERNATE_REDIRECT_TRUE}`);\n  } else if (type !== _LOCUS_ID_) {\n    // locus id check is a PUT not sure why\n    requestParams.resource = requestParams.resource.concat(`?${ALTERNATE_REDIRECT_TRUE}`);\n    requestParams.body = {\n      value,\n      lookupType: type,\n    };\n  } else if (type === _LOCUS_ID_) {\n    requestParams = {\n      method: resourceOptions.method,\n      uri: resourceOptions.uri,\n    };\n  }\n\n  return requestParams;\n};\n\nexport default MeetingInfoUtil;\n"],"mappings":"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"}