import RoapRequest from './request';
import Meeting from '../meeting';
/**
 * Handles the process of finding out TURN server information from Linus.
 * This is achieved by sending a TURN_DISCOVERY_REQUEST.
 */
export default class TurnDiscovery {
    private roapRequest;
    private defer?;
    private turnInfo;
    private responseTimer?;
    /**
     * Constructor
     *
     * @param {RoapRequest} roapRequest
     */
    constructor(roapRequest: RoapRequest);
    /**
     * waits for TURN_DISCOVERY_RESPONSE message to arrive
     *
     * @returns {Promise}
     * @private
     * @memberof Roap
     */
    private waitForTurnDiscoveryResponse;
    /**
     * handles TURN_DISCOVERY_RESPONSE roap message
     *
     * @param {Object} roapMessage
     * @returns {void}
     * @public
     * @memberof Roap
     */
    handleTurnDiscoveryResponse(roapMessage: object): void;
    /**
     * sends the TURN_DISCOVERY_REQUEST roap request
     *
     * @param {Meeting} meeting
     * @param {Boolean} isReconnecting
     * @returns {Promise}
     * @private
     * @memberof Roap
     */
    private sendRoapTurnDiscoveryRequest;
    /**
     * Sends the OK message that server expects to receive
     * after it sends us TURN_DISCOVERY_RESPONSE
     *
     * @param {Meeting} meeting
     * @returns {Promise}
     */
    sendRoapOK(meeting: Meeting): any;
    /**
     * Retrieves TURN server information from the backend by doing
     * a roap message exchange:
     * client                             server
     *  | -----TURN_DISCOVERY_REQUEST-----> |
     *  | <----TURN_DISCOVERY_RESPONSE----- |
     *  | --------------OK----------------> |
     *
     * @param {Meeting} meeting
     * @param {Boolean} isReconnecting should be set to true if this is a new
     *                                 media connection just after a reconnection
     * @returns {Promise}
     */
    doTurnDiscovery(meeting: Meeting, isReconnecting?: boolean): Promise<any>;
    /**
     * Gets the reason why reachability is skipped.
     *
     * @param {Meeting} meeting
     * @returns {Promise<string>} Promise with empty string if reachability is not skipped or a reason if it is skipped
     */
    private getSkipReason;
    /**
     * Checks if TURN discovery is skipped.
     *
     * @param {Meeting} meeting
     * @returns {Boolean} true if TURN discovery is being skipped, false if it is being done
     */
    isSkipped(meeting: any): Promise<boolean>;
}
