import { StatelessWebexPlugin } from '@webex/webex-core';
import Meeting from '../meeting';
/**
 * Roap options
 * @typedef {Object} RoapOptions
 * @property {String} sdp
 * @property {Meeting} meeting
 * @property {Number} roapSeq
 * @property {Boolean} reconnect
 */
/**
 * @typedef {Object} SeqOptions
 * @property {String} correlationId
 * @property {String} mediaId
 * @property {Number} seq
 */
/**
 * @class Roap
 * @export
 * @private
 */
export default class Roap extends StatelessWebexPlugin {
    attrs: any;
    lastRoapOffer: any;
    options: any;
    roapHandler: any;
    roapRequest: any;
    turnDiscovery: any;
    /**
     *
     * @param {Object} attrs
     * @param {Object} options
     */
    constructor(attrs: any, options: any);
    /**
     * Starts listening to mercury events for Roap messages
     * @param {object} data event object
     * @returns {Promise}
     * @private
     * @memberof Roap
     */
    private roapEvent;
    /**
     *
     * @param {String} correlationId correlation id of a meeting
     * @param {Number} seq ROAP sequence number
     * @returns {Promise}
     * @private
     * @memberof Roap
     */
    private stop;
    /**
     *
     * @param {SeqOptions} options
     * @returns {null}
     * @private
     * @memberof Roap
     */
    private sendRoapOK;
    /**
     * Sends a ROAP answer...
     * @param {SeqOptions} options
     * @param {Boolean} options.audioMuted
     * @param {Boolean} options.videoMuted
     * @returns {Promise}
     * @private
     * @memberof Roap
     */
    private sendRoapAnswer;
    /**
     * Sends a ROAP error...
     * @param {Object} session
     * @param {Object} locus
     * @param {String} errorType
     * @returns {Promise}
     * @private
     * @memberof Roap
     */
    private sendRoapError;
    /**
     * sends a roap media request
     * @param {RoapOptions} options
     * @returns {Promise}
     * @private
     * @memberof Roap
     */
    sendRoapMediaRequest(options: any): any;
    /**
     * sends a roap media request
     * @param {RoapOptions} options
     * @returns {Promise}
     * @private
     * @memberof Roap
     */
    sendRoapCallRequest: (options: any) => any;
    /**
     * Called when the roap sequence is finished (completed successfully or failed)
     * @param {String} correlationId id of the meeting affected
     * @param {String} sequenceId the id of the finished sequence
     * @returns {undefined}
     * @private
     * @memberof Roap
     */
    private roapFinished;
    /**
     * Performs a TURN server discovery procedure, which involves exchanging
     * some roap messages with the server. This exchange has to be done before
     * any other roap messages are sent
     *
     * @param {Meeting} meeting
     * @param {Boolean} isReconnecting should be set to true if this is a new
     *                                 media connection just after a reconnection
     * @returns {Promise}
     */
    doTurnDiscovery(meeting: Meeting, isReconnecting: boolean): any;
}
