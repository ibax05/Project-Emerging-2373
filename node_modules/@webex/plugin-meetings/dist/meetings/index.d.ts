import '@webex/internal-plugin-mercury';
import { WebexPlugin } from '@webex/webex-core';
import 'webrtc-adapter';
/**
 * Meetings Ready Event
 * Emitted when the meetings instance on webex is ready
 * @event meetings:ready
 * @instance
 * @memberof Meetings
 */
/**
 * Meetings Network Disconnected Event
 * Emitted when the meetings instance is disconnected from
 * the internal mercury server
 * @event network:disconnected
 * @instance
 * @memberof Meetings
 */
/**
 * Meetings Registered Event
 * Emitted when the meetings instance has been registered and listening
 * @event meetings:registered
 * @instance
 * @memberof Meetings
 */
/**
 * Meeting Removed Event
 * Emitted when a meeting was removed from the cache of meetings
 * @event meeting:removed
 * @instance
 * @type {Object}
 * @property {String} meetingId the removed meeting
 * @property {Object} response the server response
 * @property {String} type what type of meeting it was
 * @memberof Meetings
 */
/**
 * Meeting Added Event
 * Emitted when a meeting was added to the cache of meetings
 * @event meeting:added
 * @instance
 * @type {Object}
 * @property {String} meetingId the added meeting
 * @property {String} type what type of meeting it was
 * @memberof Meetings
 */
/**
 * Maintain a cache of meetings and sync with services.
 * @class
 */
export default class Meetings extends WebexPlugin {
    loggerRequest: any;
    media: any;
    meetingCollection: any;
    personalMeetingRoom: any;
    preferredWebexSite: any;
    reachability: any;
    registered: any;
    request: any;
    geoHintInfo: any;
    meetingInfo: any;
    namespace: string;
    /**
     * Initializes the Meetings Plugin
     * @constructor
     * @public
     * @memberof Meetings
     */
    constructor(...args: any[]);
    /**
     * handle locus events and takes meeting actions with them as they come in
     * @param {Object} data a locus event
     * @param {String} data.locusUrl
     * @param {Object} data.locus
     * @param {Boolean} useRandomDelayForInfo whether a random delay should be added to fetching meeting info
     * @param {String} data.eventType
     * @returns {undefined}
     * @private
     * @memberof Meetings
     */
    private handleLocusEvent;
    /**
     * handles locus events through mercury that are not roap
     * @param {Object} envelope
     * @param {Object} envelope.data
     * @param {String} envelope.data.eventType
     * @returns {undefined}
     * @private
     * @memberof Meetings
     */
    private handleLocusMercury;
    /**
     * handles mecury offline event
     * @returns {undefined}
     * @private
     * @memberof Meetings
     */
    private handleMercuryOffline;
    /**
     * registers for locus and roap mercury events
     * @returns {undefined}
     * @private
     * @memberof Meetings
     */
    private listenForEvents;
    /**
     * stops listening for locus and roap mercury events
     * @returns {undefined}
     * @private
     * @memberof Meetings
     */
    private stopListeningForEvents;
    /**
     * @returns {undefined}
     * @private
     * @memberof Meetings
     */
    private onReady;
    /**
     * API to toggle unified meetings
     * @param {Boolean} changeState
     * @private
     * @memberof Meetings
     * @returns {undefined}
     */
    private _toggleUnifiedMeetings;
    /**
     * API to enable or disable TURN discovery
     * @param {Boolean} enable
     * @private
     * @memberof Meetings
     * @returns {undefined}
     */
    private _toggleTurnDiscovery;
    /**
     * API to toggle starting adhoc meeting
     * @param {Boolean} changeState
     * @private
     * @memberof Meetings
     * @returns {undefined}
     */
    private _toggleAdhocMeetings;
    /**
     * Explicitly sets up the meetings plugin by registering
     * the device, connecting to mercury, and listening for locus events.
     *
     * @returns {Promise}
     * @public
     * @memberof Meetings
     */
    register(): Promise<void>;
    /**
     * Explicitly tears down the meetings plugin by deregistering
     * the device, disconnecting from mercury, and stops listening to locus events
     *
     * @returns {Promise}
     * @public
     * @memberof Meetings
     */
    unregister(): any;
    /**
     * Uploads logs to the webex services for tracking
     * @param {Object} [options={}]
     * @param {String} [options.callStart] Call Start Time
     * @param {String} [options.feedbackId] ID used for tracking
     * @param {String} [options.locusId]
     * @param {String} [options.correlationId]
     * @param {String} [options.meetingId] webex meeting ID
     * @param {String} [options.userId] userId
     * @param {String} [options.orgId] org id
     * @returns {String} feedback ID logs were submitted under
     */
    uploadLogs(options?: {
        callStart?: string;
        feedbackId?: string;
        locusId?: string;
        correlationId?: string;
        meetingId?: string;
        userId?: string;
        orgId?: string;
    }): any;
    /**
     * initializes the reachability instance for Meetings
     * @returns {undefined}
     * @public
     * @memberof Meetings
     */
    setReachability(): void;
    /**
     * gets the reachability instance for Meetings
     * @returns {Reachability}
     * @public
     * @memberof Meetings
     */
    getReachability(): any;
    /**
     * initializes and starts gathering reachability for Meetings
     * @returns {Promise}
     * @public
     * @memberof Meetings
     */
    startReachability(): any;
    /**
     * Get geoHint for info for meetings
     * @returns {Promise}
     * @private
     * @memberof Meetings
     */
    getGeoHint(): any;
    /**
     * Fetch user preferred webex site information
     * This also has other infomation about the user
     * @returns {Promise}
     * @private
     * @memberof Meetings
     */
    fetchUserPreferredWebexSite(): any;
    /**
     * gets the personal meeting room instance, for saved PMR values for this user
     * @returns {PersonalMeetingRoom}
     * @public
     * @memberof Meetings
     */
    getPersonalMeetingRoom(): any;
    /**
     * @param {Meeting} meeting
     * @param {Object} reason
     * @param {String} type
     * @returns {Undefined}
     * @private
     * @memberof Meetings
     */
    private destroy;
    /**
     * Create a meeting.
     * @param {string} destination - sipURL, spaceId, phonenumber, or locus object}
     * @param {string} [type] - the optional specified type, such as locusId
     * @param {Boolean} useRandomDelayForInfo - whether a random delay should be added to fetching meeting info
     * @returns {Promise<Meeting>} A new Meeting.
     * @public
     * @memberof Meetings
     */
    create(destination: string, type?: string, useRandomDelayForInfo?: boolean): any;
    /**
     * @param {String} destination see create()
     * @param {String} type see create()
     * @param {Boolean} useRandomDelayForInfo whether a random delay should be added to fetching meeting info
     * @returns {Promise} a new meeting instance complete with meeting info and destination
     * @private
     * @memberof Meetings
     */
    private createMeeting;
    /**
     * get a specifc meeting given it's type matched to the value, i.e., locus url
     * @param {String} type
     * @param {Object} value
     * @returns {Meeting}
     * @public
     * @memberof Meetings
     */
    getMeetingByType(type: string, value: object): any;
    /**
     * Get all meetings.
     * @param {object} options
     * @param {object} options.startDate - get meetings after this start date
     * @param {object} options.endDate - get meetings before this end date
     * @returns {Object} All currently active meetings.
     * @public
     * @memberof Meetings
     */
    getAllMeetings(options?: {
        startDate: object;
        endDate: object;
    }): any;
    /**
     * syncs all the meeting from server
     * @returns {undefined}
     * @public
     * @memberof Meetings
     */
    syncMeetings(): any;
    /**
     * Get all scheduled meetings.
     * @param {object} options
     * @param {object} options.startDate - get meetings after this start date
     * @param {object} options.endDate - get meetings before this end date
     * @returns {Object} All scheduled meetings.
     * @memberof Meetings
     */
    getScheduledMeetings(): any;
    /**
     * Get the logger instance for plugin-meetings
     * @returns {Logger}
     */
    getLogger(): any;
}
