{"version":3,"names":["_webexCore","require","_constants","_triggerProxy","_interopRequireDefault","_member","_loggerProxy","_parameter","_collection","_request","_util","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","_Reflect$construct","arguments","apply","_possibleConstructorReturn2","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","Members","_StatelessWebexPlugin","_inherits2","_super","attrs","options","_this","_classCallCheck2","_defineProperty2","_assertThisInitialized2","MEETINGS","membersRequest","MembersRequest","membersCollection","MembersCollection","locusUrl","hostId","type","selfId","mediaShareContentId","mediaShareWhiteboardId","recordingId","_createClass2","key","value","locusSelfUpdate","payload","newSelfId","oldSelfId","newSelf","id","oldSelf","theSelf","get","setIsSelf","notSelf","Trigger","trigger","file","function","EVENT_TRIGGERS","MEMBERS_SELF_UPDATE","activeSelfId","endedSelfId","locusHostUpdate","newHostId","oldHostId","newHost","oldHost","theHost","setIsHost","notHost","MEMBERS_HOST_UPDATE","activeHostId","endedHostId","locusParticipantsUpdate","delta","handleLocusInfoUpdatedParticipants","full","handleMembersUpdate","MEMBERS_UPDATE","locusMediaSharesUpdate","_payload$current","_payload$previous","_payload$current2","_payload$previous2","currentContent","current","content","previousContent","previous","currentWhiteboard","whiteboard","previousWhiteboard","whoSharing","whoStopped","beneficiaryId","disposition","FLOOR_ACTION","GRANTED","RELEASED","shareMember","setIsContentSharing","stopMember","MEMBERS_CONTENT_UPDATE","activeSharingId","endedSharingId","locusUrlUpdate","setLocusUrl","locusFullStateTypeUpdate","setType","membersUpdate","updated","constructMembers","added","getAll","list","_this2","forEach","member","set","participants","LoggerProxy","logger","warn","memberUpdate","update","locus","length","undefined","url","ParameterError","setHostId","owner","info","fullState","setSelfId","self","person","setMediaShareContentId","contentId","contentMediaShare","mediaShares","find","mediaShare","name","CONTENT","floor","beneficiary","setMediaShareWhiteboardId","whiteboardId","whiteboardMediaShare","WHITEBOARD","_this3","participant","hideInRoster","existing","push","Member","contentSharingId","whiteboardSharingId","addMember","invitee","alertIfActive","_promise","reject","MembersUtil","isInvalidInvitee","generateAddMemberOptions","addMembers","cancelPhoneInvite","cancelPhoneInviteOptions","admitMembers","memberIds","_isEmpty2","generateAdmitMemberOptions","admitMember","removeMember","memberId","generateRemoveMemberOptions","muteMember","mute","generateMuteMemberOptions","raiseOrLowerHand","raise","generateRaiseHandMemberOptions","raiseOrLowerHandMember","lowerAllHands","requestingMemberId","generateLowerAllHandsMemberOptions","lowerAllHandsMember","transferHostToMember","moderator","generateTransferHostMemberOptions","sendDialPadKey","tones","deviceArray","devices","device","_ref","deviceType","genderateSendDTMFOptions","Error","StatelessWebexPlugin","exports"],"sources":["index.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\nimport {isEmpty} from 'lodash';\n// @ts-ignore\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS, EVENT_TRIGGERS, FLOOR_ACTION, CONTENT, WHITEBOARD} from '../constants';\nimport Trigger from '../common/events/trigger-proxy';\nimport Member from '../member';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport ParameterError from '../common/errors/parameter';\n\nimport MembersCollection from './collection';\nimport MembersRequest from './request';\nimport MembersUtil from './util';\n\n/**\n * Members Update Event\n * Emitted when something in the roster list needs to be updated\n * @event members:update\n * @instance\n * @property {Object} delta the changes to the members list\n * @property {Array} delta.updated array only the updates, includes removals, as they will have updated status and member properties\n * @property {Array} delta.added array added members to the meeting\n * @property {Array} full array the full members collection\n * @memberof Members\n */\n\n/**\n * Members Content Update Event\n * Emitted when who is sharing changes\n * @event members:content:update\n * @instance\n * @property {String} activeContentSharingId\n * @property {String} endedContentSharingId\n * @memberof Members\n */\n\n/**\n * Members Host Update Event\n * Emitted when who is the host changes\n * @event members:host:update\n * @instance\n * @property {String} activeHostId\n * @property {String} endedHostId\n * @memberof Members\n */\n\n/**\n * Members Self Update Event\n * Emitted when who is the self changes\n * @event members:self:update\n * @instance\n * @property {String} activeSelfId\n * @property {String} endedSelfId\n * @memberof Members\n */\n\n/**\n * @class Members\n */\nexport default class Members extends StatelessWebexPlugin {\n  hostId: any;\n  locusUrl: any;\n  mediaShareContentId: any;\n  mediaShareWhiteboardId: any;\n  membersCollection: any;\n  membersRequest: any;\n  recordingId: any;\n  selfId: any;\n  type: any;\n\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   * @memberof Members\n   */\n  constructor(attrs: any, options: object) {\n    super({}, options);\n    /**\n     * The Members Request object to interact with server\n     * @instance\n     * @type {MembersRequest}\n     * @private\n     * @memberof Members\n     */\n    // @ts-ignore\n    this.membersRequest = new MembersRequest({}, options);\n    /**\n     * The Members Collection cache\n     * @instance\n     * @type {MembersCollection}\n     * @private\n     * @memberof Members\n     */\n    this.membersCollection = new MembersCollection();\n    /**\n     * The current locus url for the active meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n     */\n    this.locusUrl = attrs.locusUrl || null;\n    /**\n     * The current hostId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n     */\n    this.hostId = null;\n    /**\n     * The current type for the meeting, could be MEETING or CALL\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n     */\n    this.type = null;\n    /**\n     * Locus has a self object, sent individually to the client\n     * i.e., each person in the call gets their own self object from locus.\n     * We need to maintain that self object, because we also get information about all the participants\n     * and differentiate those participants from self.\n     * The self id shouldnt ever change, but it does have properties that will change\n     * and we use values in locus-info, such as to determine if i am admitted to the meeting or not as guest.\n     * The current selfId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n     */\n    this.selfId = null;\n    /**\n     * The current mediaShareContentId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n     */\n    this.mediaShareContentId = null;\n    /**\n     * The current mediaShareWhiteboardId for the meeting\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n     */\n    this.mediaShareWhiteboardId = null;\n    /**\n     * The current recordingId for the meeting, if it exists\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof Members\n     */\n    this.recordingId = null;\n  }\n\n  /**\n   * Internal update the self Id value\n   * @param {Object} payload\n   * @param {Object} payload.newSelf\n   * @param {Object} payload.oldSelf\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusSelfUpdate(payload: {newSelf: any; oldSelf: any}) {\n    let newSelfId = null;\n    let oldSelfId = null;\n\n    if (payload) {\n      if (payload.newSelf) {\n        newSelfId = payload.newSelf.id;\n      }\n      if (payload.oldSelf) {\n        oldSelfId = payload.oldSelf.id;\n      }\n    }\n    if (newSelfId) {\n      const theSelf = this.membersCollection.get(newSelfId);\n\n      if (theSelf) {\n        theSelf.setIsSelf(true);\n      }\n    }\n    if (oldSelfId) {\n      const notSelf = this.membersCollection.get(oldSelfId);\n\n      if (notSelf) {\n        notSelf.setIsSelf(false);\n      }\n    }\n    this.selfId = newSelfId;\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusSelfUpdate',\n      },\n      EVENT_TRIGGERS.MEMBERS_SELF_UPDATE,\n      {\n        activeSelfId: newSelfId,\n        endedSelfId: oldSelfId,\n      }\n    );\n  }\n\n  /**\n   * Internal update the hostId value\n   * @param {Object} payload\n   * @param {Object} payload.newHost\n   * @param {Object} payload.oldHost\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusHostUpdate(payload: {newHost: any; oldHost: any}) {\n    let newHostId = null;\n    let oldHostId = null;\n\n    if (payload) {\n      if (payload.newHost) {\n        newHostId = payload.newHost.id;\n      }\n      if (payload.oldHost) {\n        oldHostId = payload.oldHost.id;\n      }\n    }\n    if (newHostId) {\n      const theHost = this.membersCollection.get(newHostId);\n\n      if (theHost) {\n        theHost.setIsHost(true);\n      }\n    }\n    if (oldHostId) {\n      const notHost = this.membersCollection.get(oldHostId);\n\n      if (notHost) {\n        notHost.setIsHost(false);\n      }\n    }\n    this.hostId = newHostId;\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusHostUpdate',\n      },\n      EVENT_TRIGGERS.MEMBERS_HOST_UPDATE,\n      {\n        activeHostId: newHostId,\n        endedHostId: oldHostId,\n      }\n    );\n  }\n\n  /**\n   * when new participant updates come in, both delta and full participants, update them in members collection\n   * delta object in the event will have {updated, added} and full will be the full membersCollection\n   * @param {Object} payload\n   * @param {Object} payload.participants\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusParticipantsUpdate(payload: {participants: object}) {\n    if (payload) {\n      const delta = this.handleLocusInfoUpdatedParticipants(payload);\n      const full = this.handleMembersUpdate(delta); // SDK should propagate the full list for both delta and non delta updates\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'members',\n          function: 'locusParticipantsUpdate',\n        },\n        EVENT_TRIGGERS.MEMBERS_UPDATE,\n        {\n          delta,\n          full,\n        }\n      );\n    }\n  }\n\n  /**\n   * Internal update the content id\n   * @param {Object} payload\n   * @param {Object} payload.current\n   * @param {Object} payload.previous\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusMediaSharesUpdate(payload: {current: any; previous: any}) {\n    const currentContent = payload.current?.content;\n    const previousContent = payload.previous?.content;\n    const currentWhiteboard = payload.current?.whiteboard;\n    const previousWhiteboard = payload.previous?.whiteboard;\n    let whoSharing = null;\n    let whoStopped = null;\n\n    if (currentContent?.beneficiaryId) {\n      if (currentContent.disposition === FLOOR_ACTION.GRANTED) {\n        whoSharing = currentContent.beneficiaryId;\n        this.mediaShareWhiteboardId = null;\n        this.mediaShareContentId = whoSharing;\n      }\n\n      if (previousContent?.disposition === FLOOR_ACTION.GRANTED) {\n        if (currentContent.disposition === FLOOR_ACTION.RELEASED) {\n          whoStopped = currentContent.beneficiaryId;\n          this.mediaShareContentId = null;\n        } else if (\n          currentContent.disposition === FLOOR_ACTION.GRANTED &&\n          currentContent.beneficiaryId !== previousContent.beneficiaryId\n        ) {\n          whoStopped = previousContent.beneficiaryId;\n        }\n      }\n    }\n\n    if (currentWhiteboard?.beneficiaryId) {\n      if (currentWhiteboard.disposition === FLOOR_ACTION.GRANTED) {\n        whoSharing = currentWhiteboard.beneficiaryId;\n        this.mediaShareContentId = null;\n        this.mediaShareWhiteboardId = whoSharing;\n      }\n\n      if (previousWhiteboard?.disposition === FLOOR_ACTION.GRANTED) {\n        if (currentWhiteboard.disposition === FLOOR_ACTION.RELEASED) {\n          whoStopped = currentWhiteboard.beneficiaryId;\n          this.mediaShareWhiteboardId = null;\n        } else if (\n          currentWhiteboard.disposition === FLOOR_ACTION.GRANTED &&\n          currentWhiteboard.beneficiaryId !== previousWhiteboard.beneficiaryId\n        ) {\n          whoStopped = previousWhiteboard.beneficiaryId;\n        }\n      }\n    }\n\n    if (whoSharing) {\n      const shareMember = this.membersCollection.get(whoSharing);\n\n      if (shareMember) {\n        shareMember.setIsContentSharing(true);\n      }\n    }\n    if (whoStopped) {\n      const stopMember = this.membersCollection.get(whoStopped);\n\n      if (stopMember) {\n        stopMember.setIsContentSharing(false);\n      }\n    }\n\n    Trigger.trigger(\n      this,\n      {\n        file: 'members',\n        function: 'locusMediaSharesUpdate',\n      },\n      EVENT_TRIGGERS.MEMBERS_CONTENT_UPDATE,\n      {\n        activeSharingId: whoSharing,\n        endedSharingId: whoStopped,\n      }\n    );\n  }\n\n  /**\n   * Internal update the locus url value\n   * @param {Object} payload\n   * @param {String} payload.locusUrl\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusUrlUpdate(payload: any) {\n    if (payload) {\n      this.setLocusUrl(null, payload);\n    }\n  }\n\n  /**\n   * Internal update the type of meeting\n   * @param {Object} payload\n   * @param {String} payload.type\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  locusFullStateTypeUpdate(payload: {type: string}) {\n    // TODO: at some point there could be a timing issue here, for updating each member\n    // ie., if the type changes AND there is no locus update, then each member will not know the type of call\n    // which means they cannot determine isMutable && isRemovable\n    // for now this scenario is impossible to occur since we always get a locus update when the type changes\n    // except for in delta locus meetings, but in that case, the type will always have been set differently\n    // from the outset anyway\n    if (payload) {\n      this.setType(payload);\n    }\n  }\n\n  /**\n   * sets values in the members collection for updated and added properties from delta\n   * @param {Object} membersUpdate {updated: [], added: []}\n   * @returns {Object} membersCollection\n   * @private\n   * @memberof Members\n   */\n  private handleMembersUpdate(membersUpdate: any) {\n    if (membersUpdate) {\n      if (membersUpdate.updated) {\n        this.constructMembers(membersUpdate.updated);\n      }\n      if (membersUpdate.added) {\n        this.constructMembers(membersUpdate.added);\n      }\n    }\n\n    return this.membersCollection.getAll();\n  }\n\n  /**\n   * set members to the member collection from each updated/added lists as passed in\n   * @param {Array} list\n   * @returns {undefined}\n   * @private\n   * @memberof Members\n   */\n  private constructMembers(list: Array<any>) {\n    list.forEach((member) => {\n      this.membersCollection.set(member.id, member);\n    });\n  }\n\n  /**\n   * Internal update the participants value\n   * @param {Object} payload\n   * @returns {Object}\n   * @private\n   * @memberof Members\n   */\n  private handleLocusInfoUpdatedParticipants(payload: any) {\n    this.hostId = payload.hostId || this.hostId;\n    this.selfId = payload.selfId || this.selfId;\n    this.recordingId = payload.recordingId;\n    if (!payload.participants) {\n      LoggerProxy.logger.warn(\n        'Members:index#handleLocusInfoUpdatedParticipants --> participants payload is missing.'\n      );\n    }\n    const memberUpdate = this.update(payload.participants);\n\n    return memberUpdate;\n  }\n\n  /**\n   * Update the locus Url\n   * @param {Object} locus\n   * @param {String} [locusUrl] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  public setLocusUrl(locus: any, locusUrl: string = null) {\n    if (locusUrl) {\n      this.locusUrl = locusUrl;\n    } else if (locus && (locus.locusUrl || locus.url)) {\n      this.locusUrl = locus.locusUrl || locus.url;\n    } else {\n      throw new ParameterError(\n        'Setting locusUrl for the Members module should be done with a locus object or locusUrl'\n      );\n    }\n  }\n\n  /**\n   * Update the host id\n   * @param {Object} locus\n   * @param {String} [hostId] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  public setHostId(locus: any, hostId: string = null) {\n    if (hostId) {\n      this.hostId = hostId;\n    } else if (locus) {\n      this.hostId = locus && locus.owner && locus.owner.info ? locus.owner.info : null;\n    } else {\n      throw new ParameterError(\n        'Setting hostid for the Members module should be done with a locus object or hostId'\n      );\n    }\n  }\n\n  /**\n   * Update the type\n   * @param {Object} fullState\n   * @param {String} [type] optional, takes precedence\n   * @throws {ParameterError}\n   * @returns {undefined}\n   * @public\n   * @memberof Members\n   */\n  public setType(fullState: any, type: string = null) {\n    if (type) {\n      this.type = type;\n    } else if (fullState) {\n      this.type = (fullState && fullState.type) || null;\n    } else {\n      throw new ParameterError(\n        'Setting type for the Members module should be done with a fullstate object or type string'\n      );\n    }\n  }\n\n  /**\n   * Update the self Id\n   * @param {Object} locus\n   * @param {String} [selfId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setSelfId(locus: any, selfId: string = null) {\n    if (selfId) {\n      this.selfId = selfId;\n    } else if (locus) {\n      this.selfId =\n        locus && locus.self && locus.self.person && locus.self.person.id\n          ? locus.self.person.id\n          : null;\n    } else {\n      throw new ParameterError(\n        'Setting selfid for the Members module should be done with a locus object or selfId'\n      );\n    }\n  }\n\n  /**\n   * Update the media share content id\n   * @param {Object} locus\n   * @param {String} [contentId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setMediaShareContentId(locus: any, contentId?: string) {\n    if (contentId) {\n      this.mediaShareContentId = contentId;\n    } else if (locus) {\n      const contentMediaShare =\n        locus.mediaShares &&\n        locus.mediaShares.length &&\n        locus.mediaShares.find((mediaShare) => mediaShare.name === CONTENT);\n\n      this.mediaShareContentId =\n        (contentMediaShare &&\n          contentMediaShare.floor &&\n          contentMediaShare.floor.beneficiary &&\n          contentMediaShare.floor.beneficiary.id) ||\n        null;\n    } else {\n      throw new ParameterError(\n        'Setting hostid for the Members module should be done with a locus object or hostId'\n      );\n    }\n  }\n\n  /**\n   * Update the media share whiteboard id\n   * @param {Object} locus\n   * @param {String} [whiteboardId] optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setMediaShareWhiteboardId(locus: any, whiteboardId?: string) {\n    if (whiteboardId) {\n      this.mediaShareWhiteboardId = whiteboardId;\n    } else if (locus) {\n      const whiteboardMediaShare =\n        locus.mediaShares &&\n        locus.mediaShares.length &&\n        locus.mediaShares.find((mediaShare) => mediaShare.name === WHITEBOARD);\n\n      this.mediaShareWhiteboardId =\n        (whiteboardMediaShare &&\n          whiteboardMediaShare.floor &&\n          whiteboardMediaShare.floor.beneficiary &&\n          whiteboardMediaShare.floor.beneficiary.id) ||\n        null;\n    } else {\n      throw new ParameterError(\n        'Setting hostid for the Members module should be done with a locus object or hostId'\n      );\n    }\n  }\n\n  /**\n   * Find all the updates, and added members\n   * Removed/left members will end up in updates\n   * Each array contains only members\n   * @param {Array} participants the locus participants\n   * @returns {Object} {added: {Array}, updated: {Array}}\n   * @private\n   * @memberof Members\n   */\n  private update(participants: Array<any>) {\n    const membersUpdate = {added: [], updated: []};\n\n    if (participants) {\n      participants.forEach((participant) => {\n        if (participant.hideInRoster) {\n          return;\n        }\n        const existing = this.membersCollection.get(participant.id);\n\n        if (existing) {\n          // TODO: compare existing member to new participant coming in properties and determine if updated (this helps for non delta events)\n          // on client re renders, but we will have to determine what values to compare to determine difference, premature optimization\n          membersUpdate.updated.push(\n            new Member(participant, {\n              recordingId: this.recordingId,\n              selfId: this.selfId,\n              hostId: this.hostId,\n              contentSharingId: this.mediaShareContentId,\n              whiteboardSharingId: this.mediaShareWhiteboardId,\n              type: this.type,\n            })\n          );\n        } else {\n          membersUpdate.added.push(\n            new Member(participant, {\n              recordingId: this.recordingId,\n              selfId: this.selfId,\n              hostId: this.hostId,\n              contentSharingId: this.mediaShareContentId,\n              whiteboardSharingId: this.mediaShareWhiteboardId,\n              type: this.type,\n            })\n          );\n        }\n      });\n    }\n\n    return membersUpdate;\n  }\n\n  /**\n   * Adds a guest Member to the associated meeting\n   * @param {String} invitee\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise}\n   * @memberof Members\n   */\n  addMember(invitee: any, alertIfActive?: boolean) {\n    if (!this.locusUrl) {\n      return Promise.reject(\n        new ParameterError('The associated locus url for this meeting object must be defined.')\n      );\n    }\n    if (MembersUtil.isInvalidInvitee(invitee)) {\n      return Promise.reject(\n        new ParameterError(\n          'The invitee must be defined with either a valid email, emailAddress or phoneNumber property.'\n        )\n      );\n    }\n    const options = MembersUtil.generateAddMemberOptions(invitee, this.locusUrl, alertIfActive);\n\n    return this.membersRequest.addMembers(options);\n  }\n\n  /**\n   * Cancels an outgoing PSTN call to the associated meeting\n   * @param {String} invitee\n   * @returns {Promise}\n   * @memberof Members\n   */\n  cancelPhoneInvite(invitee: any) {\n    if (!this.locusUrl) {\n      return Promise.reject(\n        new ParameterError('The associated locus url for this meeting object must be defined.')\n      );\n    }\n    if (MembersUtil.isInvalidInvitee(invitee)) {\n      return Promise.reject(\n        new ParameterError('The invitee must be defined with a valid phoneNumber property.')\n      );\n    }\n    const options = MembersUtil.cancelPhoneInviteOptions(invitee, this.locusUrl);\n\n    return this.membersRequest.cancelPhoneInvite(options);\n  }\n\n  /**\n   * Admits waiting members (invited guests to meeting)\n   * @param {Array} memberIds\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  public admitMembers(memberIds: Array<any>) {\n    if (isEmpty(memberIds)) {\n      return Promise.reject(new ParameterError('No member ids provided to admit.'));\n    }\n    const options = MembersUtil.generateAdmitMemberOptions(memberIds, this.locusUrl);\n\n    return this.membersRequest.admitMember(options);\n  }\n\n  /**\n   * Removes a member from the meeting\n   * @param {String} memberId\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  public removeMember(memberId: string) {\n    if (!this.locusUrl) {\n      return Promise.reject(\n        new ParameterError('The associated locus url for this meeting object must be defined.')\n      );\n    }\n    if (!memberId) {\n      return Promise.reject(\n        new ParameterError('The member id must be defined to remove the member.')\n      );\n    }\n    const options = MembersUtil.generateRemoveMemberOptions(memberId, this.locusUrl);\n\n    return this.membersRequest.removeMember(options);\n  }\n\n  /**\n   * Audio mutes another member in a meeting\n   * @param {String} memberId\n   * @param {boolean} [mute] default true\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  public muteMember(memberId: string, mute = true) {\n    if (!this.locusUrl) {\n      return Promise.reject(\n        new ParameterError(\n          'The associated locus url for this meetings members object must be defined.'\n        )\n      );\n    }\n    if (!memberId) {\n      return Promise.reject(\n        new ParameterError('The member id must be defined to mute the member.')\n      );\n    }\n    const options = MembersUtil.generateMuteMemberOptions(memberId, mute, this.locusUrl);\n\n    return this.membersRequest.muteMember(options);\n  }\n\n  /**\n   * Raise or lower the hand of a member in a meeting\n   * @param {String} memberId\n   * @param {boolean} [raise] - to raise hand (=true) or lower (=false), default: true\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  public raiseOrLowerHand(memberId: string, raise = true) {\n    if (!this.locusUrl) {\n      return Promise.reject(\n        new ParameterError(\n          'The associated locus url for this meetings members object must be defined.'\n        )\n      );\n    }\n    if (!memberId) {\n      return Promise.reject(\n        new ParameterError('The member id must be defined to raise/lower the hand of the member.')\n      );\n    }\n    const options = MembersUtil.generateRaiseHandMemberOptions(memberId, raise, this.locusUrl);\n\n    return this.membersRequest.raiseOrLowerHandMember(options);\n  }\n\n  /**\n   * Lower all hands of members in a meeting\n   * @param {String} requestingMemberId - id of the participant which requested the lower all hands\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  public lowerAllHands(requestingMemberId: string) {\n    if (!this.locusUrl) {\n      return Promise.reject(\n        new ParameterError(\n          'The associated locus url for this meetings members object must be defined.'\n        )\n      );\n    }\n    if (!requestingMemberId) {\n      return Promise.reject(\n        new ParameterError(\n          'The requestingMemberId must be defined to lower all hands in a meeting.'\n        )\n      );\n    }\n    const options = MembersUtil.generateLowerAllHandsMemberOptions(\n      requestingMemberId,\n      this.locusUrl\n    );\n\n    return this.membersRequest.lowerAllHandsMember(options);\n  }\n\n  /**\n   * Transfers the host to another member\n   * @param {String} memberId\n   * @param {boolean} [moderator] default true\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  public transferHostToMember(memberId: string, moderator = true) {\n    if (!this.locusUrl) {\n      return Promise.reject(\n        new ParameterError(\n          'The associated locus url for this meetings members object must be defined.'\n        )\n      );\n    }\n    if (!memberId) {\n      return Promise.reject(\n        new ParameterError('The member id must be defined to transfer host to the member.')\n      );\n    }\n    const options = MembersUtil.generateTransferHostMemberOptions(\n      memberId,\n      moderator,\n      this.locusUrl\n    );\n\n    return this.membersRequest.transferHostToMember(options);\n  }\n\n  /**\n   * Sends DTMF tones for the PSTN member of a meeting\n   * @param {String} tones a string of one or more DTMF tones to send\n   * @param {String} memberId member id\n   * @returns {Promise}\n   * @public\n   * @memberof Members\n   */\n  public sendDialPadKey(tones = '', memberId = '') {\n    // @ts-ignore\n    if (!tones && tones !== 0) {\n      return Promise.reject(new ParameterError('DMTF tones must be passed in'));\n    }\n\n    const member = this.membersCollection.get(memberId);\n\n    if (!member) {\n      return Promise.reject(new ParameterError('there is no member associated with that Id'));\n    }\n\n    const {locusUrl} = this;\n\n    const deviceArray = member.participant.devices;\n    const device = deviceArray.find(({deviceType}) => deviceType === 'SIP');\n    const url = device?.url;\n\n    if (locusUrl && url) {\n      const options = MembersUtil.genderateSendDTMFOptions(url, tones, memberId, locusUrl);\n\n      return this.membersRequest.sendDialPadKey(options);\n    }\n\n    return Promise.reject(\n      new Error(\n        'Members:index#sendDialPadKey --> cannot send DTMF, meeting does not have a connection to the \"locus\" call control service.'\n      )\n    );\n  }\n}\n"],"mappings":"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"}