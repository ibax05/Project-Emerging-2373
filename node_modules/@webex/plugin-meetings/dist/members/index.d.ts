import { StatelessWebexPlugin } from '@webex/webex-core';
/**
 * Members Update Event
 * Emitted when something in the roster list needs to be updated
 * @event members:update
 * @instance
 * @property {Object} delta the changes to the members list
 * @property {Array} delta.updated array only the updates, includes removals, as they will have updated status and member properties
 * @property {Array} delta.added array added members to the meeting
 * @property {Array} full array the full members collection
 * @memberof Members
 */
/**
 * Members Content Update Event
 * Emitted when who is sharing changes
 * @event members:content:update
 * @instance
 * @property {String} activeContentSharingId
 * @property {String} endedContentSharingId
 * @memberof Members
 */
/**
 * Members Host Update Event
 * Emitted when who is the host changes
 * @event members:host:update
 * @instance
 * @property {String} activeHostId
 * @property {String} endedHostId
 * @memberof Members
 */
/**
 * Members Self Update Event
 * Emitted when who is the self changes
 * @event members:self:update
 * @instance
 * @property {String} activeSelfId
 * @property {String} endedSelfId
 * @memberof Members
 */
/**
 * @class Members
 */
export default class Members extends StatelessWebexPlugin {
    hostId: any;
    locusUrl: any;
    mediaShareContentId: any;
    mediaShareWhiteboardId: any;
    membersCollection: any;
    membersRequest: any;
    recordingId: any;
    selfId: any;
    type: any;
    namespace: string;
    /**
     *
     * @param {Object} attrs
     * @param {Object} options
     * @memberof Members
     */
    constructor(attrs: any, options: object);
    /**
     * Internal update the self Id value
     * @param {Object} payload
     * @param {Object} payload.newSelf
     * @param {Object} payload.oldSelf
     * @returns {undefined}
     * @private
     * @memberof Members
     */
    locusSelfUpdate(payload: {
        newSelf: any;
        oldSelf: any;
    }): void;
    /**
     * Internal update the hostId value
     * @param {Object} payload
     * @param {Object} payload.newHost
     * @param {Object} payload.oldHost
     * @returns {undefined}
     * @private
     * @memberof Members
     */
    locusHostUpdate(payload: {
        newHost: any;
        oldHost: any;
    }): void;
    /**
     * when new participant updates come in, both delta and full participants, update them in members collection
     * delta object in the event will have {updated, added} and full will be the full membersCollection
     * @param {Object} payload
     * @param {Object} payload.participants
     * @returns {undefined}
     * @private
     * @memberof Members
     */
    locusParticipantsUpdate(payload: {
        participants: object;
    }): void;
    /**
     * Internal update the content id
     * @param {Object} payload
     * @param {Object} payload.current
     * @param {Object} payload.previous
     * @returns {undefined}
     * @private
     * @memberof Members
     */
    locusMediaSharesUpdate(payload: {
        current: any;
        previous: any;
    }): void;
    /**
     * Internal update the locus url value
     * @param {Object} payload
     * @param {String} payload.locusUrl
     * @returns {undefined}
     * @private
     * @memberof Members
     */
    locusUrlUpdate(payload: any): void;
    /**
     * Internal update the type of meeting
     * @param {Object} payload
     * @param {String} payload.type
     * @returns {undefined}
     * @private
     * @memberof Members
     */
    locusFullStateTypeUpdate(payload: {
        type: string;
    }): void;
    /**
     * sets values in the members collection for updated and added properties from delta
     * @param {Object} membersUpdate {updated: [], added: []}
     * @returns {Object} membersCollection
     * @private
     * @memberof Members
     */
    private handleMembersUpdate;
    /**
     * set members to the member collection from each updated/added lists as passed in
     * @param {Array} list
     * @returns {undefined}
     * @private
     * @memberof Members
     */
    private constructMembers;
    /**
     * Internal update the participants value
     * @param {Object} payload
     * @returns {Object}
     * @private
     * @memberof Members
     */
    private handleLocusInfoUpdatedParticipants;
    /**
     * Update the locus Url
     * @param {Object} locus
     * @param {String} [locusUrl] optional, takes precedence
     * @throws {ParameterError}
     * @returns {undefined}
     * @public
     * @memberof Members
     */
    setLocusUrl(locus: any, locusUrl?: string): void;
    /**
     * Update the host id
     * @param {Object} locus
     * @param {String} [hostId] optional, takes precedence
     * @throws {ParameterError}
     * @returns {undefined}
     * @public
     * @memberof Members
     */
    setHostId(locus: any, hostId?: string): void;
    /**
     * Update the type
     * @param {Object} fullState
     * @param {String} [type] optional, takes precedence
     * @throws {ParameterError}
     * @returns {undefined}
     * @public
     * @memberof Members
     */
    setType(fullState: any, type?: string): void;
    /**
     * Update the self Id
     * @param {Object} locus
     * @param {String} [selfId] optional, takes precedence
     * @throws {Error}
     * @returns {undefined}
     * @memberof Members
     */
    setSelfId(locus: any, selfId?: string): void;
    /**
     * Update the media share content id
     * @param {Object} locus
     * @param {String} [contentId] optional, takes precedence
     * @throws {Error}
     * @returns {undefined}
     * @memberof Members
     */
    setMediaShareContentId(locus: any, contentId?: string): void;
    /**
     * Update the media share whiteboard id
     * @param {Object} locus
     * @param {String} [whiteboardId] optional, takes precedence
     * @throws {Error}
     * @returns {undefined}
     * @memberof Members
     */
    setMediaShareWhiteboardId(locus: any, whiteboardId?: string): void;
    /**
     * Find all the updates, and added members
     * Removed/left members will end up in updates
     * Each array contains only members
     * @param {Array} participants the locus participants
     * @returns {Object} {added: {Array}, updated: {Array}}
     * @private
     * @memberof Members
     */
    private update;
    /**
     * Adds a guest Member to the associated meeting
     * @param {String} invitee
     * @param {Boolean} [alertIfActive]
     * @returns {Promise}
     * @memberof Members
     */
    addMember(invitee: any, alertIfActive?: boolean): any;
    /**
     * Cancels an outgoing PSTN call to the associated meeting
     * @param {String} invitee
     * @returns {Promise}
     * @memberof Members
     */
    cancelPhoneInvite(invitee: any): any;
    /**
     * Admits waiting members (invited guests to meeting)
     * @param {Array} memberIds
     * @returns {Promise}
     * @public
     * @memberof Members
     */
    admitMembers(memberIds: Array<any>): any;
    /**
     * Removes a member from the meeting
     * @param {String} memberId
     * @returns {Promise}
     * @public
     * @memberof Members
     */
    removeMember(memberId: string): any;
    /**
     * Audio mutes another member in a meeting
     * @param {String} memberId
     * @param {boolean} [mute] default true
     * @returns {Promise}
     * @public
     * @memberof Members
     */
    muteMember(memberId: string, mute?: boolean): any;
    /**
     * Raise or lower the hand of a member in a meeting
     * @param {String} memberId
     * @param {boolean} [raise] - to raise hand (=true) or lower (=false), default: true
     * @returns {Promise}
     * @public
     * @memberof Members
     */
    raiseOrLowerHand(memberId: string, raise?: boolean): any;
    /**
     * Lower all hands of members in a meeting
     * @param {String} requestingMemberId - id of the participant which requested the lower all hands
     * @returns {Promise}
     * @public
     * @memberof Members
     */
    lowerAllHands(requestingMemberId: string): any;
    /**
     * Transfers the host to another member
     * @param {String} memberId
     * @param {boolean} [moderator] default true
     * @returns {Promise}
     * @public
     * @memberof Members
     */
    transferHostToMember(memberId: string, moderator?: boolean): any;
    /**
     * Sends DTMF tones for the PSTN member of a meeting
     * @param {String} tones a string of one or more DTMF tones to send
     * @param {String} memberId member id
     * @returns {Promise}
     * @public
     * @memberof Members
     */
    sendDialPadKey(tones?: string, memberId?: string): any;
}
