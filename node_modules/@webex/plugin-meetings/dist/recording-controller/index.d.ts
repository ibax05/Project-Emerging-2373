import MeetingRequest from '../meeting/request';
/**
 * @description Recording manages the recording functionality of the meeting object, there should only be one instantation of recording per meeting
 * @export
 * @private
 * @class Recording
 */
export default class RecordingController {
    /**
     * @instance
     * @type {MeetingRequest}
     * @private
     * @memberof RecordingController
     */
    private request;
    /**
     * @instance
     * @type {Array}
     * @private
     * @memberof RecordingInfo
     */
    private displayHints;
    /**
     * @instance
     * @type {string}
     * @private
     * @memberof RecordingInfo
     */
    private serviceUrl;
    /**
     * @instance
     * @type {string}
     * @private
     * @memberof RecordingInfo
     */
    private sessionId;
    /**
     * @instance
     * @type {string}
     * @private
     * @memberof RecordingInfo
     */
    private locusUrl;
    /**
     * @instance
     * @type {string}
     * @private
     * @memberof RecordingInfo
     */
    private locusId;
    /**
     * @param {MeetingRequest} request
     * @param {Object} options
     * @constructor
     * @memberof RecordingController
     */
    constructor(request: MeetingRequest, options?: {
        serviceUrl?: string;
        sessionId: string;
        locusUrl: string;
        displayHints?: Array<string>;
    });
    /**
     * @param {MeetingRequest} request
     * @param {LocusInfo} info
     * @returns {void}
     * @private
     * @memberof RecordingController
     */
    private initialize;
    /**
     * @param {Object} options
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
    set(options?: {
        serviceUrl?: string;
        sessionId: string;
        locusUrl: string;
        displayHints?: Array<string>;
    }): void;
    /**
     * @param {string} url
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
    setLocusUrl(url: string): void;
    /**
     * @param {Array} hints
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
    setDisplayHints(hints: Array<string>): void;
    /**
     * @param {string} id
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
    setSessionId(id: string): void;
    /**
     * @param {string} url
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
    setServiceUrl(url: string): void;
    /**
     * @returns {string}
     * @public
     * @memberof RecordingController
     */
    getLocusUrl(): string;
    /**
     * @returns {string}
     * @public
     * @memberof RecordingController
     */
    getLocusId(): string;
    /**
     * @returns {string}
     * @public
     * @memberof RecordingController
     */
    getSessionId(): string;
    /**
     * @returns {string}
     * @public
     * @memberof RecordingController
     */
    getServiceUrl(): string;
    /**
     * @returns {Array}
     * @public
     * @memberof RecordingController
     */
    getDisplayHints(): string[];
    /**
     * @param {Object} options
     * @returns {void}
     * @private
     * @memberof RecordingController
     */
    private extract;
    /**
     * @param {RecordingAction} action
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
    private recordingService;
    /**
     * @param {RecordingAction} action
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
    private recordingControls;
    /**
     * @param {RecordingAction} action
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
    private recordingFacade;
    /**
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
    startRecording(): Promise<any>;
    /**
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
    stopRecording(): Promise<any>;
    /**
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
    pauseRecording(): Promise<any>;
    /**
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
    resumeRecording(): Promise<any>;
}
