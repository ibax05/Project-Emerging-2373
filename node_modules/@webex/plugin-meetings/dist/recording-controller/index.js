"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var _permission = _interopRequireDefault(require("../common/errors/permission"));
var _constants = require("../constants");
var _enums = _interopRequireDefault(require("./enums"));
var _util = _interopRequireDefault(require("./util"));
var _loggerProxy = _interopRequireDefault(require("../common/logs/logger-proxy"));
/**
 * @description Recording manages the recording functionality of the meeting object, there should only be one instantation of recording per meeting
 * @export
 * @private
 * @class Recording
 */
var RecordingController = /*#__PURE__*/function () {
  /**
   * @instance
   * @type {MeetingRequest}
   * @private
   * @memberof RecordingController
   */

  /**
   * @instance
   * @type {Array}
   * @private
   * @memberof RecordingInfo
   */

  /**
   * @instance
   * @type {string}
   * @private
   * @memberof RecordingInfo
   */

  /**
   * @instance
   * @type {string}
   * @private
   * @memberof RecordingInfo
   */

  /**
   * @instance
   * @type {string}
   * @private
   * @memberof RecordingInfo
   */

  /**
   * @instance
   * @type {string}
   * @private
   * @memberof RecordingInfo
   */

  /**
   * @param {MeetingRequest} request
   * @param {Object} options
   * @constructor
   * @memberof RecordingController
   */
  function RecordingController(request, options) {
    (0, _classCallCheck2.default)(this, RecordingController);
    (0, _defineProperty2.default)(this, "request", void 0);
    (0, _defineProperty2.default)(this, "displayHints", []);
    (0, _defineProperty2.default)(this, "serviceUrl", void 0);
    (0, _defineProperty2.default)(this, "sessionId", void 0);
    (0, _defineProperty2.default)(this, "locusUrl", void 0);
    (0, _defineProperty2.default)(this, "locusId", void 0);
    this.initialize(request);
    this.set(options);
  }

  /**
   * @param {MeetingRequest} request
   * @param {LocusInfo} info
   * @returns {void}
   * @private
   * @memberof RecordingController
   */
  (0, _createClass2.default)(RecordingController, [{
    key: "initialize",
    value: function initialize(request) {
      this.request = request;
    }

    /**
     * @param {Object} options
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "set",
    value: function set(options) {
      this.extract(options);
    }

    /**
     * @param {string} url
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "setLocusUrl",
    value: function setLocusUrl(url) {
      this.locusUrl = url;
      this.locusId = _util.default.extractLocusId(this.locusUrl);
    }

    /**
     * @param {Array} hints
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "setDisplayHints",
    value: function setDisplayHints(hints) {
      this.displayHints = hints;
    }

    /**
     * @param {string} id
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "setSessionId",
    value: function setSessionId(id) {
      this.sessionId = id;
    }

    /**
     * @param {string} url
     * @returns {void}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "setServiceUrl",
    value: function setServiceUrl(url) {
      this.serviceUrl = url;
    }

    /**
     * @returns {string}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "getLocusUrl",
    value: function getLocusUrl() {
      return this.locusUrl;
    }

    /**
     * @returns {string}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "getLocusId",
    value: function getLocusId() {
      return this.locusId;
    }

    /**
     * @returns {string}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "getSessionId",
    value: function getSessionId() {
      return this.sessionId;
    }

    /**
     * @returns {string}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "getServiceUrl",
    value: function getServiceUrl() {
      return this.serviceUrl;
    }

    /**
     * @returns {Array}
     * @public
     * @memberof RecordingController
     */
  }, {
    key: "getDisplayHints",
    value: function getDisplayHints() {
      return this.displayHints;
    }

    /**
     * @param {Object} options
     * @returns {void}
     * @private
     * @memberof RecordingController
     */
  }, {
    key: "extract",
    value: function extract(options) {
      this.setServiceUrl(options === null || options === void 0 ? void 0 : options.serviceUrl);
      this.setSessionId(options === null || options === void 0 ? void 0 : options.sessionId);
      this.setDisplayHints(options === null || options === void 0 ? void 0 : options.displayHints);
      this.setLocusUrl(options === null || options === void 0 ? void 0 : options.locusUrl);
    }

    /**
     * @param {RecordingAction} action
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
  }, {
    key: "recordingService",
    value: function recordingService(action) {
      // @ts-ignore
      return this.request.request({
        body: {
          meetingInfo: {
            locusSessionId: this.sessionId
          },
          recording: {
            action: action.toLowerCase()
          }
        },
        uri: "".concat(this.serviceUrl, "/loci/").concat(this.locusId, "/recording"),
        method: _constants.HTTP_VERBS.PUT
      });
    }

    /**
     * @param {RecordingAction} action
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
  }, {
    key: "recordingControls",
    value: function recordingControls(action) {
      var record = _util.default.deriveRecordingStates(action);
      _loggerProxy.default.logger.log("RecordingController:index#recordingControls --> ".concat(record));

      // @ts-ignore
      return this.request.request({
        uri: "".concat(this.locusUrl, "/").concat(_constants.CONTROLS),
        body: {
          record: record
        },
        method: _constants.HTTP_VERBS.PATCH
      });
    }

    /**
     * @param {RecordingAction} action
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
  }, {
    key: "recordingFacade",
    value: function recordingFacade(action) {
      _loggerProxy.default.logger.log("RecordingController:index#recordingFacade --> recording action [".concat(action, "]"));

      // assumes action is proper cased (i.e., Example)
      if (_util.default !== null && _util.default !== void 0 && _util.default["canUser".concat(action)](this.displayHints)) {
        if (this.serviceUrl) {
          return this.recordingService(action);
        }
        return this.recordingControls(action);
      }
      return _promise.default.reject(new _permission.default("".concat(action, " recording not allowed, due to moderator property.")));
    }

    /**
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
  }, {
    key: "startRecording",
    value: function startRecording() {
      return this.recordingFacade(_enums.default.Start);
    }

    /**
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
  }, {
    key: "stopRecording",
    value: function stopRecording() {
      return this.recordingFacade(_enums.default.Stop);
    }

    /**
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
  }, {
    key: "pauseRecording",
    value: function pauseRecording() {
      return this.recordingFacade(_enums.default.Pause);
    }

    /**
     * @private
     * @memberof RecordingController
     * @returns {Promise}
     */
  }, {
    key: "resumeRecording",
    value: function resumeRecording() {
      return this.recordingFacade(_enums.default.Resume);
    }
  }]);
  return RecordingController;
}();
exports.default = RecordingController;
//# sourceMappingURL=index.js.map
