"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint-disable max-nested-callbacks */

/* istanbul ignore next */
if (typeof _promise.default === 'undefined') {
  // eslint-disable-next-line global-require
  require('es6-promise').polyfill();
}
var backoffPattern = [0, 1000, 2000, 4000, 8000, 16000, 32000, 32000, 32000];

/**
 * @param {Function} fn
 * @returns {Object}
 */
function retry(fn) {
  return backoffPattern.reduce(function (promise, delay) {
    return promise.catch(function (err) {
      return new _promise.default(function (resolve) {
        if (err) {
          console.error("###Test error: ".concat(err, ". Retrying test in ").concat(delay, " seconds"));
        }
        setTimeout(function () {
          resolve(fn());
        }, delay);
      });
    });
  }, _promise.default.reject());
}

/**
 * Determines the expected timeout for the test.
 * @param {number} estimate estimated of how long a single attempt should take
 * @returns {number}
 */
function timeout(estimate) {
  return backoffPattern.reduce(function (sum, next) {
    return sum + next + estimate;
  }, 0);
}
module.exports = retry;
retry.timeout = timeout;
//# sourceMappingURL=index.js.map
