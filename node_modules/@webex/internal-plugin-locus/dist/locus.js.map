{"version":3,"names":["_webexCore","require","_uuid","_interopRequireDefault","_createForOfIteratorHelper","o","allowArrayLike","it","_Symbol","_Symbol$iterator","_Array$isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","_Array$from","test","arr","len","arr2","Array","USE_INCOMING","exports","USE_CURRENT","EQUAL","FETCH","GREATER_THAN","LESS_THAN","DESYNC","compareToAction","result","Error","concat","Locus","WebexPlugin","extend","namespace","alert","locus","request","method","uri","url","body","deviceUrl","webex","internal","device","sequence","then","res","compare","current","incoming","isEmpty","entries","rangeStart","rangeEnd","baseSequence","compareDelta","compareSequence","ret","getEntriesFirstValue","_memoize2","default","_first2","getEntriesLastValue","_last2","getCompareFirstValue","getCompareLastValue","inRange","entry","currentOnlyEntries","_difference2","incomingOnlyEntries","currentOnly","incomingOnly","_iterator","_step","push","_iterator2","_step2","_i","_currentOnly","_i2","_incomingOnly","create","invitee","options","arguments","undefined","correlationId","service","resource","localMedias","localSdp","_stringify","type","sdp","self","devices","map","item","index","mediaConnections","createOrJoin","target","join","decline","_this","catch","reason","WebexHttpError","Conflict","get","_promise","reject","getCallHistory","from","Date","_now","toISOString","qs","leave","_this2","list","loci","merge","_cloneDeep2","_keys","forEach","key","participants","toRemove","_set","toUpsert","_map","p","removed","add","set","reduce","acc","has","_values","releaseFloorGrant","share","floor","disposition","_ref","requestFloorGrant","beneficiary","_ref2","sendDtmf","tones","dtmf","uuid","v4","sync","syncUrl","updateMedia","_ref3","audioMuted","videoMuted","mediaId","version","_default"],"sources":["locus.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, WebexHttpError} from '@webex/webex-core';\nimport {cloneDeep, difference, first, last, memoize} from 'lodash';\nimport uuid from 'uuid';\n\nexport const USE_INCOMING = 'USE_INCOMING';\nexport const USE_CURRENT = 'USE_CURRENT';\nexport const EQUAL = 'EQUAL';\nexport const FETCH = 'FETCH';\nexport const GREATER_THAN = 'GREATER_THAN';\nexport const LESS_THAN = 'LESS_THAN';\nexport const DESYNC = 'DESYNC';\n\n/**\n * Transates the result of a sequence comparison into an intended behavior\n * @param {string} result\n * @private\n * @returns {string}\n */\nfunction compareToAction(result) {\n  switch (result) {\n    case EQUAL:\n    case GREATER_THAN:\n      return USE_CURRENT;\n    case LESS_THAN:\n      return USE_INCOMING;\n    case DESYNC:\n      return FETCH;\n    default:\n      throw new Error(`${result} is not a recognized sequence comparison result`);\n  }\n}\n\n/**\n * @class\n */\nconst Locus = WebexPlugin.extend({\n  namespace: 'Locus',\n\n  /**\n   * Alert the specified locus that the local user has been notified of the\n   * locus's active state\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise}\n   */\n  alert(locus) {\n    return this.request({\n      method: 'PUT',\n      uri: `${locus.url}/participant/alert`,\n      body: {\n        deviceUrl: this.webex.internal.device.url,\n        sequence: locus.sequence,\n      },\n    }).then((res) => res.body);\n  },\n\n  /**\n   * Compares two loci to determine which one contains the most recent state\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @returns {string} one of USE_INCOMING, USE_CURRENT, or FETCH\n   */\n  compare(current, incoming) {\n    /**\n     * Determines if a paricular locus's sequence is empty\n     * @param {Types~Locus} locus\n     * @private\n     * @returns {bool}\n     */\n    function isEmpty(locus) {\n      const {sequence} = locus;\n\n      return (\n        (!sequence.entries || !sequence.entries.length) &&\n        sequence.rangeStart === 0 &&\n        sequence.rangeEnd === 0\n      );\n    }\n\n    if (isEmpty(current) || isEmpty(incoming)) {\n      return USE_INCOMING;\n    }\n\n    if (incoming.baseSequence) {\n      return this.compareDelta(current, incoming);\n    }\n\n    return compareToAction(this.compareSequence(current.sequence, incoming.sequence));\n  },\n\n  /**\n   * Compares two loci sequences (with delta params) and indicates what action\n   * to take.\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} current\n   * @param {Types~Locus} incoming\n   * @private\n   * @returns {string} one of USE_INCOMING, USE_CURRENT, or FETCH\n   */\n  compareDelta(current, incoming) {\n    let ret = this.compareSequence(current.sequence, incoming.sequence);\n\n    if (ret !== LESS_THAN) {\n      return compareToAction(ret);\n    }\n\n    ret = this.compareSequence(current.sequence, incoming.baseSequence);\n\n    switch (ret) {\n      case GREATER_THAN:\n      case EQUAL:\n        return USE_INCOMING;\n      default:\n        return FETCH;\n    }\n  },\n\n  /**\n   * Compares two Locus sequences\n   * @instance\n   * @memberof Locus\n   * @param {LocusSequence} current\n   * @param {LocusSequence} incoming\n   * @returns {string} one of LESS_THAN, GREATER_THAN, EQUAL, or DESYNC\n   */\n  compareSequence(current, incoming) {\n    if (!current) {\n      throw new Error('`current` is required');\n    }\n\n    if (!incoming) {\n      throw new Error('`incoming` is required');\n    }\n    // complexity here is unavoidable\n    /* eslint complexity: [0] */\n    /* eslint max-statements: [0] */\n\n    // must pick one of arrow-body-style or no-confusing-arrow to disable\n    /* eslint arrow-body-style: [0] */\n\n    // after running the #compare() test suite in a loop, there doesn't seem to\n    // be any appreciable difference when used with or without memoize; since\n    // real locus sequences are likely to contain more sequence numbers than\n    // those in the test suite, I have to assume memoize can only help and the\n    // overhead of memoizing these methods is not a problem.\n\n    const getEntriesFirstValue = memoize((sequence) => {\n      return sequence.entries.length === 0 ? 0 : first(sequence.entries);\n    });\n    const getEntriesLastValue = memoize((sequence) => {\n      return sequence.entries.length === 0 ? 0 : last(sequence.entries);\n    });\n    const getCompareFirstValue = memoize((sequence) => {\n      return sequence.rangeStart || getEntriesFirstValue(sequence);\n    });\n    const getCompareLastValue = memoize((sequence) => {\n      return getEntriesLastValue(sequence) || sequence.rangeEnd;\n    });\n\n    /**\n     * @param {number} entry\n     * @param {LocusSequence} sequence\n     * @private\n     * @returns {Boolean}\n     */\n    function inRange(entry, sequence) {\n      return entry >= sequence.rangeStart && entry <= sequence.rangeEnd;\n    }\n\n    if (getCompareFirstValue(current) > getCompareLastValue(incoming)) {\n      return GREATER_THAN;\n    }\n\n    if (getCompareLastValue(current) < getCompareFirstValue(incoming)) {\n      return LESS_THAN;\n    }\n\n    const currentOnlyEntries = difference(current.entries, incoming.entries);\n    const incomingOnlyEntries = difference(incoming.entries, current.entries);\n    const currentOnly = [];\n    const incomingOnly = [];\n\n    for (const i of currentOnlyEntries) {\n      if (!inRange(i, incoming)) {\n        currentOnly.push(i);\n      }\n    }\n    for (const i of incomingOnlyEntries) {\n      if (!inRange(i, current)) {\n        incomingOnly.push(i);\n      }\n    }\n\n    if (!currentOnly.length && !incomingOnly.length) {\n      if (\n        current.rangeEnd - getCompareFirstValue(current) >\n        incoming.rangeEnd - getCompareFirstValue(incoming)\n      ) {\n        return GREATER_THAN;\n      }\n\n      if (\n        current.rangeEnd - getCompareFirstValue(current) <\n        incoming.rangeEnd - getCompareFirstValue(incoming)\n      ) {\n        return LESS_THAN;\n      }\n\n      return EQUAL;\n    }\n\n    if (currentOnly.length && !incomingOnly.length) {\n      return GREATER_THAN;\n    }\n\n    if (!currentOnly.length && incomingOnly.length) {\n      return LESS_THAN;\n    }\n\n    if (!current.rangeStart && !current.rangeEnd && !incoming.rangeStart && !incoming.rangeEnd) {\n      return DESYNC;\n    }\n\n    for (const i of currentOnly) {\n      if (getCompareFirstValue(incoming) < i && i < getCompareLastValue(incoming)) {\n        return DESYNC;\n      }\n    }\n\n    for (const i of incomingOnly) {\n      if (getCompareFirstValue(current) < i && i < getCompareLastValue(current)) {\n        return DESYNC;\n      }\n    }\n\n    if (currentOnly[0] > incomingOnly[0]) {\n      return GREATER_THAN;\n    }\n\n    return LESS_THAN;\n  },\n\n  /**\n   * Calls the specified invitee and offers the specified media via\n   * options.localSdp\n   * @instance\n   * @memberof Locus\n   * @param {string} invitee\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Promise<Types~Locus>}\n   */\n  create(invitee, options = {}) {\n    const {correlationId} = options;\n\n    if (!correlationId) {\n      throw new Error('options.correlationId is required');\n    }\n\n    return (\n      this.request({\n        method: 'POST',\n        service: 'locus',\n        resource: 'loci/call',\n        body: {\n          correlationId,\n          deviceUrl: this.webex.internal.device.url,\n          invitee: {\n            invitee,\n          },\n          localMedias: [\n            {\n              localSdp: JSON.stringify({\n                type: 'SDP',\n                sdp: options.localSdp,\n              }),\n            },\n          ],\n          sequence: {\n            entries: [],\n            rangeStart: 0,\n            rangeEnd: 0,\n          },\n        },\n      })\n        // res.body.mediaConnections is deprecated so just return the locus\n        .then((res) => {\n          res.body.locus.self.devices.map((item, index) => {\n            item.mediaConnections = [res.body.mediaConnections[index]];\n\n            return item;\n          });\n\n          return res.body.locus;\n        })\n    );\n  },\n\n  /**\n   * This is mostly an internal function to simplify the phone plugin. Decides\n   * which path to call based on the type of the thing being joined.\n   * @instance\n   * @memberof Locus\n   * @param {Object|Types~Locus} target\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Types~Locus>}\n   */\n  createOrJoin(target, options) {\n    if (target.url) {\n      return this.join(target, options);\n    }\n\n    return this.create(target, options);\n  },\n\n  /**\n   * Decline to join the specified Locus\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  decline(locus) {\n    return this.request({\n      method: 'PUT',\n      uri: `${locus.url}/participant/decline`,\n      body: {\n        deviceUrl: this.webex.internal.device.url,\n        sequence: locus.sequence,\n      },\n    })\n      .then((res) => res.body)\n      .catch((reason) => {\n        if (reason instanceof WebexHttpError.Conflict) {\n          return this.get(locus);\n        }\n\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Retrieves a single Locus\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Types~Locus}\n   */\n  get(locus) {\n    return this.request({\n      method: 'GET',\n      uri: `${locus.url}`,\n    }).then((res) => res.body);\n  },\n\n  /**\n   * Retrieves the call history for the current user\n   * @instance\n   * @memberof Locus\n   * @param {Object} options\n   * @param {Date|number} options.from\n   * @returns {Promise<Object>}\n   */\n  getCallHistory(options = {}) {\n    const from = new Date(options.from || Date.now()).toISOString();\n\n    return this.request({\n      method: 'GET',\n      service: 'janus',\n      resource: 'history/userSessions',\n      qs: {from},\n    }).then((res) => res.body);\n  },\n\n  /**\n   * Join the specified Locus and offer to send it media\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {Object} options.localSdp\n   * @returns {Types~Locus}\n   */\n  join(locus, options = {}) {\n    const correlationId = locus.correlationId || options.correlationId;\n\n    if (!correlationId) {\n      throw new Error('locus.correlationId or options.correlationId is required');\n    }\n\n    return (\n      this.request({\n        method: 'POST',\n        uri: `${locus.url}/participant`,\n        body: {\n          correlationId,\n          deviceUrl: this.webex.internal.device.url,\n          localMedias: [\n            {\n              localSdp: JSON.stringify({\n                type: 'SDP',\n                sdp: options.localSdp,\n              }),\n            },\n          ],\n          sequence: locus.sequence || {\n            entries: [],\n            rangeStart: 0,\n            rangeEnd: 0,\n          },\n        },\n      })\n        // The mediaConnections object is deprecated, so just return the locus\n        .then((res) => {\n          res.body.locus.self.devices.map((item, index) => {\n            item.mediaConnections = [res.body.mediaConnections[index]];\n\n            return item;\n          });\n\n          return res.body.locus;\n        })\n    );\n  },\n\n  /**\n   * Leave the specified Locus\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Promise<Types~Locus>}\n   */\n  leave(locus) {\n    return this.request({\n      method: 'PUT',\n      uri: `${locus.self.url}/leave`,\n      body: {\n        deviceUrl: this.webex.internal.device.url,\n        sequence: locus.sequence,\n      },\n    })\n      .then((res) => res.body.locus)\n      .catch((reason) => {\n        if (reason instanceof WebexHttpError.Conflict) {\n          return this.get(locus);\n        }\n\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * Lists active loci\n   * @instance\n   * @memberof Locus\n   * @returns {Promise<Array<Types~Locus>>}\n   */\n  list() {\n    return this.request({\n      method: 'GET',\n      service: 'locus',\n      resource: 'loci',\n    }).then((res) => res.body.loci);\n  },\n\n  /**\n   * Merges two locus DTOs (for the same locus)\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} current\n   * @param {Types~Locus|Types~LocusDelta} incoming\n   * @returns {Type~Locus}\n   */\n  merge(current, incoming) {\n    // if incoming is not a delta event, treat it as a new full locus.\n    if (!incoming.baseSequence) {\n      return incoming;\n    }\n\n    const next = cloneDeep(current);\n\n    // 1. All non-null elements in the delta event except the \"baseSequence\" and\n    // the \"participants\" collection should be used to replace their existing\n    // values.\n    Object.keys(incoming).forEach((key) => {\n      if (key === 'baseSequence' || key === 'participants') {\n        return;\n      }\n\n      next[key] = incoming[key] || next[key];\n    });\n\n    // 2. The \"baseSequence\" in the delta event can be discarded (it doesn't\n    // need to be maintained in the local working copy).\n\n    if (incoming.participants || incoming.participants.length) {\n      const toRemove = new Set();\n      const toUpsert = new Map();\n\n      incoming.participants.forEach((p) => {\n        if (p.removed) {\n          // Elements of the delta event's \"participants\" list with the\n          // attribute `removed=true` should be removed from the working copy's\n          // \"participants\" collection.\n          toRemove.add(p.url);\n        } else {\n          // Elements of the delta events \"participants\" list that are absent\n          // from the local working copy should be added to that collection.\n          toUpsert.set(p.url, p);\n        }\n      });\n\n      // The \"participants\" collection in the delta event should be merged with\n      // that of the local working copy of the Locus such that elements in the\n      // delta event's \"participants\" replace those with the same url value in\n      // the working copy \"participants\" collection.\n      const participants = next.participants.reduce((acc, p) => {\n        if (!toRemove.has(p.url)) {\n          acc[p.url] = p;\n        }\n\n        return acc;\n      }, {});\n\n      toUpsert.forEach((value, key) => {\n        participants[key] = value;\n      });\n\n      next.participants = Object.values(participants);\n    }\n\n    return next;\n  },\n\n  /**\n   * Signals to locus that the current user is done sharing their additional\n   * media stream\n   * @param {Types~Locus} locus\n   * @param {Types~MediaShare} share\n   * @returns {Promise}\n   */\n  releaseFloorGrant(locus, share) {\n    return this.webex\n      .request({\n        uri: share.url,\n        method: 'PUT',\n        body: {\n          floor: {\n            disposition: 'RELEASED',\n          },\n        },\n      })\n      .then(({body}) => body);\n  },\n\n  /**\n   * Signals to locus that the current user would like to share an additional\n   * media stream\n   * @param {Types~Locus} locus\n   * @param {Types~MediaShare} share\n   * @returns {Promise}\n   */\n  requestFloorGrant(locus, share) {\n    return this.webex\n      .request({\n        uri: share.url,\n        method: 'PUT',\n        body: {\n          floor: {\n            beneficiary: {\n              url: locus.self.url,\n              devices: [{url: this.webex.internal.device.url}],\n            },\n            disposition: 'GRANTED',\n          },\n        },\n      })\n      .then(({body}) => body);\n  },\n\n  /**\n   * Sends a string of DTMF tones to the locus\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @param {string} tones\n   * @returns {Promise}\n   */\n  sendDtmf(locus, tones) {\n    return this.request({\n      method: 'POST',\n      uri: `${locus.self.url}/sendDtmf`,\n      body: {\n        deviceUrl: this.webex.internal.device.url,\n        dtmf: {\n          correlationId: uuid.v4(),\n          tones,\n        },\n      },\n    });\n  },\n\n  /**\n   * Fetches the delta for the locus from its syncUrl. *Does not merge*\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @returns {Types~LocusDelta}\n   */\n  sync(locus) {\n    return (\n      this.request({\n        method: 'GET',\n        uri: locus.syncUrl,\n      })\n        // the api may return a 204 no content, so we'll give back an empty\n        // object in that case.\n        .then((res) => res.body || {})\n    );\n  },\n\n  /**\n   * Send a new sdp to Linus via the Locus API to update media state (e.g. to\n   * start or stop sending audio or video)\n   * @instance\n   * @memberof Locus\n   * @param {Types~Locus} locus\n   * @param {Object} options\n   * @param {string} options.localSdp\n   * @param {string} options.mediaId\n   * @param {Boolean} options.audioMuted\n   * @param {Boolean} options.videoMuted\n   * @returns {Promise<Types~Locus>}\n   */\n  updateMedia(locus, {sdp, audioMuted, videoMuted, mediaId}) {\n    const localSdp = {\n      audioMuted,\n      videoMuted,\n    };\n\n    if (sdp) {\n      localSdp.type = 'SDP';\n      localSdp.sdp = sdp;\n    }\n\n    return this.request({\n      method: 'PUT',\n      uri: `${locus.self.url}/media`,\n      body: {\n        deviceUrl: this.webex.internal.device.url,\n        localMedias: [\n          {\n            localSdp: JSON.stringify(localSdp),\n            mediaId,\n          },\n        ],\n        sequence: locus.sequence,\n      },\n    }).then((res) => res.body.locus);\n  },\n});\n\nexport default Locus;\n"],"mappings":"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"}