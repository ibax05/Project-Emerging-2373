{"version":3,"names":["_webexCore","require","_common","_createForOfIteratorHelper","o","allowArrayLike","it","_Symbol","_Symbol$iterator","_Array$isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","_Array$from","test","arr","len","arr2","Array","ownKeys","object","enumerableOnly","keys","_Object$keys","_Object$getOwnPropertySymbols","symbols","filter","sym","_Object$getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","debug","Rooms","WebexPlugin","extend","listen","_this","createEventEnvelope","webex","SDK_EVENT","EXTERNAL","RESOURCE","ROOMS","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","WEBEX_ACTIVITY","event","onWebexApiEvent","create","room","request","method","service","resource","body","res","get","options","id","concat","qs","items","list","_this2","Page","listWithReadStatus","_arguments","_this3","_asyncToGenerator2","_regenerator","mark","_callee","maxRecent","now","wrap","_callee$","_context","prev","undefined","Date","activitiesLimit","computeTitleIfEmpty","conversationsLimit","isActive","sinceDate","setDate","getDate","abrupt","_promise","reject","Error","services","waitForCatalog","conversation","conversations","buildRoomInfoList","stop","getWithReadStatus","roomId","_this4","deconstructedId","deconstructHydraId","cluster","convo","buildRoomInfo","remove","statusCode","update","activity","data","verb","ACTIVITY_VERB","CREATE","roomCreatedEvent","getRoomEvent","EVENT_TYPE","CREATED","_stringify","trigger","UPDATE","LOCK","UNLOCK","roomUpdatedEvent","UPDATED","sdkEvent","_cloneDeep2","getHydraClusterString","url","tags","created","published","actorId","buildHydraPersonId","actor","entryUUID","buildHydraRoomId","creatorId","lastActivity","creatorUUID","type","getHydraRoomType","isLocked","includes","ACTIVITY_TAG","LOCKED","logger","error","message","version","_default","exports","_x","_x2","_buildRoomInfo","_callee2","title","lastActivityDate","roomInfo","_callee2$","_context2","displayName","computedTitle","lastReadableActivityDate","lastRelevantActivityDate","lastSeenActivityDate","toISOString","resolve","t0","_x3","_x4","_buildRoomInfoList","_callee3","roomReadInfo","roomInfoPromises","_iterator","_step","_callee3$","_context3","all","roomInfoList","sort","a","b"],"sources":["rooms.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {cloneDeep} from 'lodash';\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  getHydraClusterString,\n  getHydraRoomType,\n  deconstructHydraId,\n} from '@webex/common';\n\nconst debug = require('debug')('rooms');\n\n/**\n * @typedef {Object} RoomObject\n * @property {string} id - (server generated) Unique identifier for the room\n * @property {string} title - The display name for the room. All room members\n * will see the title so make it something good\n * @property {string} teamId - (optional) The ID of the team to which the room\n * belongs\n * @property {isoDate} created - (server generated) The date and time that the\n * room was created\n */\n\n/**\n * Rooms are virtual meeting places for getting stuff done. This resource\n * represents the room itself. Check out the {@link Memberships} API to learn\n * how to add and remove people from rooms and the {@link Messages} API for\n * posting and managing content.\n * @class\n * @name Rooms\n */\nconst Rooms = WebexPlugin.extend({\n  /**\n   * Register to listen for incoming rooms events\n   * This is an alternate approach to registering for rooms webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://webex.github.io/webex-js-sdk/samples/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Rooms\n   * @returns {Promise}\n   * @example\n   * webex.rooms.listen()\n   *   .then(() => {\n   *     console.log('listening to room events');\n   *     webex.rooms.on('created', (event) => console.log(`Got a room:created event:\\n${event}`);\n   *     webex.rooms.on('updated', (event) => console.log(`Got a room:updated event:\\n${event}`);\n   *   })\n   *   .catch((e) => console.error(`Unable to register for room events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.rooms.stopListening();\n   * webex.rooms.off('created');\n   * webex.rooms.off('updated');\n   */\n  listen() {\n    return createEventEnvelope(this.webex, SDK_EVENT.EXTERNAL.RESOURCE.ROOMS).then((envelope) => {\n      this.eventEnvelope = envelope;\n\n      return this.webex.internal.mercury.connect().then(() => {\n        this.listenTo(this.webex.internal.mercury, SDK_EVENT.INTERNAL.WEBEX_ACTIVITY, (event) =>\n          this.onWebexApiEvent(event)\n        );\n      });\n    });\n  },\n\n  /**\n   * Creates a new room. The authenticated user is automatically added as a\n   * member of the room. See the {@link Memberships} API to learn how to add\n   * more people to the room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject} room\n   * @returns {Promise<RoomObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Room Example'})\n   *   .then(function(room) {\n   *     var assert = require('assert')\n   *     assert(typeof room.created === 'string');\n   *     assert(typeof room.id === 'string');\n   *     assert(room.title === 'Create Room Example');\n   *     console.log(room.title);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(room) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'rooms',\n      body: room,\n    }).then((res) => res.body);\n  },\n\n  /**\n   * Returns a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject|string} room\n   * @param {Object} options\n   * @returns {Promise<RoomObject>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'Get Room Example'})\n   *   .then(function(r) {\n   *     room = r\n   *     return webex.rooms.get(room.id)\n   *   })\n   *   .then(function(r) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(r, room);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(room, options) {\n    const id = room.id || room;\n\n    return this.request({\n      service: 'hydra',\n      resource: `rooms/${id}`,\n      qs: options,\n    }).then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of rooms. In most cases the results will only contain rooms\n   * that the authenticated user is a member of.\n   * @instance\n   * @memberof Rooms\n   * @param {Object} options\n   * @param {Object} options.max Limit the maximum number of rooms in the\n   * response.\n   * @returns {Promise<Page<RoomObject>>}\n   * @example\n   * var createdRooms;\n   * Promise.all([\n   *   webex.rooms.create({title: 'List Rooms Example 1'}),\n   *   webex.rooms.create({title: 'List Rooms Example 2'}),\n   *   webex.rooms.create({title: 'List Rooms Example 3'})\n   * ])\n   *   .then(function(r) {\n   *     createdRooms = r;\n   *     return webex.rooms.list({max: 3})\n   *       .then(function(rooms) {\n   *         var assert = require('assert');\n   *         assert(rooms.length === 3);\n   *         for (var i = 0; i < rooms.items.length; i+= 1) {\n   *           assert(createdRooms.filter(function(room) {\n   *             return room.id === rooms.items[i].id;\n   *           }).length === 1);\n   *         }\n   *         return 'success';\n   *       });\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'rooms/',\n      qs: options,\n    }).then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Returns a list of rooms with details about the data of the last\n   * activity in the room, and the date of the users last presences in\n   * the room. The list is sorted with this with most recent activity first\n   *\n   * For rooms where lastActivityDate > lastSeenDate the space\n   * can be considered to be \"unread\"\n   *\n   * This differs from the rooms.list() function in the following ways:\n   *  -- when called with no parameters it returns an array of all\n   *     spaces, up to 1000, that the user is a member of\n   *  -- pagination is not supported. ALL rooms are returned which\n   *     can result in a large payload\n   *  -- For users with hundreds of spaces, this API can take some time to\n   *     to return, for this reason it supports an optional maxRecent parameter.\n   *     If set this will return only the specified number of spaces with activity\n   *     in the last two weeks.  Recommended value is 30.  Max supported is 100.\n   *  -- only \"id\", \"type\", \"lastActivityDate\", and \"lastSeenDate\" are\n   *     guaranteed to be available for each room in the list\n   *  -- \"title\" is usually returned, but not guaranteed\n   *\n   * In general this function should be used only when the client needs to\n   * access read status info, for example on startup.\n   * After startup, clients should track message and membership:seen events\n   * to maintain read status client side.\n   *\n   * Since this API can take some time to return up to 1000 spaces, it is\n   * recommended that custom clients call this first with the maxRecent parameter\n   * set to 30, so that they can display some of the more recents spaces.  Calling\n   * this API a second time with no parameters will return all the spaces.\n   *\n   * Not all spaces may be returned, for example when users in more than 1000\n   * spaces, or when a new spaces is added after this function is called,\n   * but before it returns. Custom clients should be prepared to gracefully\n   * handle cases where an event occurs in a space not returned by this call,\n   * by querying rooms.getWithReadStatus() with the id of the room in question\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   * @instance\n   * @param {int} maxRecent\n   * @memberof Rooms\n   * @returns {Promise<RoomInfoObjectList>}\n   */\n  async listWithReadStatus(maxRecent = 0) {\n    const now = new Date();\n    const options = {\n      activitiesLimit: 0,\n      computeTitleIfEmpty: true,\n      conversationsLimit: 1000,\n      isActive: true,\n    };\n\n    if (maxRecent > 0) {\n      options.conversationsLimit = maxRecent;\n      options.sinceDate = now.setDate(now.getDate() - 14);\n    } else if (maxRecent < 0 || maxRecent > 100) {\n      return Promise.reject(\n        new Error(\n          'rooms.listWithReadStatus: ' +\n            'optional maxRecent parameter must be an integer between 1 and 100'\n        )\n      );\n    }\n\n    return this.webex.internal.services\n      .waitForCatalog('postauth')\n      .then(() => this.webex.internal.conversation.list(options))\n      .then((conversations) => buildRoomInfoList(this.webex, conversations));\n  },\n\n  /**\n   * Returns a single room object with details about the data of the last\n   * activity in the room, and the date of the users last presence in\n   * the room.\n   *\n   * For rooms where lastActivityDate > lastSeenDate the room\n   * can be considered to be \"unread\"\n   *\n   * This differs from the rooms.get() function in the following ways:\n   *  -- it takes a single roomId parameter to fetch\n   *  -- no other options are considered\n   *  -- only \"id\", \"type\", \"lastActivityDate\", and \"lastSeenDate\" are\n   *     guaranteed to be available in the return object\n   *  -- \"title\" is usually returned, but not guaranteed\n   *\n   * In general clients should use the listWithReadStatus() method on startup\n   * to get the initial roomStatus and then update their client side copy by\n   * responding to message, membership and room events.\n\n   * This function allows a custom client to be \"nimble\" if it is responding\n   * to an event with a roomId that was not in the original fetch.  The\n   * anticipated behavior is that getWithReadStats is called \"just in time\",\n   * with the resulting room object being added to the list of cached room\n   * objects on the client side.\n   *\n   * This function may be deprecated when this info is provided in the room\n   * object returned in the get function.\n   * @instance\n   * @memberof Rooms\n   * @param {string} roomId\n   * @returns {Promise<RoomInfoObject>}\n   */\n  getWithReadStatus(roomId) {\n    const deconstructedId = deconstructHydraId(roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster,\n    };\n\n    return this.webex.internal.services.waitForCatalog('postauth').then(() =>\n      this.webex.internal.conversation\n        .get(conversation, {\n          computeTitleIfEmpty: true,\n          activitiesLimit: 0, // don't send the whole history of activity\n        })\n        .then((convo) => buildRoomInfo(this.webex, convo))\n    );\n  },\n\n  /**\n   * Deletes a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject|string} room\n   * @returns {Promise}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'Remove Room Example'})\n   *  .then(function(r) {\n   *    room = r;\n   *    return webex.rooms.remove(room.id);\n   *  })\n   *  .then(function() {\n   *    return webex.rooms.get(room.id);\n   *  })\n   *  .then(function() {\n   *    var assert = require('assert');\n   *    assert(false, 'the previous get should have failed');\n   *  })\n   *  .catch(function(reason) {\n   *    var assert = require('assert');\n   *    assert.equal(reason.statusCode, 404);\n   *    return 'success'\n   *  });\n   *  // => success\n   */\n  remove(room) {\n    const id = room.id || room;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `rooms/${id}`,\n    }).then((res) => {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Used to update a single room's properties.\n   * @instance\n   * @memberof Rooms\n   * @param {RoomObject} room\n   * @returns {Promise<RoomObject>}\n   * @example\n   * var room;\n   * webex.rooms.update({title: 'Update Room Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     room.title = 'Update Room Example (Updated Title)';\n   *     return webex.rooms.update(room);\n   *   })\n   *   .then(function() {\n   *     return webex.rooms.get(room.id);\n   *   })\n   *   .then(function(room) {\n   *    var assert = require('assert');\n   *     assert.equal(room.title, 'Update Room Example (Updated Title)');\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(room) {\n    const {id} = room;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `rooms/${id}`,\n      body: room,\n    }).then((res) => res.body);\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Rooms\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        const roomCreatedEvent = this.getRoomEvent(\n          this.webex,\n          activity,\n          SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED\n        );\n\n        if (roomCreatedEvent) {\n          debug(`room \"created\" payload: \\\n            ${JSON.stringify(roomCreatedEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, roomCreatedEvent);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.UPDATE:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.LOCK:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.UNLOCK:\n        debug(`generating a rooms:updated based on ${activity.verb} activity`);\n        const roomUpdatedEvent = this.getRoomEvent(\n          this.webex,\n          activity,\n          SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED\n        );\n\n        if (roomUpdatedEvent) {\n          debug(`room \"updated\" payload: \\\n            ${JSON.stringify(roomUpdatedEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, roomUpdatedEvent);\n        }\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the rooms resource,\n   * adhering to Hydra's Webhook data structure.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Rooms\n   * @param {Object} webex sdk instance\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getRoomEvent(webex, activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      const cluster = getHydraClusterString(webex, activity.url);\n      let {tags} = activity.object;\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = buildHydraPersonId(activity.actor.entryUUID, cluster);\n      if (activity.object.id) {\n        sdkEvent.data.id = buildHydraRoomId(activity.object.id, cluster);\n      } else {\n        sdkEvent.data.id = buildHydraRoomId(activity.target.id, cluster);\n      }\n\n      if (event === SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED) {\n        sdkEvent.data.creatorId = buildHydraPersonId(activity.actor.entryUUID, cluster);\n        sdkEvent.data.lastActivity = activity.published;\n      } else if (event === SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED) {\n        if (activity.verb === 'update') {\n          // For some reason the tags are not in the object for an update activity\n          tags = activity.target.tags;\n        }\n        if (activity.object.creatorUUID) {\n          // This seems to be set in lock/unlock activities but not updated...\n          debug(`Found a creatorId: ${activity.object.creatorUUID} in a ${activity.verb} event`);\n          sdkEvent.data.creatorId = buildHydraPersonId(activity.object.creatorUUID, cluster);\n        }\n        // Webhook engine team sets this based on lastReadableActivityDate\n        // in the activity.target object.  See: hydra/HydraRoom.java#L51\n        // This elements seems to be missing from the activity that the SDK is getting\n        // sdkEvent.data.lastActivity = activity.target.lastReadableActivityDate;\n      } else {\n        throw new Error('unexpected event type');\n      }\n      sdkEvent.data.type = getHydraRoomType(tags);\n      sdkEvent.data.isLocked = tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.LOCKED);\n\n      return sdkEvent;\n    } catch (e) {\n      this.webex.logger.error(\n        `Unable to generate SDK event from mercury socket activity for rooms:${event} event: ${e.message}`\n      );\n\n      return null;\n    }\n  },\n});\n\nexport default Rooms;\n\n/**\n * Helper method to build a roomInfo object from a conversation object\n * @param {Object} webex sdk object\n * @param {Conversation~ConversationObject} conversation\n * @returns {Promise<RoomInfoObject>}\n */\nasync function buildRoomInfo(webex, conversation) {\n  try {\n    const type = getHydraRoomType(conversation.tags);\n    const cluster = getHydraClusterString(webex, conversation.url);\n    const title = conversation.displayName ? conversation.displayName : conversation.computedTitle;\n    const lastActivityDate = conversation.lastReadableActivityDate\n      ? conversation.lastReadableActivityDate\n      : conversation.lastRelevantActivityDate;\n\n    const roomInfo = {\n      id: buildHydraRoomId(conversation.id, cluster),\n      type,\n      ...(title && {title: conversation.displayName}),\n      ...(lastActivityDate && {lastActivityDate}),\n      lastSeenActivityDate: conversation.lastSeenActivityDate\n        ? conversation.lastSeenActivityDate\n        : // If user has never been seen set the date to \"a long time ago\"\n          new Date(0).toISOString(),\n    };\n\n    return Promise.resolve(roomInfo);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n/**\n * Helper method to build a list of roomInfo object from conversation list\n * @param {Object} webex sdk object\n * @param {Conversation~ConversationObjectList} conversations\n * @returns {Promise<RoomInfoList>}\n */\nasync function buildRoomInfoList(webex, conversations) {\n  // Convert each Conversation into a roomInfo object\n  const roomReadInfo = {items: []};\n  const roomInfoPromises = [];\n\n  for (const conversation of conversations) {\n    roomInfoPromises.push(buildRoomInfo(webex, conversation));\n  }\n\n  return Promise.all(roomInfoPromises).then((roomInfoList) => {\n    roomReadInfo.items = roomInfoList;\n    roomReadInfo.items.sort((a, b) => (a.lastActivityDate < b.lastActivityDate ? 1 : -1));\n\n    return roomReadInfo;\n  });\n}\n"],"mappings":"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"}