{"version":3,"names":["require","_webexCore","_encryption","_interopRequireDefault","_config","_kmsErrors","_kmsDryErrorInterceptor","_kms","interceptors","process","env","NODE_ENV","KmsDryErrorInterceptor","create","registerInternalPlugin","Encryption","payloadTransformer","predicates","name","direction","test","ctx","options","_has2","default","_promise","resolve","_isObject2","body","kmsMessage","keyUris","length","resourceUri","includes","uri","extract","response","_isString2","reason","Boolean","errorCode","transforms","fn","object","webex","internal","encryption","kms","prepareRequest","then","req","wrapped","decryptKmsMessage","promises","errors","map","error","description","desc","push","message","all","reject","DryError","config"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\n// Note: There's a bug where if bind gets replayed because of a timeout in which\n// the original request eventually completed, there'll be an error indicating\n// the key can't be bound (because it already has been). This could be mitigated\n// by using Promise.race to resolve replays (as more requests get enqueue for a\n// specific action, accept whichever one completes first).\n\nimport '@webex/internal-plugin-device';\n\nimport '@webex/internal-plugin-mercury';\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has, isObject, isString} from 'lodash';\n\nimport Encryption from './encryption';\nimport config from './config';\nimport {DryError} from './kms-errors';\n\nimport KmsDryErrorInterceptor from './kms-dry-error-interceptor';\n\nlet interceptors;\n\nif (process.env.NODE_ENV === 'test') {\n  interceptors = {\n    KmsDryErrorInterceptor: KmsDryErrorInterceptor.create,\n  };\n}\n\nregisterInternalPlugin('encryption', Encryption, {\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'encryptKmsMessage',\n        direction: 'outbound',\n        // I don't see any practical way to reduce complexity here.\n        // eslint-disable-next-line complexity\n        test(ctx, options) {\n          if (!has(options, 'body.kmsMessage')) {\n            return Promise.resolve(false);\n          }\n\n          if (!isObject(options.body.kmsMessage)) {\n            return Promise.resolve(false);\n          }\n\n          // If this is a template for a kms message, assume another transform\n          // will fill it in later. This is a bit of a leaky abstraction, but the\n          // alternative is building a complex rules engine for controlling\n          // ordering of transforms\n          if (options.body.kmsMessage.keyUris && options.body.kmsMessage.keyUris.length === 0) {\n            return Promise.resolve(false);\n          }\n          if (\n            options.body.kmsMessage.resourceUri &&\n            (options.body.kmsMessage.resourceUri.includes('<KRO>') ||\n              options.body.kmsMessage.resourceUri.includes('<KEYURL>'))\n          ) {\n            return Promise.resolve(false);\n          }\n          if (\n            options.body.kmsMessage.uri &&\n            (options.body.kmsMessage.uri.includes('<KRO>') ||\n              options.body.kmsMessage.uri.includes('<KEYURL>'))\n          ) {\n            return Promise.resolve(false);\n          }\n\n          return Promise.resolve(true);\n        },\n        extract(options) {\n          return Promise.resolve(options.body);\n        },\n      },\n      {\n        name: 'decryptKmsMessage',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(\n            has(response, 'body.kmsMessage') && isString(response.body.kmsMessage)\n          );\n        },\n        extract(response) {\n          return Promise.resolve(response.body);\n        },\n      },\n      {\n        name: 'decryptErrorResponse',\n        direction: 'inbound',\n        test(ctx, reason) {\n          return Promise.resolve(Boolean(reason.body && reason.body.errorCode === 1900000));\n        },\n        extract(reason) {\n          return Promise.resolve(reason);\n        },\n      },\n    ],\n    transforms: [\n      {\n        name: 'encryptKmsMessage',\n        fn(ctx, object) {\n          if (!object) {\n            return Promise.resolve();\n          }\n\n          if (!object.kmsMessage) {\n            return Promise.resolve();\n          }\n\n          if (isString(object.kmsMessage)) {\n            return Promise.resolve();\n          }\n\n          return ctx.webex.internal.encryption.kms.prepareRequest(object.kmsMessage).then((req) => {\n            object.kmsMessage = req.wrapped;\n          });\n        },\n      },\n      {\n        name: 'decryptKmsMessage',\n        fn(ctx, object) {\n          return ctx.webex.internal.encryption.kms\n            .decryptKmsMessage(object.kmsMessage)\n            .then((kmsMessage) => {\n              object.kmsMessage = kmsMessage;\n            });\n        },\n      },\n      {\n        name: 'decryptErrorResponse',\n        fn(ctx, reason) {\n          const promises = reason.body.errors.map((error) =>\n            ctx.webex.internal.encryption.kms.decryptKmsMessage(error.description).then((desc) => {\n              error.description = desc;\n            })\n          );\n\n          promises.push(\n            ctx.webex.internal.encryption.kms\n              .decryptKmsMessage(reason.body.message)\n              .then((kmsMessage) => {\n                reason.body.message = kmsMessage;\n              })\n          );\n\n          return Promise.all(promises).then(() => Promise.reject(new DryError(reason)));\n        },\n      },\n    ],\n  },\n  interceptors,\n  config,\n});\n\nexport {default} from './encryption';\nexport {default as KMS} from './kms';\nexport {KmsError, DryError} from './kms-errors';\n"],"mappings":"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"}