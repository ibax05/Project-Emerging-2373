{"version":3,"names":["_url","_interopRequireDefault","require","_ampersandState","ServiceUrl","AmpState","extend","namespace","props","defaultUrl","undefined","hosts","name","_generateHostUrl","hostUri","url","Url","parse","host","concat","port","format","_getHostUrls","_this","map","priority","_getPriorityHostUrl","clusterId","length","filteredHosts","filter","id","homeCluster","aliveHosts","failed","reduce","previous","current","failHost","_Url$parse","hostname","foundHost","find","hostObj","get","priorityHost","_default","exports","default"],"sources":["service-url.js"],"sourcesContent":["import Url from 'url';\n\nimport AmpState from 'ampersand-state';\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst ServiceUrl = AmpState.extend({\n  namespace: 'ServiceUrl',\n\n  props: {\n    defaultUrl: ['string', true, undefined],\n    hosts: ['array', false, () => []],\n    name: ['string', true, undefined],\n  },\n\n  /**\n   * Generate a host url based on the host\n   * uri provided.\n   * @param {string} hostUri\n   * @returns {string}\n   */\n  _generateHostUrl(hostUri) {\n    const url = Url.parse(this.defaultUrl);\n\n    // setting url.hostname will not apply during Url.format(), set host via\n    // a string literal instead.\n    url.host = `${hostUri}${url.port ? `:${url.port}` : ''}`;\n\n    return Url.format(url);\n  },\n\n  /**\n   * Generate a list of urls based on this\n   * `ServiceUrl`'s known hosts.\n   * @returns {string[]}\n   */\n  _getHostUrls() {\n    return this.hosts.map((host) => ({\n      url: this._generateHostUrl(host.host),\n      priority: host.priority,\n    }));\n  },\n\n  /**\n   * Get the current host url with the highest priority. If a clusterId is not\n   * provided, this will only return a URL with a filtered host that has the\n   * `homeCluster` value set to `true`.\n   *\n   * @param {string} [clusterId] - The clusterId to filter for a priority host.\n   * @returns {string} - The priority host url.\n   */\n  _getPriorityHostUrl(clusterId) {\n    if (this.hosts.length === 0) {\n      return this.defaultUrl;\n    }\n\n    let filteredHosts = clusterId\n      ? this.hosts.filter((host) => host.id === clusterId)\n      : this.hosts.filter((host) => host.homeCluster);\n\n    const aliveHosts = filteredHosts.filter((host) => !host.failed);\n\n    filteredHosts =\n      aliveHosts.length === 0\n        ? filteredHosts.map((host) => {\n            /* eslint-disable-next-line no-param-reassign */\n            host.failed = false;\n\n            return host;\n          })\n        : aliveHosts;\n\n    return this._generateHostUrl(\n      filteredHosts.reduce(\n        (previous, current) =>\n          previous.priority > current.priority || !previous.homeCluster ? current : previous,\n        {}\n      ).host\n    );\n  },\n\n  /**\n   * Attempt to mark a host from this `ServiceUrl` as failed and return true\n   * if the provided url has a host that could be successfully marked as failed.\n   *\n   * @param {string} url\n   * @returns {boolean}\n   */\n  failHost(url) {\n    if (url === this.defaultUrl) {\n      return true;\n    }\n\n    const {hostname} = Url.parse(url);\n    const foundHost = this.hosts.find((hostObj) => hostObj.host === hostname);\n\n    if (foundHost) {\n      foundHost.failed = true;\n    }\n\n    return foundHost !== undefined;\n  },\n\n  /**\n   * Get the current `defaultUrl` or generate a url using the host with the\n   * highest priority via host rendering.\n   *\n   * @param {boolean} [priorityHost] - Retrieve the priority host.\n   * @param {string} [clusterId] - Cluster to match a host against.\n   * @returns {string} - The full service url.\n   */\n  get(priorityHost, clusterId) {\n    if (!priorityHost) {\n      return this.defaultUrl;\n    }\n\n    return this._getPriorityHostUrl(clusterId);\n  },\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default ServiceUrl;\n"],"mappings":"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"}