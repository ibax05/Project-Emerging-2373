{"version":3,"names":["_constants","require","_serviceHost","_interopRequireDefault","ownKeys","object","enumerableOnly","keys","_Object$keys2","_Object$getOwnPropertySymbols","symbols","filter","sym","_Object$getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","Object","forEach","key","_defineProperty2","default","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","ServiceRegistry","_classCallCheck2","hosts","_createClass2","get","find","active","local","priority","reduce","map","host","hostReference","service","url","value","clear","removing","includes","failed","failing","setStatus","filterActive","_toConsumableArray2","filterCatalog","catalog","undefined","catalogs","_isArray","catalogId","mapCatalogName","id","type","SERVICE_CATALOGS_ENUM_TYPES","STRING","filterCluster","cluster","clusters","filterLocal","filterPriority","filteredHosts","currentHost","foundHost","hostGroup","foundHostCatalogPriority","NUMBER","currentHostCatalogPriority","splice","indexOf","filterService","services","filterUrl","urls","_this","_ref","load","_this$hosts","validHosts","loadableHost","ServiceHost","replaced","replacing","reset","resetting","_ref2","SERVICE_CATALOGS","mapRemoteCatalog","_ref3","hostCatalog","serviceLinks","catalogIndex","Error","concat","_keys","output","defaultUri","split","uri","exports"],"sources":["service-registry.js"],"sourcesContent":["import {SERVICE_CATALOGS, SERVICE_CATALOGS_ENUM_TYPES} from './constants';\nimport ServiceHost from './service-host';\n\n/**\n * The parameter transfer object for {@link ServiceRegistry#mapRemoteCatalog}.\n * This object is shaped to match the object returned from the **U2C** service.\n *\n * @typedef {Record<string, string>} RSL\n * @typedef {Record<string, Array<Record<string, number | string>>>} RHC\n *\n * @typedef {Object} MapRemoteCatalogPTO\n * @property {string} MapRemoteCatalogPTO.catalog - Service catalog name.\n * @property {RSL} MapRemoteCatalogPTO.serviceLinks - Service links.\n * @property {RHC} MapRemoteCatalogPTO.hostCatalog - Service host catalog.\n */\n\n/**\n * Service manipulation filter object for retrieving services within the\n * {@link ServiceRegistry} class.\n *\n * @typedef {Object} HostFilter\n * @property {boolean} [HostFilter.active] - Active state to filter.\n * @property {Array<string> | string} [HostFilter.catalog] - Catalogs to filter.\n * @property {Array<string> | string} [HostFilter.cluster] - Clusters to filter.\n * @property {boolean} [HostFilter.local] - Filter to the user's home cluster.\n * @property {boolean} [HostFilter.priority] - Filter for the highest priority.\n * @property {Array<string> | string} [HostFilter.service] - Services to filter.\n * @property {Array<string> | string} [HostFilter.url] - URL to filter.\n */\n\n/**\n * @class\n * @classdesc - Manages a collection of {@link ServiceHost} class objects.\n */\nexport default class ServiceRegistry {\n  /**\n   * Generate a new {@link ServiceHost}.\n   *\n   * @public\n   * @constructor\n   * @memberof ServiceHost\n   */\n  constructor() {\n    /**\n     * The collection of managed {@link ServiceHost}s.\n     *\n     * @instance\n     * @type {Array<ServiceHost>}\n     * @private\n     * @memberof ServiceRegistry\n     */\n    this.hosts = [];\n  }\n\n  /**\n   * An active, local, and priority mapped record of the current\n   * {@link ServiceCatalog#hosts}.\n   *\n   * @public\n   * @memberof ServiceCatalog\n   * @type {Record<string, string>}\n   */\n  get map() {\n    // Get a list of active, local, and priority-mapped hosts.\n    return this.find({\n      active: true,\n      local: true,\n      priority: true,\n    }).reduce((map, host) => {\n      // Generate a new object to assign the existing map.\n      const hostReference = {};\n\n      // Assign the key:value pair for the service and url.\n      hostReference[host.service] = host.url;\n\n      // Assign the reference to the map and return.\n      return {...map, ...hostReference};\n    }, {});\n  }\n\n  /**\n   * Removes a collection of {@link ServiceHost} class objects from the\n   * {@link ServiceRegistry#hosts} array based on the provided\n   * {@link HostFilter}.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} filter - The inclusive filter for hosts to remove.\n   * @returns {Array<ServiceHost>} - The removed {@link ServiceHost}s.\n   */\n  clear(filter) {\n    // Collect a list of hosts to remove based on the provided filter.\n    const removing = this.find(filter);\n\n    // Remove the hosts from the array.\n    this.hosts = this.hosts.filter((host) => !removing.includes(host));\n\n    // Return the removed hosts.\n    return removing;\n  }\n\n  /**\n   * Mark a collection of {@link ServiceHost} class objects from the\n   * {@link ServiceRegistry#hosts} array as failed based on the provided\n   * {@link HostFilter}.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} filter - The inclusive filter for hosts to mark failed.\n   * @returns {Array<ServiceHost>} - The {@link ServiceHost}s marked failed.\n   */\n  failed(filter) {\n    // Collect a list of hosts to mark as failed based on the provided filter.\n    const failing = this.find(filter);\n\n    // Mark the hosts from the array as failed.\n    failing.forEach((host) => {\n      host.setStatus({failed: true});\n    });\n\n    // Return the marked hosts.\n    return failing;\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array against their active states.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {boolean} [active] - Filter for the host state.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterActive(active) {\n    // Filter the host array if the active requirement is true.\n    return typeof active === 'boolean'\n      ? this.hosts.filter((host) => host.active === active)\n      : [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array against their assigned\n   * catalog values.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {Array<string> | string} [catalog] - Catalogs to filter.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterCatalog(catalog = []) {\n    // Generate a catalog names array based on the provided catalog param.\n    const catalogs = (Array.isArray(catalog) ? catalog : [catalog]).map(\n      (catalogId) =>\n        ServiceRegistry.mapCatalogName({\n          id: catalogId,\n          type: SERVICE_CATALOGS_ENUM_TYPES.STRING,\n        }) || catalogId\n    );\n\n    // Filter the host array against the catalog names array.\n    return catalogs.length > 0\n      ? this.hosts.filter((host) => catalogs.includes(host.catalog))\n      : [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array against their assigned\n   * cluster values.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {Array<string> | string} [cluster] - Clusters to filter for.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterCluster(cluster = []) {\n    // Generate an array of clusters regardless of parameter type.\n    const clusters = Array.isArray(cluster) ? cluster : [cluster];\n\n    // Filter the host array against the provided clusters.\n    return clusters.length > 0\n      ? this.hosts.filter((host) => clusters.includes(host.id))\n      : [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array against their location in\n   * reference to the authenticated user.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {boolean} [local] - Filter for the host location.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterLocal(local) {\n    return typeof local === 'boolean'\n      ? this.hosts.filter((host) => host.local === local)\n      : [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array for the highest priority\n   * hosts for each specific service.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {boolean} [priority] - Filter for the highest priority\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterPriority(priority) {\n    return priority\n      ? this.hosts.reduce((filteredHosts, currentHost) => {\n          // Validate that the current host is not active.\n          if (!currentHost.active) {\n            return filteredHosts;\n          }\n\n          // Determine if the filtered hosts array contains a host from the same\n          // host group.\n          const foundHost = filteredHosts.find((host) => host.hostGroup === currentHost.hostGroup);\n\n          // Validate if a host was found.\n          if (!foundHost) {\n            filteredHosts.push(currentHost);\n\n            return filteredHosts;\n          }\n\n          // Map the found host's catalog to its priority value.\n          const foundHostCatalogPriority = ServiceRegistry.mapCatalogName({\n            id: foundHost.catalog,\n            type: SERVICE_CATALOGS_ENUM_TYPES.NUMBER,\n          });\n\n          // Map the current host's catalog to its priority value.\n          const currentHostCatalogPriority = ServiceRegistry.mapCatalogName({\n            id: currentHost.catalog,\n            type: SERVICE_CATALOGS_ENUM_TYPES.NUMBER,\n          });\n\n          // Validate if the found host has a lower priority than the current\n          // host.\n          if (\n            foundHostCatalogPriority < currentHostCatalogPriority ||\n            foundHost.priority < currentHost.priority\n          ) {\n            filteredHosts.splice(filteredHosts.indexOf(foundHost, 1));\n            filteredHosts.push(currentHost);\n          }\n\n          return filteredHosts;\n        }, [])\n      : [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array for hosts with a specified\n   * set of service names.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {Array<string> | string} [service] - Services to filter.\n   * @returns {Array<ServiceHost>} - The filtered host array.\n   */\n  filterService(service = []) {\n    // Generate an array of services regardless of parameter type.\n    const services = Array.isArray(service) ? service : [service];\n\n    // Filter the host array against the provided services.\n    return services.length > 0\n      ? this.hosts.filter((host) => services.includes(host.service))\n      : [...this.hosts];\n  }\n\n  /**\n   * Filter the {@link ServiceRegistry#hosts} array for hosts with a specified\n   * set of URLs.\n   *\n   * @private\n   * @memberof ServiceRegistry\n   * @param {Array<string> | string} [url] - URL to filter.\n   * @returns {Array<ServiceHost>} - The filter host array.\n   */\n  filterUrl(url = []) {\n    // Generate an array of URLs regardless of the parameter type.\n    const urls = Array.isArray(url) ? url : [url];\n\n    // Filter the host array against the provided URLs.\n    return urls.length > 0 ? this.hosts.filter((host) => urls.includes(host.url)) : [...this.hosts];\n  }\n\n  /**\n   * Get an array of {@link ServiceHost}s based on a provided\n   * {@link HostFilter} from the {@link ServiceRegistry#hosts} array.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} [filter] - The inclusive filter for hosts to find.\n   * @returns {Array<ServiceHost>} - The filtered hosts.\n   */\n  find({active, catalog, cluster, local, priority, service, url} = {}) {\n    return this.hosts.filter(\n      (host) =>\n        this.filterActive(active).includes(host) &&\n        this.filterCatalog(catalog).includes(host) &&\n        this.filterCluster(cluster).includes(host) &&\n        this.filterLocal(local).includes(host) &&\n        this.filterPriority(priority).includes(host) &&\n        this.filterService(service).includes(host) &&\n        this.filterUrl(url).includes(host)\n    );\n  }\n\n  /**\n   * Load a formatted array of {@link ServiceHost} constructor parameter\n   * transfer objects as instances of {@link ServiceHost} class objects to the\n   * {@link ServiceRegistry#hosts} array.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {Array<ServiceHost.ConstructorPTO>} hosts\n   * @returns {this}\n   */\n  load(hosts = []) {\n    // Validate that the provided hosts are eligible to be loaded.\n    const validHosts = hosts.filter(\n      (host) =>\n        !!ServiceRegistry.mapCatalogName({\n          id: host.catalog,\n          type: SERVICE_CATALOGS_ENUM_TYPES.STRING,\n        })\n    );\n\n    // Load the eligible hosts.\n    this.hosts.push(...validHosts.map((loadableHost) => new ServiceHost(loadableHost)));\n\n    return this;\n  }\n\n  /**\n   * Mark a collection of {@link ServiceHost} class objects from the\n   * {@link ServiceRegistry#hosts} array as replaced based on the provided\n   * {@link HostFilter}.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} filter - The inclusive filter to mark replaced.\n   * @returns {Array<ServiceHost>} - The {@link ServiceHost}s marked replaced.\n   */\n  replaced(filter) {\n    // Collect a list of hosts to mark as replaced based on the provided filter.\n    const replacing = this.find(filter);\n\n    // Mark the hosts from the array as replaced.\n    replacing.forEach((host) => {\n      host.setStatus({replaced: true});\n    });\n\n    // Return the marked hosts.\n    return replacing;\n  }\n\n  /**\n   * Reset the failed status of a collection of {@link ServiceHost} class\n   * objects from the {@link ServiceRegistry#hosts} array based on the provided\n   * {@link HostFilter}.\n   *\n   * @public\n   * @memberof ServiceRegistry\n   * @param {HostFilter} filter - The inclusive filter of hosts to reset.\n   * @returns {Array<ServiceHost>} - The {@link ServiceHost}s that reset.\n   */\n  reset(filter) {\n    // Collect a list of hosts to mark as replaced based on the provided filter.\n    const resetting = this.find(filter);\n\n    // Mark the hosts from the array as replaced.\n    resetting.forEach((host) => {\n      host.setStatus({failed: false});\n    });\n\n    // Return the marked hosts.\n    return resetting;\n  }\n\n  /**\n   * Convert a {@link SERVICE_CATALOGS} identifier or value to its associated\n   * idenfier or value.\n   *\n   * @public\n   * @static\n   * @memberof ServiceRegistry\n   * @param {Object} pto - The parameter transfer object.\n   * @property {string | number} pto.id - The identifier to convert in the enum.\n   * @property {SERVICE_CATALOGS_ENUM_TYPES} pto.type - The desired output.\n   * @returns {string|number} - The matching enum value or index.\n   */\n  static mapCatalogName({id, type}) {\n    // Validate that the id is a number.\n    if (typeof id === 'number') {\n      // Validate that the desired type is a number.\n      if (type === SERVICE_CATALOGS_ENUM_TYPES.NUMBER) {\n        return SERVICE_CATALOGS[id] !== undefined ? id : undefined;\n      }\n\n      // Validate that the desired type is a string.\n      if (type === SERVICE_CATALOGS_ENUM_TYPES.STRING) {\n        return SERVICE_CATALOGS[id];\n      }\n    }\n\n    // Validate that the id is a string.\n    if (typeof id === 'string') {\n      // Validate that the desired type is a string.\n      if (type === SERVICE_CATALOGS_ENUM_TYPES.STRING) {\n        return SERVICE_CATALOGS.includes(id) ? id : undefined;\n      }\n\n      // Validate that the desired type is a number.\n      if (type === SERVICE_CATALOGS_ENUM_TYPES.NUMBER) {\n        return SERVICE_CATALOGS.includes(id) ? SERVICE_CATALOGS.indexOf(id) : undefined;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Generate a formatted array based on the object received from the **U2C**\n   * service for usage in the {@link ServiceRegistry#load} method.\n   *\n   * @public\n   * @static\n   * @memberof ServiceRegistry\n   * @param {MapRemoteCatalogPTO} pto - The parameter transfer object.\n   * @throws - If the target catalog does not exist.\n   * @returns {Array<ServiceHost#ServiceHostConstructorPTO>}\n   */\n  static mapRemoteCatalog({catalog, hostCatalog, serviceLinks}) {\n    // Collect the service catalog name if needed.\n    const catalogIndex = ServiceRegistry.mapCatalogName({\n      id: catalog,\n      type: SERVICE_CATALOGS_ENUM_TYPES.STRING,\n    });\n\n    // Validate that the target catalog exists.\n    if (!SERVICE_CATALOGS.includes(catalogIndex)) {\n      throw new Error(`service-catalogs: '${catalog}' is not a valid catalog`);\n    }\n\n    // Map the remote catalog to a mountable host array.\n    return Object.keys(hostCatalog).reduce((output, key) => {\n      output.push(\n        ...hostCatalog[key].map((host) => ({\n          catalog: catalogIndex,\n          defaultUri: serviceLinks[host.id.split(':')[3]],\n          hostGroup: key,\n          id: host.id,\n          priority: host.priority,\n          uri: host.host,\n        }))\n      );\n\n      return output;\n    }, []);\n  }\n}\n"],"mappings":"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"}