{"version":3,"names":["_webexCore","require","Teams","WebexPlugin","extend","create","team","request","method","service","resource","body","then","res","get","options","id","concat","qs","items","list","_this","Page","webex","update","version","_default","exports","default"],"sources":["teams.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\n\n/**\n * @typedef {Object} TeamObject\n * @property {string} id - (server generated) Unique identifier for the team\n * @property {string} name - The name of the team\n * @property {isoDate} created - (server generated) The date and time that the\n * team was created\n */\n\n/**\n * @class\n */\nconst Teams = WebexPlugin.extend({\n  /**\n   * Create a new team.\n   * @instance\n   * @param {TeamObject} team\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * webex.teams.create({name: 'Create Team Example'})\n   *   .then(function(team) {\n   *     var assert = require('assert');\n   *     assert(team.id);\n   *     assert(team.name);\n   *     assert(team.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(team) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'teams',\n      body: team,\n    }).then((res) => res.body);\n  },\n\n  /**\n   * Returns a single team\n   * @instance\n   * @param {TeamObject|string} team\n   * @param {Object} options\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * var team;\n   * webex.teams.create({name: 'Get Team Example'})\n   *   .then(function(r) {\n   *     team = r;\n   *     return webex.teams.get(team.id);\n   *   })\n   *   .then(function(team2) {\n   *     var assert = require('assert');\n   *     assert.equal(team2.id, team.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(team, options) {\n    const id = team.id || team;\n\n    return this.request({\n      service: 'hydra',\n      resource: `teams/${id}`,\n      qs: options,\n    }).then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * List teams.\n   * @instance\n   * @param {object} options\n   * @param {object} options.max Limit the maximum number of teams in the\n   * response.\n   * @returns {Promise<Page<TeamObject>>}\n   * @memberof Teams\n   * @example\n   * var createdRooms;\n   * Promise.all([\n   *   webex.teams.create({name: 'List Teams Example 1'}),\n   *   webex.teams.create({name: 'List Teams Example 2'}),\n   *   webex.teams.create({name: 'List Teams Example 3'})\n   * ])\n   *   .then(function(r) {\n   *     createdRooms = r;\n   *     return webex.teams.list({max: 3});\n   *   })\n   *   .then(function(teams) {\n   *     var assert = require('assert');\n   *     assert(teams.length === 3);\n   *     for (var i = 0; i < teams.items.length; i+= 1) {\n   *       assert(createdRooms.filter(function(room) {\n   *         return room.id === teams.items[i].id;\n   *       }).length === 1);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'teams/',\n      qs: options,\n    }).then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Update a team.\n   * @instance\n   * @param {TeamObject} team\n   * @returns {Promise<TeamObject>}\n   * @memberof Teams\n   * @example\n   * var teams;\n   * webex.teams.create({name: 'Update Team Example'})\n   *   .then(function(r) {\n   *     teams = r;\n   *     teams.name = 'Teams Example (Updated Title)';\n   *     return webex.teams.update(teams);\n   *   })\n   *   .then(function() {\n   *     return webex.teams.get(teams.id);\n   *   })\n   *   .then(function(teams) {\n   *     var assert = require('assert');\n   *     assert.equal(teams.name, 'Teams Example (Updated Title)');\n   *     return 'success';\n   *   });\n   *   // => success\n\n   */\n  update(team) {\n    const {id} = team;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `teams/${id}`,\n      body: team,\n    }).then((res) => res.body);\n  },\n});\n\nexport default Teams;\n"],"mappings":";;;;;;;AAIA,IAAAA,UAAA,GAAAC,OAAA;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAMC,KAAK,GAAGC,sBAAW,CAACC,MAAM,CAAC;EAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM,WAAAA,OAACC,IAAI,EAAE;IACX,OAAO,IAAI,CAACC,OAAO,CAAC;MAClBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE,OAAO;MAChBC,QAAQ,EAAE,OAAO;MACjBC,IAAI,EAAEL;IACR,CAAC,CAAC,CAACM,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACF,IAAI;IAAA,EAAC;EAC5B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,GAAG,WAAAA,IAACR,IAAI,EAAES,OAAO,EAAE;IACjB,IAAMC,EAAE,GAAGV,IAAI,CAACU,EAAE,IAAIV,IAAI;IAE1B,OAAO,IAAI,CAACC,OAAO,CAAC;MAClBE,OAAO,EAAE,OAAO;MAChBC,QAAQ,WAAAO,MAAA,CAAWD,EAAE,CAAE;MACvBE,EAAE,EAAEH;IACN,CAAC,CAAC,CAACH,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACF,IAAI,CAACQ,KAAK,IAAIN,GAAG,CAACF,IAAI;IAAA,EAAC;EAC9C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,IAAI,WAAAA,KAACL,OAAO,EAAE;IAAA,IAAAM,KAAA;IACZ,OAAO,IAAI,CAACd,OAAO,CAAC;MAClBE,OAAO,EAAE,OAAO;MAChBC,QAAQ,EAAE,QAAQ;MAClBQ,EAAE,EAAEH;IACN,CAAC,CAAC,CAACH,IAAI,CAAC,UAACC,GAAG;MAAA,OAAK,IAAIS,eAAI,CAACT,GAAG,EAAEQ,KAAI,CAACE,KAAK,CAAC;IAAA,EAAC;EAC7C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEEC,MAAM,WAAAA,OAAClB,IAAI,EAAE;IACX,IAAOU,EAAE,GAAIV,IAAI,CAAVU,EAAE;IAET,OAAO,IAAI,CAACT,OAAO,CAAC;MAClBC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,OAAO;MAChBC,QAAQ,WAAAO,MAAA,CAAWD,EAAE,CAAE;MACvBL,IAAI,EAAEL;IACR,CAAC,CAAC,CAACM,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKA,GAAG,CAACF,IAAI;IAAA,EAAC;EAC5B,CAAC;EAAAc,OAAA;AACH,CAAC,CAAC;AAAC,IAAAC,QAAA,GAEYxB,KAAK;AAAAyB,OAAA,CAAAC,OAAA,GAAAF,QAAA"}