"use strict";

var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));
var _weakMap = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/weak-map"));
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));
var _events = require("events");
var _sinon = _interopRequireDefault(require("sinon"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/* eslint require-jsdoc: [0] */

var closeHandlers = new _weakMap.default();
var errorHandlers = new _weakMap.default();
var messageHandlers = new _weakMap.default();
var openHandlers = new _weakMap.default();
function setHandler(scope, map, type, fn) {
  var handler = map.get(scope);
  if (handler) {
    scope.removeListener(type, handler);
  }
  map.set(scope, fn);
  if (fn) {
    scope.on(type, fn);
  }
}

// eslint-disable-next-line
function noop() {}

/**
 * Mock of WebSocket Class
 * @returns {MockWebSocket}
 */
var MockWebSocket = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2.default)(MockWebSocket, _EventEmitter);
  var _super = _createSuper(MockWebSocket);
  function MockWebSocket(url) {
    var _this;
    var protocol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck2.default)(this, MockWebSocket);
    _this = _super.call(this);
    _this.url = url;
    _this.protocol = protocol;
    _this.options = options;
    _sinon.default.spy((0, _assertThisInitialized2.default)(_this), 'send');
    _sinon.default.spy((0, _assertThisInitialized2.default)(_this), 'close');
    _this.sequenceNumber = 0;
    _this.on('message', function () {
      _this.sequenceNumber += 1;
    });
    return _this;
  }
  (0, _createClass2.default)(MockWebSocket, [{
    key: "onclose",
    get: function get() {
      return closeHandlers.get(this) || noop;
    },
    set: function set(fn) {
      setHandler(this, closeHandlers, 'close', fn);
    }
  }, {
    key: "onerror",
    get: function get() {
      return errorHandlers.get(this) || noop;
    },
    set: function set(fn) {
      setHandler(this, errorHandlers, 'error', fn);
    }
  }, {
    key: "onmessage",
    get: function get() {
      return messageHandlers.get(this) || noop;
    },
    set: function set(fn) {
      setHandler(this, messageHandlers, 'message', fn);
    }
  }, {
    key: "onopen",
    get: function get() {
      return openHandlers.get(this) || noop;
    },
    set: function set(fn) {
      setHandler(this, openHandlers, 'open', fn);
    }
  }, {
    key: "close",
    value: function close(code, reason) {
      this.readyState = 3;
      this.readyState = 4;
      this.onclose({
        code: code,
        reason: reason
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;
      this.readyState = 1;
      this.emit('open');
      process.nextTick(function () {
        _this2.emit('message', {
          data: (0, _stringify.default)({
            id: 'mockid',
            data: {
              eventType: 'mercury.buffer_state'
            }
          })
        });
      });
    }
  }, {
    key: "send",
    value: function send(obj) {
      var _this3 = this;
      try {
        obj = JSON.parse(obj);
      } catch (e) {
        // ignore
      }
      if (obj.type === 'ping') {
        process.nextTick(function () {
          _this3.emit('message', {
            data: (0, _stringify.default)({
              id: obj.id,
              type: 'pong',
              sequenceNumber: _this3.sequenceNumber
            })
          });
        });
      }
    }
  }, {
    key: "addEventListener",
    value: function addEventListener() {
      return this.on.apply(this, arguments);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener() {
      return this.removeListener.apply(this, arguments);
    }
  }]);
  return MockWebSocket;
}(_events.EventEmitter);
exports.default = MockWebSocket;
//# sourceMappingURL=index.js.map
