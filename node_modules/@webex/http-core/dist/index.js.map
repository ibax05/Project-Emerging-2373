{"version":3,"names":["_httpStatus","_interopRequireDefault","require","_request2","_progressEvent","_interceptor","_httpError","_detect","protorequest","_curry2","default","defaultOptions","options","_isString2","uri","arguments","forEach","prop","descriptor","_getOwnPropertyDescriptor","_assign2","enumerable","writable","_defineProperty","_defaults2","json","_deleteProperty","logger","console","_request","interceptors","HttpStatusInterceptor","create","defaults","exports","request"],"sources":["index.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {assign, curry, defaults as lodashDefaults, isString} from 'lodash';\n\nimport HttpStatusInterceptor from './interceptors/http-status';\nimport _request from './request';\n\n// Curry protorequest so we generate a function with default options built in.\nconst protorequest = curry(function protorequest(defaultOptions, options) {\n  // allow for options to be a string (and therefore expect options in the third\n  // position) to match request's api.\n  if (isString(options)) {\n    const uri = options;\n\n    /* eslint prefer-rest-params: [0] */\n    options = arguments[2] || {};\n    options.uri = uri;\n  }\n\n  // Hide useless elements from logs\n  ['download', 'interceptors', 'logger', 'upload'].forEach((prop) => {\n    let descriptor = Reflect.getOwnPropertyDescriptor(options, prop);\n\n    descriptor = assign({}, descriptor, {\n      enumerable: false,\n      writable: true,\n    });\n    Reflect.defineProperty(options, prop, descriptor);\n  });\n\n  lodashDefaults(options, defaultOptions);\n\n  if (!options.json && options.json !== false) {\n    Reflect.deleteProperty(options, 'json');\n  }\n\n  options.logger = options.logger || this.logger || console;\n\n  return _request(options);\n});\n\nconst defaultOptions = {\n  json: true,\n  interceptors: [\n    // Reminder: this is supposed to be an instantiated interceptor.\n    HttpStatusInterceptor.create(),\n  ],\n};\n\nexport const defaults = protorequest;\nexport const request = protorequest(defaultOptions);\nexport {default as ProgressEvent} from './progress-event';\nexport {default as Interceptor} from './lib/interceptor';\nexport {default as HttpError} from './http-error';\nexport {default as HttpStatusInterceptor} from './interceptors/http-status';\nexport {default as detect} from './lib/detect';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,SAAA,GAAAF,sBAAA,CAAAC,OAAA;AA8CA,IAAAE,cAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,UAAA,GAAAL,sBAAA,CAAAC,OAAA;AAEA,IAAAK,OAAA,GAAAN,sBAAA,CAAAC,OAAA;AAhDA;AACA,IAAMM,YAAY,GAAG,IAAAC,OAAA,CAAAC,OAAA,EAAM,SAASF,YAAYA,CAACG,cAAc,EAAEC,OAAO,EAAE;EACxE;EACA;EACA,IAAI,IAAAC,UAAA,CAAAH,OAAA,EAASE,OAAO,CAAC,EAAE;IACrB,IAAME,GAAG,GAAGF,OAAO;;IAEnB;IACAA,OAAO,GAAGG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5BH,OAAO,CAACE,GAAG,GAAGA,GAAG;EACnB;;EAEA;EACA,CAAC,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAACE,OAAO,CAAC,UAACC,IAAI,EAAK;IACjE,IAAIC,UAAU,GAAG,IAAAC,yBAAA,CAAAT,OAAA,EAAiCE,OAAO,EAAEK,IAAI,CAAC;IAEhEC,UAAU,GAAG,IAAAE,QAAA,CAAAV,OAAA,EAAO,CAAC,CAAC,EAAEQ,UAAU,EAAE;MAClCG,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF,IAAAC,eAAA,CAAAb,OAAA,EAAuBE,OAAO,EAAEK,IAAI,EAAEC,UAAU,CAAC;EACnD,CAAC,CAAC;EAEF,IAAAM,UAAA,CAAAd,OAAA,EAAeE,OAAO,EAAED,cAAc,CAAC;EAEvC,IAAI,CAACC,OAAO,CAACa,IAAI,IAAIb,OAAO,CAACa,IAAI,KAAK,KAAK,EAAE;IAC3C,IAAAC,eAAA,CAAAhB,OAAA,EAAuBE,OAAO,EAAE,MAAM,CAAC;EACzC;EAEAA,OAAO,CAACe,MAAM,GAAGf,OAAO,CAACe,MAAM,IAAI,IAAI,CAACA,MAAM,IAAIC,OAAO;EAEzD,OAAO,IAAAC,iBAAQ,EAACjB,OAAO,CAAC;AAC1B,CAAC,CAAC;AAEF,IAAMD,cAAc,GAAG;EACrBc,IAAI,EAAE,IAAI;EACVK,YAAY,EAAE;EACZ;EACAC,mBAAqB,CAACC,MAAM,EAAE;AAElC,CAAC;AAEM,IAAMC,QAAQ,GAAGzB,YAAY;AAAC0B,OAAA,CAAAD,QAAA,GAAAA,QAAA;AAC9B,IAAME,OAAO,GAAG3B,YAAY,CAACG,cAAc,CAAC;AAACuB,OAAA,CAAAC,OAAA,GAAAA,OAAA"}