"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = runAbstractStorageAdapterSpec;
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _testHelperChai = require("@webex/test-helper-chai");
/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

function noop() {
  // intentionally empty
}
function runAbstractStorageAdapterSpec(adapter) {
  var key = 'key';
  var namespace = 'namespace';
  var obj = {
    a: 1
  };
  var primitive = 1;
  var options = {
    logger: {
      error: noop,
      warning: noop,
      log: noop,
      info: noop,
      debug: noop,
      trace: noop
    }
  };
  describe('#bind()', function () {
    // namespace and options.logger are required more to make sure we always
    // call bind correctly rather than to make sure the adapter uses them.
    it('requires a namespace', function () {
      return _testHelperChai.assert.isRejected(adapter.bind(), /`namespace` is required/);
    });
    it('requires a logger option', function () {
      return _testHelperChai.assert.isRejected(adapter.bind(namespace), /`options.logger` is required/);
    });
    it('returns a db interface', function () {
      return adapter.bind(namespace, options);
    });
    describe('bound', function () {
      var bound;
      beforeAll(function () {
        return adapter.bind(namespace, options).then(function (b) {
          bound = b;
        });
      });
      describe('#put()', function () {
        it('puts a primitive into the store', function () {
          return bound.put(key, primitive).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, primitive);
            });
          });
        });
        [0, false, null].forEach(function (falsey) {
          it("puts falsey primitive `".concat(falsey, "` into the store"), function () {
            return bound.put(key, falsey).then(function () {
              return bound.get(key).then(function (result) {
                return _testHelperChai.assert.deepEqual(result, falsey);
              });
            });
          });
        });
        it('puts an object into the store', function () {
          return bound.put(key, obj).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, obj);
            });
          });
        });
        it('puts an array into the store', function () {
          return bound.put(key, [1, 2]).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, [1, 2]);
            });
          });
        });
        it('puts an array back into the store', function () {
          return bound.put(key, [1, 2]).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, [1, 2]);
            });
          }).then(function () {
            return bound.put(key, [1, 2, 3]);
          }).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, [1, 2, 3]);
            });
          });
        });
        it('handles concurrency', function () {
          return _promise.default.all([bound.put(key, 1), bound.put(key, 2), bound.put(key, 3)]).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, 3);
            });
          });
        });
        it('puts same key in different namespaces', function () {
          return bound.put(key, primitive).then(function () {
            return adapter.bind('namespace2', options).then(function (b) {
              var primitive2 = 2;
              b.put(key, primitive2).then(function () {
                return _promise.default.all([bound.get(key).then(function (result) {
                  return _testHelperChai.assert.deepEqual(result, primitive);
                }), b.get(key).then(function (result) {
                  return _testHelperChai.assert.deepEqual(result, primitive2);
                })]);
              });
            });
          });
        });
      });
      describe('#get()', function () {
        it('gets a primitive from the store', function () {
          return bound.put(key, primitive).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, primitive);
            });
          });
        });
        it('gets an object from the store', function () {
          return bound.put(key, obj).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, obj);
            });
          });
        });
        it('rejects if the key cannot be found', function () {
          return _testHelperChai.assert.isRejected(bound.get('notakey'));
        });
      });
      describe('#del()', function () {
        it('removes a primitive from the store', function () {
          return bound.put(key, primitive).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, primitive);
            });
          }).then(function () {
            return bound.del(key);
          }).then(function () {
            return _testHelperChai.assert.isRejected(bound.get(key));
          });
        });
        it('removes an object from the store', function () {
          return bound.put(key, obj).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, obj);
            });
          }).then(function () {
            return bound.del(key);
          }).then(function () {
            return _testHelperChai.assert.isRejected(bound.get(key));
          });
        });
        it('removes an item from the store when putting `undefined`', function () {
          return bound.put(key, undefined).then(function () {
            return bound.del(key);
          }).then(function () {
            return _testHelperChai.assert.isRejected(bound.get(key));
          });
        });
      });
      describe('#clear()', function () {
        it('clears a primitive from the store', function () {
          return bound.put(key, primitive).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, primitive);
            });
          }).then(function () {
            return bound.clear();
          }).then(function () {
            return _testHelperChai.assert.isRejected(bound.get(key));
          });
        });
        it('clears an object from the store', function () {
          return bound.put(key, obj).then(function () {
            return bound.get(key).then(function (result) {
              return _testHelperChai.assert.deepEqual(result, obj);
            });
          }).then(function () {
            return bound.clear(key);
          }).then(function () {
            return _testHelperChai.assert.isRejected(bound.get(key));
          });
        });
        it('clears an item from the store when putting `undefined`', function () {
          return bound.put(key, undefined).then(function () {
            return bound.clear(key);
          }).then(function () {
            return _testHelperChai.assert.isRejected(bound.get(key));
          });
        });
      });
    });
  });
}
//# sourceMappingURL=index.js.map
