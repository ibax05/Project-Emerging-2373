{"version":3,"names":["_common","require","_webexCore","_verbToType","ownKeys","object","enumerableOnly","keys","_Object$keys","_Object$getOwnPropertySymbols","symbols","filter","sym","_Object$getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","Object","forEach","key","_defineProperty2","default","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","verbToType","SDK_EVENT","INTERNAL","ACTIVITY_VERB","SHARE","EXTERNAL","EVENT_TYPE","CREATED","POST","DELETE","DELETED","getRoomType","roomTags","includes","ACTIVITY_TAG","ONE_ON_ONE","SPACE_TYPE","DIRECT","GROUP","Messages","WebexPlugin","extend","initialize","_len","args","Array","_key","_apply","prototype","listen","_this","createEventEnvelope","webex","RESOURCE","MESSAGES","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","WEBEX_ACTIVITY","event","onWebexApiEvent","create","message","file","logger","warn","files","_deleteProperty","_isArray2","reduce","type","options","method","service","resource","request","res","body","update","altMessage","id","roomId","error","concat","get","items","list","_this2","qs","Page","remove","statusCode","undefined","fire","_this3","trigger","_ref","activity","data","verb","getMessageEvent","_activity$actor","actor","actorId","entryUUID","emailAddress","objectId","_activity$target","roomUrl","url","tags","cluster","getHydraClusterString","combinedEvent","_cloneDeep2","personId","buildHydraPersonId","_promise","resolve","buildHydraMessageId","personEmail","buildHydraRoomId","roomType","version","_default","exports"],"sources":["messages.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  buildHydraMessageId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  createEventEnvelope,\n  getHydraClusterString,\n} from '@webex/common';\nimport {Page, WebexPlugin} from '@webex/webex-core';\nimport {cloneDeep, isArray} from 'lodash';\n\nconst verbToType = {\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE]: SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED,\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST]: SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED,\n  [SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE]: SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED,\n};\n\nconst getRoomType = (roomTags) =>\n  roomTags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE)\n    ? SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT\n    : SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the message\n * @property {email} personEmail - The email for the author of the message\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/docs/api/basics#message-attachments|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Webex as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/docs/api/basics#message-attachments|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\nconst Messages = WebexPlugin.extend({\n  /**\n   * Initializer used to generate Messages\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming messages events\n   * This is an alternate approach to registering for messages webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The messages.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload: `text`, `markdown`, and `files`.\n   * These fields are available when their details are included in the web socket's\n   * `activity` object. Retrieving other fields, such as the `html` field,\n   * will require a manual request to get the corresponding message object.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://webex.github.io/webex-js-sdk/samples/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.messages.listen()\n   *   .then(() => {\n   *     console.log('listening to message events');\n   *     webex.messages.on('created', (event) => console.log(`Got a message:created event:\\n${event}`));\n   *     webex.messages.on('deleted', (event) => console.log(`Got a message:deleted event:\\n${event}`));\n   *   })\n   *   .catch((e) => console.error(`Unable to register for message events: ${e}`));\n   * // Some app logic...\n   * // When it is time to cleanup\n   * webex.messages.stopListening();\n   * webex.messages.off('created');\n   * webex.messages.off('deleted');\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex, SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES).then(\n      (envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury, SDK_EVENT.INTERNAL.WEBEX_ACTIVITY, (event) =>\n            this.onWebexApiEvent(event)\n          );\n        });\n      }\n    );\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = 'body';\n\n    if (message.file) {\n      this.logger.warn(\n        'Supplying a single `file` property is deprecated; please supply a `files` array'\n      );\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (\n      isArray(message.files) &&\n      message.files.reduce((type, file) => type || typeof file !== 'string', false)\n    ) {\n      key = 'formData';\n    }\n\n    const options = {\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages',\n      [key]: message,\n    };\n\n    return this.request(options).then((res) => res.body);\n  },\n  /**\n   * Put an updated message and/or media content into a room instead of existing message.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @param {MessageObject} altMessage\n   * @returns {Promise<MessageObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.update(message,{markdown:`**What up**`});\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.update(message.id,{roomId:message.roomId,text:'Howdy!'});\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(message, altMessage) {\n    const id = message.id || message;\n    let key = 'body';\n\n    if (message.file) {\n      this.logger.warn(\n        'Supplying a single `file` property is deprecated; please supply a `files` array'\n      );\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (\n      message.files &&\n      isArray(message.files) &&\n      message.files.reduce((type, file) => type || typeof file !== 'string', false)\n    ) {\n      key = 'formData';\n    }\n\n    if (!altMessage.roomId && !message.roomId) {\n      this.logger.error(\n        'Error: RoomID is mandatory for message update call in one of the parameter, message or altMessage'\n      );\n    } else {\n      /* if altMessage doesnt contain RoomId use roomId from message object. \n      I dont understand why RESTAPI call has RoomId Mandatory in body something webex Developers to clarity. \n      In my opinion messageId provided in REST URL call should be enough to get roomID at serverside\n      */\n      altMessage.roomId = altMessage.roomId ? altMessage.roomId : message.roomId;\n\n      const options = {\n        method: 'PUT',\n        service: 'hydra',\n        resource: 'messages/'.concat(id),\n        [key]: altMessage,\n      };\n\n      return this.request(options).then((res) => res.body);\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      service: 'hydra',\n      resource: `messages/${id}`,\n    }).then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authenticated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * webex.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options,\n    }).then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * webex.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `messages/${id}`,\n    }).then((res) => {\n      // Firefox has some issues with 204s and/or DELETE. This should move to\n      // http-core\n      if (res.statusCode === 204) {\n        return undefined;\n      }\n\n      return res.body;\n    });\n  },\n\n  /**\n   * Curry the 'trigger' method\n   * @private\n   * @memberof Messages\n   * @param {string} type the type of event to fire\n   * @returns {function} takes event and triggers it\n   */\n  fire(type) {\n    return (event) => this.trigger(type, event);\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} event\n   * @param {Object} event.data contains the data of the event\n   * @param {Object} event.data.activity the activity that triggered the event\n   * @returns {void}\n   */\n  onWebexApiEvent({data: {activity}}) {\n    const type = verbToType[activity.verb];\n\n    if (!type) {\n      return;\n    }\n\n    this.getMessageEvent(activity, type).then(this.fire(type));\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webhook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} activity from mercury\n   * @param {String} type the type of event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent(activity, type) {\n    const {\n      id,\n      actor: {entryUUID: actorId, emailAddress},\n      object: {id: objectId},\n      target: {id: roomId, url: roomUrl, tags: roomTags},\n    } = activity;\n\n    const cluster = getHydraClusterString(this.webex, roomUrl);\n    const combinedEvent = cloneDeep(this.eventEnvelope);\n\n    combinedEvent.event = type;\n    if (type === SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n      // Cannot fetch since the message is deleted\n      // Convert the Mercury event to a Hydra event\n      const personId = buildHydraPersonId(actorId, cluster);\n\n      return Promise.resolve({\n        ...combinedEvent,\n        actorId: personId,\n        data: {\n          id: buildHydraMessageId(objectId, cluster),\n          personEmail: emailAddress || actorId,\n          personId,\n          roomId: buildHydraRoomId(roomId, cluster),\n          roomType: getRoomType(roomTags),\n        },\n      });\n    }\n\n    return this.get(buildHydraMessageId(id, cluster)).then((data) => ({\n      ...combinedEvent,\n      actorId: data.personId,\n      data,\n    }));\n  },\n});\n\nexport default Messages;\n"],"mappings":"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;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,GAAG,WAAAA,IAACtB,OAAO,EAAE;IACX,IAAMkB,EAAE,GAAGlB,OAAO,CAACkB,EAAE,IAAIlB,OAAO;IAEhC,OAAO,IAAI,CAACa,OAAO,CAAC;MAClBF,OAAO,EAAE,OAAO;MAChBC,QAAQ,cAAAS,MAAA,CAAcH,EAAE;IAC1B,CAAC,CAAC,CAAC7B,IAAI,CAAC,UAACyB,GAAG;MAAA,OAAKA,GAAG,CAACC,IAAI,CAACQ,KAAK,IAAIT,GAAG,CAACC,IAAI;IAAA,EAAC;EAC9C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,IAAI,WAAAA,KAACf,OAAO,EAAE;IAAA,IAAAgB,MAAA;IACZ,OAAO,IAAI,CAACZ,OAAO,CAAC;MAClBF,OAAO,EAAE,OAAO;MAChBC,QAAQ,EAAE,UAAU;MACpBc,EAAE,EAAEjB;IACN,CAAC,CAAC,CAACpB,IAAI,CAAC,UAACyB,GAAG;MAAA,OAAK,IAAIa,eAAI,CAACb,GAAG,EAAEW,MAAI,CAACvC,KAAK,CAAC;IAAA,EAAC;EAC7C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0C,MAAM,WAAAA,OAAC5B,OAAO,EAAE;IACd,IAAMkB,EAAE,GAAGlB,OAAO,CAACkB,EAAE,IAAIlB,OAAO;IAEhC,OAAO,IAAI,CAACa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"}