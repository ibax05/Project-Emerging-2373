{"version":3,"names":["_base","require","_constants","hydraBaseUrl","isRequired","Error","constructHydraId","type","arguments","length","undefined","id","cluster","toUpperCase","hydraTypes","PEOPLE","ORGANIZATION","encode","concat","deconstructHydraId","payload","decode","split","pop","buildHydraMessageId","uuid","MESSAGE","buildHydraPersonId","buildHydraRoomId","ROOM","buildHydraOrgId","buildHydraMembershipId","personUUID","spaceUUID","MEMBERSHIP","getHydraClusterString","webex","conversationUrl","internalClusterString","internal","services","getClusterId","startsWith","INTERNAL_US_CLUSTER_NAME","INTERNAL_US_INTEGRATION_CLUSTER_NAME","clusterParts","getHydraRoomType","tags","includes","SDK_EVENT","INTERNAL","ACTIVITY_TAG","ONE_ON_ONE","EXTERNAL","SPACE_TYPE","DIRECT","GROUP","getHydraFiles","activity","hydraFiles","files","object","items","i","contentId","CONTENT","push"],"sources":["uuid-utils.js"],"sourcesContent":["import {encode, decode} from './base64';\nimport {\n  SDK_EVENT,\n  hydraTypes,\n  INTERNAL_US_CLUSTER_NAME,\n  INTERNAL_US_INTEGRATION_CLUSTER_NAME,\n} from './constants';\n\nconst hydraBaseUrl = 'https://api.ciscospark.com/v1';\n\nconst isRequired = () => {\n  throw Error('parameter is required');\n};\n\n/**\n * Constructs a Hydra ID for a given UUID and type.\n *\n * @export\n * @param {string} type one of PEOPLE, TEAM, ROOM\n * @param {any} id identifying the \"TYPE\" object\n * @param {string} cluster containing the \"TYPE\" object\n * @returns {string}\n */\nexport function constructHydraId(type = isRequired(), id = isRequired(), cluster = 'us') {\n  if (!type.toUpperCase) {\n    throw Error('\"type\" must be a string');\n  }\n\n  if (type === hydraTypes.PEOPLE || type === hydraTypes.ORGANIZATION) {\n    // Cluster is always \"us\" for people and orgs\n    return encode(`ciscospark://us/${type.toUpperCase()}/${id}`);\n  }\n\n  return encode(`ciscospark://${cluster}/${type.toUpperCase()}/${id}`);\n}\n\n/**\n * @typedef {Object} DeconstructedHydraId\n * @property {UUID} id identifying the object\n * @property {String} type of the object\n * @property {String} cluster containing the object\n */\n\n/**\n * Deconstructs a Hydra ID.\n *\n * @export\n * @param {String} id Hydra style id\n * @returns {DeconstructedHydraId} deconstructed id\n */\nexport function deconstructHydraId(id) {\n  const payload = decode(id).split('/');\n\n  return {\n    id: payload.pop(),\n    type: payload.pop(),\n    cluster: payload.pop(),\n  };\n}\n\n/**\n * Constructs a Hydra ID for a message based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the message\n * @returns {string}\n */\nexport function buildHydraMessageId(uuid, cluster) {\n  return constructHydraId(hydraTypes.MESSAGE, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for a person based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the person\n * @returns {string}\n */\nexport function buildHydraPersonId(uuid, cluster) {\n  return constructHydraId(hydraTypes.PEOPLE, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for a room based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the room\n * @returns {string}\n */\nexport function buildHydraRoomId(uuid, cluster) {\n  return constructHydraId(hydraTypes.ROOM, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for an organization based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the organization\n * @returns {string}\n */\nexport function buildHydraOrgId(uuid, cluster) {\n  return constructHydraId(hydraTypes.ORGANIZATION, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for an membership based on an\n * internal UUID for the person, and the space\n *\n * @export\n * @param {any} personUUID\n * @param {any} spaceUUID\n * @param {string} cluster containing the membership\n * @returns {string}\n */\nexport function buildHydraMembershipId(personUUID, spaceUUID, cluster) {\n  return constructHydraId(hydraTypes.MEMBERSHIP, `${personUUID}:${spaceUUID}`, cluster);\n}\n\n/**\n * Returns a hydra cluster string based on a conversation url\n * @private\n * @memberof Messages\n * @param {Object} webex sdk instance\n * @param {String} conversationUrl url of space where activity took place\n * @returns {String} string suitable for UUID -> public ID encoding\n */\nexport function getHydraClusterString(webex, conversationUrl) {\n  const internalClusterString = webex.internal.services.getClusterId(conversationUrl);\n\n  if (\n    internalClusterString.startsWith(INTERNAL_US_CLUSTER_NAME) ||\n    internalClusterString.startsWith(INTERNAL_US_INTEGRATION_CLUSTER_NAME)\n  ) {\n    // Original US cluster is simply 'us' for backwards compatibility\n    return 'us';\n  }\n  const clusterParts = internalClusterString.split(':');\n\n  if (clusterParts.length < 3) {\n    throw Error(`Unable to determine cluster for convo: ${conversationUrl}`);\n  }\n\n  return `${clusterParts[0]}:${clusterParts[1]}:${clusterParts[2]}`;\n}\n\n/**\n * Returns a Hydra roomType based on conversation tags\n *\n * @export\n * @param {arra} tags\n * @returns {string}\n */\nexport function getHydraRoomType(tags) {\n  if (tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE)) {\n    return SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n  }\n\n  return SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n}\n\n/**\n * Returns file URLs for the activity, adhering to Hydra details,\n * e.g., https://api.ciscospark.com/v1/contents/Y2lzY29zcGF...\n * @see https://developer.webex.com/docs/api/v1/messages/get-message-details\n * @param {Object} activity from mercury\n * @param {string} cluster containing the files\n * @returns {Array} file URLs\n */\nexport function getHydraFiles(activity, cluster) {\n  const hydraFiles = [];\n  const {files} = activity.object;\n\n  if (files) {\n    const {items} = files;\n\n    // Note: Generated ID is dependent on file order.\n    for (let i = 0; i < items.length; i += 1) {\n      const contentId = constructHydraId(hydraTypes.CONTENT, `${activity.id}/${i}`, cluster);\n\n      hydraFiles.push(`${hydraBaseUrl}/contents/${contentId}`);\n    }\n  }\n\n  return hydraFiles;\n}\n"],"mappings":"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"}