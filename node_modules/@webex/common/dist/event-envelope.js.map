{"version":3,"names":["_constants","require","createEventEnvelope","webex","resource","ensureMyIdIsAvailable","then","_promise","default","resolve","createdBy","internal","me","id","orgId","ownedBy","SDK_EVENT","EXTERNAL","OWNER","CREATOR","status","STATUS","ACTIVE","created","Date","toISOString","data","catch","e","reject","Error","concat","message","_x","_ensureMyIdIsAvailable","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","people","get","person","stop"],"sources":["event-envelope.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SDK_EVENT} from './constants';\n\n/**\n * Creates a 'webhook' envelope to wrap Webex events in\n * @param {object} webex - sdk object\n * @param {string} resource - resource to create an envelope for\n * @returns {object} - Returns a promise of an event envelope object\n */\nexport function createEventEnvelope(webex, resource) {\n  return ensureMyIdIsAvailable(webex)\n    .then(() =>\n      Promise.resolve({\n        createdBy: webex.internal.me.id,\n        orgId: webex.internal.me.orgId,\n        resource,\n        // id -- webhook id concept does not correlate to SDK socket event\n        // name -- webhook name concept does not correlate to SDK socket event\n        // targetUrl -- targetUrl concept does not correlate to SDK socket event\n        // secret -- secret concept does not correlate to SDK socket event\n        ownedBy: SDK_EVENT.EXTERNAL.OWNER.CREATOR,\n        status: SDK_EVENT.EXTERNAL.STATUS.ACTIVE,\n        created: new Date().toISOString(),\n        data: {},\n      })\n    )\n    .catch((e) => {\n      Promise.reject(\n        new Error(`Unable to get person info for ${resource} \\\nevent envelope: ${e.message}`)\n      );\n    });\n}\n\n/**\n * Stores SDK users info in the sdk object if it doesn't already exist\n * @param {object} webex - sdk object\n * @returns {Promise} - Returns a promise that user info will be available\n */\nexport async function ensureMyIdIsAvailable(webex) {\n  // If we don't have it, save info about our user\n  if ('me' in webex.internal) {\n    return Promise.resolve();\n  }\n\n  return webex.people.get('me').then((person) => {\n    webex.internal.me = person;\n\n    return Promise.resolve();\n  });\n}\n"],"mappings":";;;;;;;;;;;;AAIA,IAAAA,UAAA,GAAAC,OAAA;AAJA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,mBAAmBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACnD,OAAOC,qBAAqB,CAACF,KAAK,CAAC,CAChCG,IAAI,CAAC;IAAA,OACJC,QAAA,CAAAC,OAAA,CAAQC,OAAO,CAAC;MACdC,SAAS,EAAEP,KAAK,CAACQ,QAAQ,CAACC,EAAE,CAACC,EAAE;MAC/BC,KAAK,EAAEX,KAAK,CAACQ,QAAQ,CAACC,EAAE,CAACE,KAAK;MAC9BV,QAAQ,EAARA,QAAQ;MACR;MACA;MACA;MACA;MACAW,OAAO,EAAEC,oBAAS,CAACC,QAAQ,CAACC,KAAK,CAACC,OAAO;MACzCC,MAAM,EAAEJ,oBAAS,CAACC,QAAQ,CAACI,MAAM,CAACC,MAAM;MACxCC,OAAO,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MACjCC,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;EAAA,EACH,CACAC,KAAK,CAAC,UAACC,CAAC,EAAK;IACZrB,QAAA,CAAAC,OAAA,CAAQqB,MAAM,CACZ,IAAIC,KAAK,kCAAAC,MAAA,CAAkC3B,QAAQ,uBAAA2B,MAAA,CACzCH,CAAC,CAACI,OAAO,EAAG,CACvB;EACH,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AAJA,SAKsB3B,qBAAqBA,CAAA4B,EAAA;EAAA,OAAAC,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,uBAAA;EAAAA,sBAAA,OAAAG,kBAAA,CAAA7B,OAAA,gBAAA8B,YAAA,CAAA9B,OAAA,CAAA+B,IAAA,CAApC,SAAAC,QAAqCrC,KAAK;IAAA,OAAAmC,YAAA,CAAA9B,OAAA,CAAAiC,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,MAE3C,IAAI,IAAI1C,KAAK,CAACQ,QAAQ;YAAAgC,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACjBvC,QAAA,CAAAC,OAAA,CAAQC,OAAO,EAAE;QAAA;UAAA,OAAAkC,QAAA,CAAAG,MAAA,WAGnB3C,KAAK,CAAC4C,MAAM,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC1C,IAAI,CAAC,UAAC2C,MAAM,EAAK;YAC7C9C,KAAK,CAACQ,QAAQ,CAACC,EAAE,GAAGqC,MAAM;YAE1B,OAAO1C,QAAA,CAAAC,OAAA,CAAQC,OAAO,EAAE;UAC1B,CAAC,CAAC;QAAA;QAAA;UAAA,OAAAkC,QAAA,CAAAO,IAAA;MAAA;IAAA,GAAAV,OAAA;EAAA,CACH;EAAA,OAAAN,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}