"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
_Object$defineProperty(exports, "detectFileType", {
  enumerable: true,
  get: function get() {
    return _detectFiletype.default;
  }
});
_Object$defineProperty(exports, "processImage", {
  enumerable: true,
  get: function get() {
    return _processImage.default;
  }
});
exports.readExifData = readExifData;
exports.updateImageOrientation = updateImageOrientation;
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/asyncToGenerator"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));
var _processImage = _interopRequireDefault(require("./process-image"));
var _detectFiletype = _interopRequireDefault(require("./detect-filetype"));
/*!
 * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint no-unused-vars: ["error", { "vars": "local" }] */
// eslint-disable-next-line no-redeclare

var _require = require('safe-buffer'),
  Buffer = _require.Buffer;
var _require2 = require('exifr/dist/lite.umd'),
  parse = _require2.parse;

/**
 * Updates the image file with exif information, required to correctly rotate the image activity
 * @param {Object} file
 * @param {Object} options
 * @param {boolean} options.shouldNotAddExifData
 * @returns {Promise<Object>}
 */
function updateImageOrientation(file) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new _promise.default(function (resolve) {
    var reader = new FileReader();
    reader.readAsArrayBuffer(file);
    reader.onload = function onload() {
      var arrayBuffer = reader.result;
      var buf = Buffer.from(arrayBuffer);
      resolve(buf);
    };
  }).then(function (buf) {
    if (options.shouldNotAddExifData) {
      return buf;
    }
    return readExifData(file, buf);
  });
}

/**
 * Adds exif orientation information on the image file
 * @param {Object} file
 * @param {Object} buf
 * @returns {Promise<ExifImage>}
 */
function readExifData(_x, _x2) {
  return _readExifData.apply(this, arguments);
}
/* eslint-enable complexity */
function _readExifData() {
  _readExifData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(file, buf) {
    var exifData, Orientation, ExifImageHeight, ExifImageWidth;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(file && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg'))) {
            _context.next = 5;
            break;
          }
          _context.next = 3;
          return parse(buf, {
            translateValues: false
          });
        case 3:
          exifData = _context.sent;
          if (exifData) {
            Orientation = exifData.Orientation, ExifImageHeight = exifData.ExifImageHeight, ExifImageWidth = exifData.ExifImageWidth;
            file.orientation = Orientation;
            file.exifHeight = ExifImageHeight;
            file.exifWidth = ExifImageWidth;
            if (file.image) {
              file.image.orientation = Orientation;
            }
          }
        case 5:
          return _context.abrupt("return", buf);
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _readExifData.apply(this, arguments);
}
//# sourceMappingURL=index.js.map
