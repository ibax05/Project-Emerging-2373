{"version":3,"names":["_toArray","_interopRequireDefault","require","decryptTextProp","_curry2","default","name","ctx","key","object","transform","transforms","toArray","decryptObject","undefined","_promise","resolve","objectType","encryptionKeyUrl","all","files","items","map","item","concat","_capitalize2","decryptSubmit","inputs","decryptionFailureMessage","webex","internal","conversation","config","then","JSON","parse","catch","reason","logger","warn","decryptReaction2summary","reactions","reaction","decryptReaction2selfsummary","decryptReaction2","decryptThread","threadObject","promises","childActivities","_isArray","child","decryptMeetingcontainer","meetingContainerActivity","displayName","usableKey","push","extensions","itemsToDecrypt","filter","data","forEach","itemToDecrypt","decryptConversation","activities","error","url","avatarEncryptionKeyUrl","avatar","previous","previousValue","decryptActivity","activity","keyUrl","children","decryptMicroappinstance","microappInstance","decryptComment","comment","cards","index","decryptContent","content","contentCategory","decryptContentFiles","links","decryptContentLinks","decryptEvent","event","location","split","length","decryptFile","file","transcodedCollection","image","decryptLink","link","decryptTranscodedContent","transcodedContent","decryptImageURI","imageURI","encryption","decryptText","plaintext","keepEncryptedProperties","encryptedPropName","_camelCase2","decryptPropCardItem","array","_isInteger","String","decryptPropScr","decryptScr","scr","decryptPropSslr","sslr","decryptPropDisplayName","decryptPropContent","decryptPropModel","decryptPropLocation","decryptPropTopic","exports"],"sources":["decryption-transforms.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2020 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {camelCase, capitalize, curry} from 'lodash';\n\nimport toArray from './to-array';\n\nconst decryptTextProp = curry((name, ctx, key, object) =>\n  ctx.transform('decryptTextProp', name, key, object)\n);\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('inbound', {\n  /**\n   * This function is used recursively to decrypt various properties on conversations, activities, etc\n   * @param   {Object} ctx    An object containing a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    }\n\n    // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n    if (object.objectType === 'transcodedContent') {\n      return Promise.all(object.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n    }\n\n    return ctx.transform(`decrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  /**\n   * Decrypt an individual submit object from a cardAction activity\n   *   (object.objectType === 'submit')\n   * @param   {Object} ctx      An object containing a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex submit object\n   * these objects are returned when a user clicks on a Action.Submit button in a card\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptSubmit(ctx, key, object) {\n    if (!object.inputs) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx\n      .transform('decryptPropCardItem', 0, key, [object.inputs])\n      .then((inputs) => {\n        object.inputs = JSON.parse(inputs[0]); // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(\n          `plugin-conversation: failed to decrypt attachmentAction.inputs: ${reason}`\n        );\n        object.inputs = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n   * Decrypt an individual reaction2Summary activity (object.objectType === 'reaction2Summary')\n   * @param   {Object} ctx      An object containing a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2Summary object\n   * these objects are returned by various conversation APIs and over mercury\n   * represents an aggregated summary of all reactions to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2summary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(\n      object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction))\n    );\n  },\n\n  /**\n   * Decrypt an individual reaction2SelfSummary activity (object.objectType === 'reaction2SelfSummary')\n   * @param   {Object} ctx      An object containing a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2SelfSummary object\n   * these objects are returned by various conversation APIs and NOT over mercury\n   * they are ONLY received by the self user\n   * they represent ONLY the self user's reactions and are used for enforcing\n   * limit of times they can react to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2selfsummary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(\n      object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction))\n    );\n  },\n\n  /**\n   * Decrypt an individual reaction2 activity (object.objectType === 'reaction2')\n   * @param   {Object} ctx      An object containing a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex reaction2 object\n   * these objects are returned by various conversation APIs and over mercury\n   * ONLY self users receive these objects\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2(ctx, key, object) {\n    return ctx.transform('decryptPropDisplayName', key, object);\n  },\n\n  /**\n   * Decrypt an individual threadObject\n   * @param   {Object} ctx      An object containing a webex instance and a transform\n   * @param   {Object} threadObject An instance of a Webex threadObject (the objects returned by the /conversation/api/v1/threads api)\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptThread(ctx, threadObject) {\n    let promises = [];\n\n    if (threadObject.childActivities && Array.isArray(threadObject.childActivities)) {\n      promises = threadObject.childActivities.map((child) =>\n        ctx.transform('decryptObject', null, child)\n      );\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypt an individual meeting container activity\n   * @param   {Object} ctx      An object containing a webex instance and a transform\n   * @param   {object} key      KMS encryption key url\n   * @param   {Object} meetingContainerActivity An instance of a Webex meeting container activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptMeetingcontainer(ctx, key, meetingContainerActivity) {\n    const promises = [];\n\n    if (meetingContainerActivity.displayName) {\n      const usableKey = meetingContainerActivity.encryptionKeyUrl || key;\n\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, meetingContainerActivity));\n    }\n\n    if (meetingContainerActivity.extensions) {\n      const itemsToDecrypt = meetingContainerActivity.extensions.items.filter(\n        (item) => item.data.objectType === 'recording'\n      );\n\n      itemsToDecrypt.forEach((itemToDecrypt) => {\n        promises.push(\n          ctx.transform('decryptPropTopic', itemToDecrypt.encryptionKeyUrl, itemToDecrypt.data)\n        );\n      });\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a given conversation and it's activities by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containing a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation(ctx, key, conversation) {\n    const promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(\n        Promise.all(\n          conversation.activities.items.map((item) => ctx.transform('decryptObject', null, item))\n        )\n      );\n    }\n\n    const usableKey = conversation.encryptionKeyUrl || key;\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    if (usableKey) {\n      promises.push(\n        ctx.transform('decryptPropDisplayName', usableKey, conversation).catch((error) => {\n          ctx.webex.logger.warn(\n            'plugin-conversation: failed to decrypt display name of ',\n            conversation.url,\n            error\n          );\n          Promise.resolve(decryptionFailureMessage);\n        })\n      );\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(\n        ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar)\n      );\n    }\n    // TODO (holsted 04/06/19): This was deprecated in favor of .previousValue below. I wanted to remove this entirely\n    // but I wasn't sure if some open source use cases may be reading from cached conversations or not so leaving it for now.\n    if (conversation.previous) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previous));\n    }\n    if (conversation.previousValue) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previousValue));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containing a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return Promise.resolve(activity);\n    }\n\n    const keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n\n    let promises = [];\n\n    // iterate and recursively decrypt over children objects\n\n    if (activity.children && Array.isArray(activity.children)) {\n      promises = activity.children.map((child) =>\n        ctx.transform('decryptObject', keyUrl, child.activity)\n      );\n    }\n\n    promises.push(ctx.transform('decryptObject', keyUrl, activity.object));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a context transform\n   */\n  decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n   * Decrypts a comment...\n   * @param {Object} ctx An object containing a webex instance and transform prop\n   * @param {String} key KMS key\n   * @param {Object} comment A comment object with a displayName and content (encrypted)\n   * @returns {Promise} Returns the results of Promise.all on two transforms\n   */\n  decryptComment(ctx, key, comment) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, comment),\n      ctx.transform('decryptPropContent', key, comment),\n    ];\n\n    if (comment.cards && Array.isArray(comment.cards)) {\n      comment.cards.map((item, index) =>\n        promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards))\n      );\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !Array.isArray(content.files.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.files.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && Array.isArray(content.links.items)) {\n      content.links.items.forEach((item) =>\n        promises.push(ctx.transform('decryptObject', key, item))\n      );\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !Array.isArray(content.links.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.links.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent(ctx, key, event) {\n    const promises = [ctx.transform('decryptPropDisplayName', key, event)];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile(ctx, key, file) {\n    // using object encryption keyUrl for images instead of activity encryptionKeyUrl\n    if (file.encryptionKeyUrl && file.encryptionKeyUrl !== key) {\n      key = file.encryptionKeyUrl;\n    }\n\n    return Promise.all([\n      file.transcodedCollection &&\n        Promise.all(\n          file.transcodedCollection.items.map((item) => ctx.transform('decryptObject', key, item))\n        ),\n      ctx.transform('decryptPropScr', key, file),\n      ctx.transform('decryptPropDisplayName', key, file),\n      ctx.transform('decryptPropContent', key, file),\n      file.image && ctx.transform('decryptPropScr', key, file.image),\n    ]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink(ctx, key, link) {\n    return Promise.all([\n      ctx.transform('decryptPropSslr', key, link),\n      ctx.transform('decryptPropDisplayName', key, link),\n    ]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent(ctx, key, transcodedContent) {\n    return Promise.all(\n      transcodedContent.files.items.map((item) => ctx.transform('decryptFile', key, item))\n    );\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption\n      .decryptText(key, object[name])\n      .then((plaintext) => {\n        if (ctx.webex.config.conversation.keepEncryptedProperties) {\n          const encryptedPropName = camelCase(`encrypted_${name}`);\n\n          object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n        }\n\n        object[name] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt ${name} `, reason);\n        object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n   * Decrypting an element in an Array.\n   * @param {Object} ctx An object containing a webex instance and transform prop\n   * @param {Integer} index Property of an object to be decrypted\n   * @param {String} key KMS key\n   * @param {Array} array An array of Strings to be decrypted\n   * @returns {Promise} Returns a lonely Promise\n   */\n  decryptPropCardItem(ctx, index, key, array) {\n    if (\n      !Number.isInteger(index) ||\n      !array ||\n      !Array.isArray(array) ||\n      index < 0 ||\n      index >= array.length ||\n      !(array[index] instanceof String || typeof array[index] === 'string')\n    ) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption\n      .decryptText(key, array[index])\n      .then((plaintext) => {\n        array[index] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt card at ${index} `, reason);\n        array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr).then((scr) => {\n      object.scr = scr; // eslint-disable-line no-param-reassign\n    });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr).then((sslr) => {\n      object.sslr = sslr; // eslint-disable-line no-param-reassign\n    });\n  },\n\n  decryptPropDisplayName: decryptTextProp('displayName'),\n\n  decryptPropContent: decryptTextProp('content'),\n\n  decryptPropModel: decryptTextProp('model'),\n\n  decryptPropLocation: decryptTextProp('location'),\n\n  decryptPropTopic: decryptTextProp('topic'),\n});\n"],"mappings":"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"}