{"version":3,"names":["_activities","require","defaultMinDisplayableActivities","exports","minBatchSize","fetchLoopCountMax","batchSizeIncrementCount","setValue","destination","key","value","set","getValue","source","get","getActivityObjectsFromMap","hashMap","_from","default","map","_ref","_ref2","_slicedToArray2","activity","activityManager","replyActivityHash","_map","editActivityHash","reactionActivityHash","reactionSelfActivityHash","handleNewReply","replyAct","replyParentId","getParentId","existingReplyHash","id","replyHash","handleNewEdit","editAct","isTombstone","verb","ACTIVITY_TYPES","TOMBSTONE","editParentId","existingEdit","isNewer","reactionHelper","reactionAct","hash","reactionParentId","existingReaction","handleNewReaction","handleNewReactionSelf","reactionSelfAct","getActivityHandlerByKey","_ACTIVITY_TYPES$REACT","_defineProperty2","REACTION","REACTION_SELF","EDIT","REPLY","getActivityByTypeAndParentId","type","_ACTIVITY_TYPES$EDIT$","bookendManager","oldestAct","newestAct","getOldestAct","getNewestAct","setOldestAct","act","setNewestAct","setBookends","activities","oldestActsFirst","sortActivitiesByPublishedDate","newestInBatch","_last2","oldestInBatch","noMoreActivitiesManager","noMoreActs","noOlderActs","noNewerActs","getNoMoreActs","checkAndSetNoOlderActs","getActivityType","CREATE","checkAndSetNoNewerActs","length","checkAndSetNoMoreActs","queryType","visibleActs","currentBatchSize","NEWER","OLDER","INITIAL","MID","rootActivityManager","rootActivityHash","addNewRoot","rootAct","getRootActivityHash","getLoopCounterFailsafe","fetchLoopCount","Error","getQuery","queryOptions","newestPublishedDate","oldestPublishedDate","batchSize","_queryOptions$activit","activityToSearch","sinceDate","lastActivityFirst","searchType","midDate","parent","published","limit","maxDate"],"sources":["activity-thread-ordering.js"],"sourcesContent":["import {last} from 'lodash';\n\nimport {\n  ACTIVITY_TYPES,\n  getParentId,\n  isNewer,\n  getActivityType,\n  sortActivitiesByPublishedDate,\n  NEWER,\n  OLDER,\n  INITIAL,\n  MID,\n} from './activities';\n\nexport const defaultMinDisplayableActivities = 20;\nexport const minBatchSize = 10;\nexport const fetchLoopCountMax = 100;\nexport const batchSizeIncrementCount = 10;\n\n// use accessors for ease of refactoring underlying implementation\n/**\n * @param {Map} destination destination map object for data. Currently a Map, but could be refactored to use any type.\n * @param {string} key\n * @param {any} value\n * @returns {Map}\n */\nexport const setValue = (destination, key, value) => destination.set(key, value);\n/**\n * @param {Map} source source map object to access. Currently expects a Map, but could be refactored to use any type\n * @param {string} key\n * @returns {Map}\n */\nexport const getValue = (source, key) => source.get(key);\n\nexport const getActivityObjectsFromMap = (hashMap) =>\n  Array.from(hashMap).map(([, activity]) => activity);\n/**\n * creates maps for various activity types and defines handlers for working with stored activities\n * utilizes revealing module pattern to close over state and only expose certain necessary functions for altering state\n * @function\n * @returns {object}\n * getActivityHandlerByKey(activityType) - accepts a key to map to a defined activity handler\n * getActivityByTypeAndParentId(activityType, parentId) accepts a key and a parent ID to return an activity of that type whose parent is the parentId\n */\nexport const activityManager = () => {\n  const replyActivityHash = new Map();\n  const editActivityHash = new Map();\n  const reactionActivityHash = new Map();\n  const reactionSelfActivityHash = new Map();\n\n  const handleNewReply = (replyAct) => {\n    const replyParentId = getParentId(replyAct);\n    const existingReplyHash = getValue(replyActivityHash, replyParentId);\n\n    if (existingReplyHash) {\n      setValue(existingReplyHash, replyAct.id, replyAct);\n    } else {\n      const replyHash = new Map();\n\n      setValue(replyHash, replyAct.id, replyAct);\n      setValue(replyActivityHash, replyParentId, replyHash);\n    }\n  };\n\n  const handleNewEdit = (editAct) => {\n    const isTombstone = editAct.verb === ACTIVITY_TYPES.TOMBSTONE;\n\n    // we can ignore tombstone edits in favor of the newer one\n    if (isTombstone) {\n      return;\n    }\n\n    const editParentId = getParentId(editAct);\n    const existingEdit = getValue(editActivityHash, editParentId);\n\n    // edited activity must be newer than what we already have\n    if (!existingEdit || isNewer(editAct, existingEdit)) {\n      setValue(editActivityHash, editParentId, editAct);\n    }\n  };\n\n  // logic is identical between reactions and reaction selfs, so handler simply passes the activity and the correct hash\n  const reactionHelper = (reactionAct, hash) => {\n    const reactionParentId = getParentId(reactionAct);\n    const existingReaction = getValue(hash, reactionParentId);\n\n    // reaction activity must be newer than what we already have\n    if (!existingReaction || isNewer(reactionAct, existingReaction)) {\n      setValue(hash, reactionParentId, reactionAct);\n    }\n  };\n\n  const handleNewReaction = (reactionAct) => {\n    reactionHelper(reactionAct, reactionActivityHash);\n  };\n\n  const handleNewReactionSelf = (reactionSelfAct) => {\n    reactionHelper(reactionSelfAct, reactionSelfActivityHash);\n  };\n\n  const getActivityHandlerByKey = (key) =>\n    ({\n      [ACTIVITY_TYPES.REACTION]: handleNewReaction,\n      [ACTIVITY_TYPES.REACTION_SELF]: handleNewReactionSelf,\n      [ACTIVITY_TYPES.EDIT]: handleNewEdit,\n      [ACTIVITY_TYPES.REPLY]: handleNewReply,\n    }[key]);\n\n  const getActivityByTypeAndParentId = (type, id) =>\n    ({\n      [ACTIVITY_TYPES.EDIT]: getValue(editActivityHash, id),\n      [ACTIVITY_TYPES.REPLY]: getValue(replyActivityHash, id),\n      [ACTIVITY_TYPES.REACTION]: getValue(reactionActivityHash, id),\n      [ACTIVITY_TYPES.REACTION_SELF]: getValue(reactionSelfActivityHash, id),\n    }[type]);\n\n  return {\n    getActivityHandlerByKey,\n    getActivityByTypeAndParentId,\n  };\n};\n\n/**\n * encapsulates state and logic for managing oldest and newest activities\n * @returns {object} setters and getters for activity state management\n */\nexport const bookendManager = () => {\n  // keep track of generator state, like what our current oldest & newest activities are\n  let oldestAct;\n  let newestAct;\n\n  const getOldestAct = () => oldestAct;\n  const getNewestAct = () => newestAct;\n\n  const setOldestAct = (act) => {\n    if (!oldestAct) {\n      oldestAct = act;\n    } else if (isNewer(oldestAct, act)) {\n      oldestAct = act;\n    }\n  };\n\n  const setNewestAct = (act) => {\n    if (!newestAct) {\n      newestAct = act;\n    } else if (isNewer(act, newestAct)) {\n      newestAct = act;\n    }\n  };\n\n  const setBookends = (activities) => {\n    const oldestActsFirst = sortActivitiesByPublishedDate(activities);\n\n    const newestInBatch = last(oldestActsFirst);\n    const oldestInBatch = oldestActsFirst[0];\n\n    setOldestAct(oldestInBatch);\n    setNewestAct(newestInBatch);\n  };\n\n  return {\n    setBookends,\n    getNewestAct,\n    getOldestAct,\n  };\n};\n\n/**\n * encapsulates state and logic for when there are no more fetchable activities from convo\n * @returns {object} setters and getters for no more activities logic\n */\nexport const noMoreActivitiesManager = () => {\n  // used to determine if we should continue to fetch older activities\n  // must be set per iteration, as querying newer activities is still valid when all end of convo has been reached\n  let noMoreActs = false;\n  let noOlderActs = false;\n  let noNewerActs = false;\n\n  const getNoMoreActs = () => noMoreActs;\n\n  const checkAndSetNoOlderActs = (act) => {\n    if (!noOlderActs && getActivityType(act) === ACTIVITY_TYPES.CREATE) {\n      noOlderActs = true;\n    }\n  };\n\n  const checkAndSetNoNewerActs = (activities) => {\n    if (!activities || !activities.length) {\n      noNewerActs = true;\n    }\n  };\n\n  const checkAndSetNoMoreActs = (queryType, visibleActs, currentBatchSize) => {\n    if (\n      (queryType === NEWER && noNewerActs) ||\n      ((queryType === OLDER || queryType === INITIAL) && noOlderActs) ||\n      (queryType === MID && visibleActs < currentBatchSize && noOlderActs)\n    ) {\n      noMoreActs = true;\n    }\n  };\n\n  return {\n    getNoMoreActs,\n    checkAndSetNoMoreActs,\n    checkAndSetNoNewerActs,\n    checkAndSetNoOlderActs,\n  };\n};\n\n/**\n * encapsulates state and logic for managing root activities\n * @returns {object} setters and getters for activity state management\n */\nexport const rootActivityManager = () => {\n  const rootActivityHash = new Map();\n\n  const addNewRoot = (rootAct) => {\n    setValue(rootActivityHash, rootAct.id, rootAct);\n  };\n\n  const getRootActivityHash = () => rootActivityHash;\n\n  return {\n    addNewRoot,\n    getRootActivityHash,\n  };\n};\n\nexport const getLoopCounterFailsafe = () => {\n  let fetchLoopCount = 0;\n\n  return () => {\n    fetchLoopCount += 1;\n    if (fetchLoopCount > fetchLoopCountMax) {\n      throw new Error('max fetches reached');\n    }\n  };\n};\n\n/**\n * creates activity query object\n * @param {string} type type of query to create\n * @param {object} queryOptions options to define query\n * @param {string} [queryOptions.newestPublishedDate] the date of the newest fetched activity\n * @param {string} [queryOptions.oldestPublishedDate] the date of the oldest fetched activity\n * @param {number} [queryOptions.batchSize] the number of activities to query\n * @param {object} [queryOptions.activityToSearch] a server activity to use to build middate query\n * @returns {object}\n */\nexport const getQuery = (type, queryOptions) => {\n  const {newestPublishedDate, oldestPublishedDate, batchSize, activityToSearch = {}} = queryOptions;\n\n  switch (type) {\n    case NEWER: {\n      const sinceDate = newestPublishedDate + 1;\n      const lastActivityFirst = false;\n\n      return {sinceDate, lastActivityFirst};\n    }\n    case MID: {\n      const searchType = getActivityType(activityToSearch);\n      let midDate;\n\n      if (searchType === ACTIVITY_TYPES.REPLY || searchType === ACTIVITY_TYPES.EDIT) {\n        midDate = activityToSearch.parent.published;\n      } else {\n        midDate = activityToSearch.published;\n      }\n\n      return {midDate, limit: batchSize};\n    }\n    case OLDER: {\n      const maxDate = oldestPublishedDate - 1;\n\n      return {maxDate};\n    }\n    case INITIAL:\n    default: {\n      return {};\n    }\n  }\n};\n"],"mappings":"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"}